# Illustrates how to deploy Cerbos with traces exported via OTLP.

cerbos:
  config:
    # Configure the SQLite3 storage driver
    storage:
      driver: "sqlite3"
      sqlite3:
        dsn: "file:/data/cerbos.sqlite?mode=rwc&_fk=true"

# Environment variables to configure OTLP exporter.
env:
  - name: OTEL_SERVICE_NAME
    value: cerbos.myns.svc
  - name: OTEL_TRACE_SAMPLER
    value: parentbased_always_on
  - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
    value: https://otlp.monitoring.svc.cluster.local

# Optional common labels for resources.
commonLabels:
  app.kubernetes.io/part-of: my-awesome-app

# Optional annotations for the service.
service:
  annotations:
    a8r.io/owner: my-awesome-team
    a8r.io/uptime: dashboard.example.com/cerbos

# Optional annotations for the Cerbos pod.
podAnnotations:
  a8r.io/owner: my-awesome-team

# Create volumes to hold the SQLite3 database.
# Note that this example uses emptyDir volumes that lose data when the pod or node is killed.
# Use persistent volumes in production to preserve the data between pod restarts.
volumes:
  - name: cerbos-policies
    emptyDir: {}

volumeMounts:
  - name: cerbos-policies
    mountPath: /data
