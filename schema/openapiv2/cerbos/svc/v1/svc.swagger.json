{
  "swagger": "2.0",
  "info": {
    "title": "Cerbos",
    "version": "latest",
    "contact": {
      "name": "Cerbos",
      "url": "https://cerbos.dev",
      "email": "info@cerbos.dev"
    }
  },
  "tags": [
    {
      "name": "CerbosService",
      "description": "Cerbos Policy Decision Point"
    },
    {
      "name": "CerbosAdminService",
      "description": "Cerbos administration service"
    },
    {
      "name": "CerbosPlaygroundService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/admin/auditlog/list/{kind}": {
      "get": {
        "summary": "List audit log entries",
        "operationId": "CerbosAdminService_ListAuditLogEntries",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1ListAuditLogEntriesResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1ListAuditLogEntriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "kind",
            "description": "Kind of log entry",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "KIND_ACCESS",
              "KIND_DECISION"
            ]
          },
          {
            "name": "tail",
            "description": "Last N entries.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "between.start",
            "description": "Start date in ISO 8601 format.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "between.end",
            "description": "End date in ISO 8601 format.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "since",
            "description": "Entries since N hours/minutes ago",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lookup",
            "description": "By Call ID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CerbosAdminService"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/admin/policy": {
      "post": {
        "summary": "Add or update policies",
        "operationId": "CerbosAdminService_AddOrUpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOrUpdatePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrUpdatePolicyRequest"
            }
          }
        ],
        "tags": [
          "CerbosAdminService"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "put": {
        "summary": "Add or update policies",
        "operationId": "CerbosAdminService_AddOrUpdatePolicy2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddOrUpdatePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrUpdatePolicyRequest"
            }
          }
        ],
        "tags": [
          "CerbosAdminService"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/admin/policy/list": {
      "get": {
        "summary": "List policies",
        "operationId": "CerbosAdminService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sortOptions.column",
            "description": "Sort column",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "COLUMN_UNSPECIFIED",
              "COLUMN_NAME",
              "COLUMN_VERSION"
            ],
            "default": "COLUMN_UNSPECIFIED"
          },
          {
            "name": "sortOptions.order",
            "description": "Sort order",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_UNSPECIFIED",
              "ORDER_ASCENDING",
              "ORDER_DESCENDING"
            ],
            "default": "ORDER_UNSPECIFIED"
          }
        ],
        "tags": [
          "CerbosAdminService"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "post": {
        "summary": "List policies",
        "operationId": "CerbosAdminService_ListPolicies2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesRequest"
            }
          }
        ],
        "tags": [
          "CerbosAdminService"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/check": {
      "post": {
        "summary": "Check",
        "description": "Check whether a principal has permissions to perform the given actions on a set of resource instances.",
        "operationId": "CerbosService_CheckResourceSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckResourceSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckResourceSetRequest"
            }
          }
        ],
        "tags": [
          "CerbosService"
        ]
      }
    },
    "/api/check_resource_batch": {
      "post": {
        "summary": "Check resource batch",
        "description": "Check a principal's permissions to a batch of heterogeneous resources and actions.",
        "operationId": "CerbosService_CheckResourceBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckResourceBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckResourceBatchRequest"
            }
          }
        ],
        "tags": [
          "CerbosService"
        ]
      }
    },
    "/api/list_resources": {
      "post": {
        "summary": "List resources",
        "description": "List resources",
        "operationId": "CerbosService_ListResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListResourcesRequest"
            }
          }
        ],
        "tags": [
          "CerbosService"
        ]
      }
    },
    "/api/playground/evaluate": {
      "post": {
        "operationId": "CerbosPlaygroundService_PlaygroundEvaluate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PlaygroundEvaluateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PlaygroundEvaluateRequest"
            }
          }
        ],
        "tags": [
          "CerbosPlaygroundService"
        ]
      }
    },
    "/api/playground/proxy": {
      "post": {
        "operationId": "CerbosPlaygroundService_PlaygroundProxy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PlaygroundProxyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PlaygroundProxyRequest"
            }
          }
        ],
        "tags": [
          "CerbosPlaygroundService"
        ]
      }
    },
    "/api/playground/validate": {
      "post": {
        "operationId": "CerbosPlaygroundService_PlaygroundValidate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PlaygroundValidateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PlaygroundValidateRequest"
            }
          }
        ],
        "tags": [
          "CerbosPlaygroundService"
        ]
      }
    },
    "/api/server_info": {
      "get": {
        "summary": "Get server information",
        "description": "Get information about the server e.g. server version",
        "operationId": "CerbosService_ServerInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServerInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CerbosService"
        ]
      }
    }
  },
  "definitions": {
    "AuxDataJWT": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "JWT from the original request",
          "required": [
            "token"
          ]
        },
        "keySetId": {
          "type": "string",
          "description": "Key ID to use when decoding the token (defined in the Cerbos server configuration)"
        }
      },
      "description": "JWT from the original request",
      "required": [
        "token"
      ]
    },
    "CheckOutputActionEffect": {
      "type": "object",
      "properties": {
        "effect": {
          "$ref": "#/definitions/v1Effect"
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "CheckResourceBatchRequestBatchEntry": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "example": [
            "view:public",
            "comment"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of actions being performed on the resource.",
          "maxItems": 10,
          "minItems": 1,
          "uniqueItems": true,
          "required": [
            "actions"
          ]
        },
        "resource": {
          "$ref": "#/definitions/v1Resource"
        }
      },
      "required": [
        "actions"
      ]
    },
    "CheckResourceSetResponseMeta": {
      "type": "object",
      "properties": {
        "resourceInstances": {
          "type": "object",
          "example": {
            "XX125": {
              "actions": {
                "view:*": {
                  "matched_policy": "album:object:default"
                },
                "comment": {
                  "matched_policy": "album:object:default"
                }
              },
              "effective_derived_roles": [
                "owner"
              ]
            },
            "XX225": {
              "actions": {
                "view:*": {
                  "matched_policy": "album:object:default"
                },
                "comment": {
                  "matched_policy": "album:object:default"
                }
              }
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/MetaActionMeta"
          },
          "description": "Metadata about resource instances."
        }
      },
      "description": "Metadata about request evaluation."
    },
    "CreateStructEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Required. An id assigned to this node by the parser which is unique\nin a given expression tree. This is used to associate type\ninformation and other attributes to the node."
        },
        "fieldKey": {
          "type": "string",
          "description": "The field key for a message creator statement."
        },
        "mapKey": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "The key expression for a map creation statement."
        },
        "value": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "Required. The value assigned to the key."
        }
      },
      "description": "Represents an entry."
    },
    "ExprCall": {
      "type": "object",
      "properties": {
        "target": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "The target of an method call-style expression. For example, `x` in\n`x.f()`."
        },
        "function": {
          "type": "string",
          "description": "Required. The name of the function or method being called."
        },
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Expr"
          },
          "description": "The arguments."
        }
      },
      "description": "A call expression, including calls to predefined functions and operators.\n\nFor example, `value == 10`, `size(map_value)`."
    },
    "ExprComprehension": {
      "type": "object",
      "properties": {
        "iterVar": {
          "type": "string",
          "description": "The name of the iteration variable."
        },
        "iterRange": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "The range over which var iterates."
        },
        "accuVar": {
          "type": "string",
          "description": "The name of the variable used for accumulation of the result."
        },
        "accuInit": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "The initial value of the accumulator."
        },
        "loopCondition": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "An expression which can contain iter_var and accu_var.\n\nReturns false when the result has been computed and may be used as\na hint to short-circuit the remainder of the comprehension."
        },
        "loopStep": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "An expression which can contain iter_var and accu_var.\n\nComputes the next value of accu_var."
        },
        "result": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "An expression which can contain accu_var.\n\nComputes the result."
        }
      },
      "description": "A comprehension expression applied to a list or map.\n\nComprehensions are not part of the core syntax, but enabled with macros.\nA macro matches a specific call signature within a parsed AST and replaces\nthe call with an alternate AST block. Macro expansion happens at parse\ntime.\n\nThe following macros are supported within CEL:\n\nAggregate type macros may be applied to all elements in a list or all keys\nin a map:\n\n*  `all`, `exists`, `exists_one` -  test a predicate expression against\n   the inputs and return `true` if the predicate is satisfied for all,\n   any, or only one value `list.all(x, x \u003c 10)`.\n*  `filter` - test a predicate expression against the inputs and return\n   the subset of elements which satisfy the predicate:\n   `payments.filter(p, p \u003e 1000)`.\n*  `map` - apply an expression to all elements in the input and return the\n   output aggregate type: `[1, 2, 3].map(i, i * i)`.\n\nThe `has(m.x)` macro tests whether the property `x` is present in struct\n`m`. The semantics of this macro depend on the type of `m`. For proto2\nmessages `has(m.x)` is defined as 'defined, but not set`. For proto3, the\nmacro tests whether the property is set to its default. For map and struct\ntypes, the macro tests whether the property `x` is defined on `m`."
    },
    "ExprCreateList": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Expr"
          },
          "description": "The elements part of the list."
        }
      },
      "description": "A list creation expression.\n\nLists may either be homogenous, e.g. `[1, 2, 3]`, or heterogenous, e.g.\n`dyn([1, 'hello', 2.0])`"
    },
    "ExprCreateStruct": {
      "type": "object",
      "properties": {
        "messageName": {
          "type": "string",
          "description": "The type name of the message to be created, empty when creating map\nliterals."
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateStructEntry"
          },
          "description": "The entries in the creation expression."
        }
      },
      "description": "A map or message creation expression.\n\nMaps are constructed as `{'key_name': 'value'}`. Message construction is\nsimilar, but prefixed with a type name and composed of field ids:\n`types.MyType{field_id: 'value'}`."
    },
    "ExprIdent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Holds a single, unqualified identifier, possibly preceded by a\n'.'.\n\nQualified names are represented by the [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression."
        }
      },
      "description": "An identifier expression. e.g. `request`."
    },
    "ExprSelect": {
      "type": "object",
      "properties": {
        "operand": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "Required. The target of the selection expression.\n\nFor example, in the select expression `request.auth`, the `request`\nportion of the expression is the `operand`."
        },
        "field": {
          "type": "string",
          "description": "Required. The name of the field to select.\n\nFor example, in the select expression `request.auth`, the `auth` portion\nof the expression would be the `field`."
        },
        "testOnly": {
          "type": "boolean",
          "description": "Whether the select is to be interpreted as a field presence test.\n\nThis results from the macro `has(request.auth)`."
        }
      },
      "description": "A field selection expression. e.g. `request.auth`."
    },
    "ListAuditLogEntriesRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "KIND_ACCESS",
        "KIND_DECISION"
      ],
      "default": "KIND_UNSPECIFIED"
    },
    "ListAuditLogEntriesRequestTimeRange": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time",
          "example": "2021-07-05T07:27:01+00:00",
          "description": "Start date in ISO 8601 format.",
          "required": [
            "start"
          ]
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "example": "2021-07-05T07:27:01+00:00",
          "description": "End date in ISO 8601 format.",
          "required": [
            "end"
          ]
        }
      },
      "description": "Entries between a time range.",
      "required": [
        "start",
        "end"
      ]
    },
    "ListPoliciesRequestFilter": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ListPoliciesRequestMatchType",
          "example": "MATCH_TYPE_WILDCARD",
          "description": "Kind of filter"
        },
        "fieldPath": {
          "type": "string",
          "example": "$.resourcePolicy.resource",
          "description": "JSONPath expression describing the field to match",
          "required": [
            "field_path"
          ]
        },
        "value": {
          "type": "string",
          "example": "*",
          "description": "The value to compare",
          "required": [
            "value"
          ]
        }
      },
      "description": "Filter options",
      "required": [
        "fieldPath",
        "value"
      ]
    },
    "ListPoliciesRequestMatchType": {
      "type": "string",
      "enum": [
        "MATCH_TYPE_UNSPECIFIED",
        "MATCH_TYPE_EXACT",
        "MATCH_TYPE_WILDCARD"
      ],
      "default": "MATCH_TYPE_UNSPECIFIED"
    },
    "ListPoliciesRequestSortOptions": {
      "type": "object",
      "properties": {
        "column": {
          "$ref": "#/definitions/SortOptionsColumn",
          "example": "COLUMN_NAME",
          "description": "Sort column"
        },
        "order": {
          "$ref": "#/definitions/SortOptionsOrder",
          "example": "ORDER_ASCENDING",
          "description": "Sort order"
        }
      },
      "description": "Sort options"
    },
    "ListResourcesResponseNode": {
      "type": "object",
      "properties": {
        "logicalOperation": {
          "$ref": "#/definitions/v1ListResourcesResponseLogicalOperation"
        },
        "expression": {
          "$ref": "#/definitions/v1alpha1CheckedExpr"
        }
      }
    },
    "LogicalOperationOperator": {
      "type": "string",
      "enum": [
        "AND",
        "OR"
      ],
      "default": "AND"
    },
    "MatchExprList": {
      "type": "object",
      "properties": {
        "of": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Match"
          }
        }
      }
    },
    "MetaActionMeta": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "object",
          "example": {
            "view:*": {
              "matched_policy": "album:object:default"
            },
            "comment": {
              "matched_policy": "album:object:default"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/MetaEffectMeta"
          },
          "description": "Metadata about the effect calculated for each action on this resource instance."
        },
        "effectiveDerivedRoles": {
          "type": "array",
          "example": [
            "owner"
          ],
          "items": {
            "type": "string"
          },
          "description": "Derived roles that were effective during policy evaluation."
        }
      },
      "description": "Unique resource instance ID supplied in the request."
    },
    "MetaEffectMeta": {
      "type": "object",
      "properties": {
        "matchedPolicy": {
          "type": "string",
          "example": "album:object:default",
          "description": "Policy that matched to produce this effect."
        }
      },
      "description": "Name of the action."
    },
    "PlaygroundEvaluateResponseEvalResult": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "effect": {
          "$ref": "#/definitions/v1Effect"
        },
        "policy": {
          "type": "string"
        },
        "effectiveDerivedRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PlaygroundEvaluateResponseEvalResultList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaygroundEvaluateResponseEvalResult"
          }
        }
      }
    },
    "PlaygroundFailureError": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "PrincipalRuleAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/v1Condition"
        },
        "effect": {
          "$ref": "#/definitions/v1Effect"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SortOptionsColumn": {
      "type": "string",
      "enum": [
        "COLUMN_UNSPECIFIED",
        "COLUMN_NAME",
        "COLUMN_VERSION"
      ],
      "default": "COLUMN_UNSPECIFIED"
    },
    "SortOptionsOrder": {
      "type": "string",
      "enum": [
        "ORDER_UNSPECIFIED",
        "ORDER_ASCENDING",
        "ORDER_DESCENDING"
      ],
      "default": "ORDER_UNSPECIFIED"
    },
    "TypeAbstractType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The fully qualified name of this abstract type."
        },
        "parameterTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/exprv1alpha1Type"
          },
          "description": "Parameter types for this abstract type."
        }
      },
      "description": "Application defined abstract type."
    },
    "TypeFunctionType": {
      "type": "object",
      "properties": {
        "resultType": {
          "$ref": "#/definitions/exprv1alpha1Type",
          "description": "Result type of the function."
        },
        "argTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/exprv1alpha1Type"
          },
          "description": "Argument types of the function."
        }
      },
      "description": "Function type with result and arg types."
    },
    "TypeListType": {
      "type": "object",
      "properties": {
        "elemType": {
          "$ref": "#/definitions/exprv1alpha1Type",
          "description": "The element type."
        }
      },
      "description": "List type with typed elements, e.g. `list\u003cexample.proto.MyMessage\u003e`."
    },
    "TypeMapType": {
      "type": "object",
      "properties": {
        "keyType": {
          "$ref": "#/definitions/exprv1alpha1Type",
          "description": "The type of the key."
        },
        "valueType": {
          "$ref": "#/definitions/exprv1alpha1Type",
          "description": "The type of the value."
        }
      },
      "description": "Map type with parameterized key and value types, e.g. `map\u003cstring, int\u003e`."
    },
    "TypePrimitiveType": {
      "type": "string",
      "enum": [
        "PRIMITIVE_TYPE_UNSPECIFIED",
        "BOOL",
        "INT64",
        "UINT64",
        "DOUBLE",
        "STRING",
        "BYTES"
      ],
      "default": "PRIMITIVE_TYPE_UNSPECIFIED",
      "description": "CEL primitive types.\n\n - PRIMITIVE_TYPE_UNSPECIFIED: Unspecified type.\n - BOOL: Boolean type.\n - INT64: Int64 type.\n\nProto-based integer values are widened to int64.\n - UINT64: Uint64 type.\n\nProto-based unsigned integer values are widened to uint64.\n - DOUBLE: Double type.\n\nProto-based float values are widened to double values.\n - STRING: String type.\n - BYTES: Bytes type."
    },
    "TypeWellKnownType": {
      "type": "string",
      "enum": [
        "WELL_KNOWN_TYPE_UNSPECIFIED",
        "ANY",
        "TIMESTAMP",
        "DURATION"
      ],
      "default": "WELL_KNOWN_TYPE_UNSPECIFIED",
      "description": "Well-known protobuf types treated with first-class support in CEL.\n\n - WELL_KNOWN_TYPE_UNSPECIFIED: Unspecified type.\n - ANY: Well-known protobuf.Any type.\n\nAny types are a polymorphic message type. During type-checking they are\ntreated like `DYN` types, but at runtime they are resolved to a specific\nmessage type specified at evaluation time.\n - TIMESTAMP: Well-known protobuf.Timestamp type, internally referenced as `timestamp`.\n - DURATION: Well-known protobuf.Duration type, internally referenced as `duration`."
    },
    "cerbosenginev1AuxData": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "description": "Structured auxiliary data"
    },
    "cerbosrequestv1AuxData": {
      "type": "object",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/AuxDataJWT"
        }
      },
      "description": "Structured auxiliary data useful for evaluating the request"
    },
    "enginev1CheckInput": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1Resource"
        },
        "principal": {
          "$ref": "#/definitions/v1Principal"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "required": [
            "actions"
          ]
        },
        "auxData": {
          "$ref": "#/definitions/cerbosenginev1AuxData"
        }
      },
      "required": [
        "actions"
      ]
    },
    "exprv1alpha1Type": {
      "type": "object",
      "properties": {
        "dyn": {
          "properties": {},
          "description": "Dynamic type."
        },
        "null": {
          "type": "string",
          "description": "Null value."
        },
        "primitive": {
          "$ref": "#/definitions/TypePrimitiveType",
          "description": "Primitive types: `true`, `1u`, `-2.0`, `'string'`, `b'bytes'`."
        },
        "wrapper": {
          "$ref": "#/definitions/TypePrimitiveType",
          "description": "Wrapper of a primitive type, e.g. `google.protobuf.Int64Value`."
        },
        "wellKnown": {
          "$ref": "#/definitions/TypeWellKnownType",
          "description": "Well-known protobuf type such as `google.protobuf.Timestamp`."
        },
        "listType": {
          "$ref": "#/definitions/TypeListType",
          "description": "Parameterized list with elements of `list_type`, e.g. `list\u003ctimestamp\u003e`."
        },
        "mapType": {
          "$ref": "#/definitions/TypeMapType",
          "description": "Parameterized map with typed keys and values."
        },
        "function": {
          "$ref": "#/definitions/TypeFunctionType",
          "description": "Function type."
        },
        "messageType": {
          "type": "string",
          "description": "Protocol buffer message type.\n\nThe `message_type` string specifies the qualified message type name. For\nexample, `google.plus.Profile`."
        },
        "typeParam": {
          "type": "string",
          "description": "Type param type.\n\nThe `type_param` string specifies the type parameter name, e.g. `list\u003cE\u003e`\nwould be a `list_type` whose element type was a `type_param` type\nnamed `E`."
        },
        "type": {
          "$ref": "#/definitions/exprv1alpha1Type",
          "description": "Type type.\n\nThe `type` value specifies the target type. e.g. int is type with a\ntarget type of `Primitive.INT`."
        },
        "error": {
          "properties": {},
          "description": "Error type.\n\nDuring type-checking if an expression is an error, its type is propagated\nas the `ERROR` type. This permits the type-checker to discover other\nerrors present in the expression."
        },
        "abstractType": {
          "$ref": "#/definitions/TypeAbstractType",
          "description": "Abstract, application defined type."
        }
      },
      "description": "Represents a CEL type."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccessLogEntry": {
      "type": "object",
      "properties": {
        "callId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "peer": {
          "$ref": "#/definitions/v1Peer"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MetaValues"
          }
        },
        "method": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1AddOrUpdatePolicyRequest": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          },
          "description": "List of policies.",
          "maxItems": 10,
          "minItems": 1,
          "required": [
            "policies"
          ]
        }
      },
      "description": "Add/update policy request",
      "required": [
        "policies"
      ]
    },
    "v1AddOrUpdatePolicyResponse": {
      "type": "object",
      "properties": {
        "success": {
          "properties": {}
        }
      },
      "description": "Add/update policy response"
    },
    "v1AttributesMap": {
      "type": "object",
      "properties": {
        "attr": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "description": "Key-value pairs of contextual data about this instance that should be used during policy evaluation."
        }
      },
      "description": "Unique identifier for the resource instance."
    },
    "v1CheckOutput": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "actions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CheckOutputActionEffect"
          }
        },
        "effectiveDerivedRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CheckResourceBatchRequest": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Optional application-specific ID useful for correlating logs for analysis."
        },
        "principal": {
          "$ref": "#/definitions/v1Principal"
        },
        "resources": {
          "type": "array",
          "example": [
            {
              "actions": [
                "view",
                "comment"
              ],
              "resource": {
                "kind": "album:object",
                "policyVersion": "default",
                "id": "XX125",
                "attr": {
                  "owner": "bugs_bunny",
                  "public": false,
                  "flagged": false
                }
              }
            }
          ],
          "items": {
            "$ref": "#/definitions/CheckResourceBatchRequestBatchEntry"
          },
          "description": "List of resources and actions.",
          "maxItems": 20,
          "minItems": 1,
          "uniqueItems": true,
          "required": [
            "resources"
          ]
        },
        "auxData": {
          "$ref": "#/definitions/cerbosrequestv1AuxData"
        }
      },
      "description": "PDP Request",
      "required": [
        "resources"
      ]
    },
    "v1CheckResourceBatchResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Request ID provided in the request."
        },
        "results": {
          "type": "array",
          "example": [
            {
              "resourceId": "XX125",
              "actions": {
                "view": "EFFECT_ALLOW"
              }
            }
          ],
          "items": {
            "$ref": "#/definitions/v1CheckResourceBatchResponseActionEffectMap"
          },
          "description": "Result for each resource"
        }
      },
      "description": "Policy evaluation response for a batch of resources."
    },
    "v1CheckResourceBatchResponseActionEffectMap": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "example": "XX125",
          "description": "Resource ID"
        },
        "actions": {
          "type": "object",
          "example": {
            "view": "EFFECT_ALLOW"
          },
          "additionalProperties": {
            "$ref": "#/definitions/v1Effect"
          },
          "description": "Mapping of each action to an effect."
        }
      }
    },
    "v1CheckResourceSetRequest": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Optional application-specific ID useful for correlating logs for analysis."
        },
        "actions": {
          "type": "array",
          "example": [
            "view:public",
            "comment"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of actions being performed on the set of resources.",
          "maxItems": 10,
          "minItems": 1,
          "uniqueItems": true,
          "required": [
            "actions"
          ]
        },
        "principal": {
          "$ref": "#/definitions/v1Principal"
        },
        "resource": {
          "$ref": "#/definitions/v1ResourceSet"
        },
        "includeMeta": {
          "type": "boolean",
          "description": "Opt to receive request processing metadata in the response."
        },
        "auxData": {
          "$ref": "#/definitions/cerbosrequestv1AuxData"
        }
      },
      "description": "PDP Request",
      "required": [
        "actions"
      ]
    },
    "v1CheckResourceSetResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Request ID provided in the request."
        },
        "resourceInstances": {
          "type": "object",
          "example": {
            "XX125": {
              "actions": {
                "view:*": "EFFECT_ALLOW",
                "comment": "EFFECT_ALLOW"
              }
            },
            "XX225": {
              "actions": {
                "view:*": "EFFECT_DENY",
                "comment": "EFFECT_DENY"
              }
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/v1CheckResourceSetResponseActionEffectMap"
          },
          "description": "Results for each resource instance, keyed by the ID supplied in the request"
        },
        "meta": {
          "$ref": "#/definitions/CheckResourceSetResponseMeta",
          "description": "Optional metadata about the request evaluation process"
        }
      },
      "description": "Policy evaluation response for a set of resources."
    },
    "v1CheckResourceSetResponseActionEffectMap": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Effect"
          },
          "description": "Mapping of each action to an effect."
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/v1Match"
        },
        "script": {
          "type": "string"
        }
      }
    },
    "v1DecisionLogEntry": {
      "type": "object",
      "properties": {
        "callId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "peer": {
          "$ref": "#/definitions/v1Peer"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enginev1CheckInput"
          }
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CheckOutput"
          }
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1DerivedRoles": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "definitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RoleDef"
          }
        }
      }
    },
    "v1Effect": {
      "type": "string",
      "enum": [
        "EFFECT_UNSPECIFIED",
        "EFFECT_ALLOW",
        "EFFECT_DENY",
        "EFFECT_NO_MATCH"
      ],
      "default": "EFFECT_UNSPECIFIED"
    },
    "v1ListAuditLogEntriesResponse": {
      "type": "object",
      "properties": {
        "accessLogEntry": {
          "$ref": "#/definitions/v1AccessLogEntry"
        },
        "decisionLogEntry": {
          "$ref": "#/definitions/v1DecisionLogEntry"
        }
      },
      "description": "Audit log stream."
    },
    "v1ListPoliciesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListPoliciesRequestFilter"
          }
        },
        "sortOptions": {
          "$ref": "#/definitions/ListPoliciesRequestSortOptions"
        }
      },
      "description": "List policies request"
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          }
        }
      },
      "description": "List of policies stored in the Cerbos server"
    },
    "v1ListResourcesRequest": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Optional application-specific ID useful for correlating logs for analysis."
        },
        "action": {
          "type": "string",
          "example": "view:public",
          "description": "Action to be applied to each resource in the list.",
          "required": [
            "action"
          ]
        },
        "principal": {
          "$ref": "#/definitions/v1Principal"
        },
        "resourceKind": {
          "type": "string",
          "example": "album:object",
          "description": "Resource kind.",
          "pattern": "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$",
          "required": [
            "resource_kind"
          ]
        },
        "policyVersion": {
          "type": "string",
          "example": "default",
          "description": "The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.",
          "pattern": "^[[:word:]]*$"
        },
        "auxData": {
          "$ref": "#/definitions/cerbosrequestv1AuxData"
        }
      },
      "description": "PDP List Resources Request",
      "required": [
        "action",
        "resourceKind"
      ]
    },
    "v1ListResourcesResponse": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "example": "c2db17b8-4f9f-4fb1-acfd-9162a02be42b",
          "description": "Request ID provided in the request."
        },
        "action": {
          "type": "string",
          "example": "view:public",
          "description": "Request ID provided in the request."
        },
        "kind": {
          "type": "string",
          "example": "album:object",
          "description": "Resource kind.",
          "pattern": "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$"
        },
        "policyVersion": {
          "type": "string",
          "example": "default",
          "description": "The policy version."
        },
        "filter": {
          "$ref": "#/definitions/ListResourcesResponseNode",
          "description": "Filter"
        }
      },
      "description": "List resources response for a set of resources."
    },
    "v1ListResourcesResponseLogicalOperation": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/LogicalOperationOperator"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListResourcesResponseNode"
          }
        }
      }
    },
    "v1Match": {
      "type": "object",
      "properties": {
        "all": {
          "$ref": "#/definitions/MatchExprList"
        },
        "any": {
          "$ref": "#/definitions/MatchExprList"
        },
        "none": {
          "$ref": "#/definitions/MatchExprList"
        },
        "expr": {
          "type": "string"
        }
      }
    },
    "v1MetaValues": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "sourceFile": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1Peer": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "authInfo": {
          "type": "string"
        },
        "userAgent": {
          "type": "string"
        },
        "forwardedFor": {
          "type": "string"
        }
      }
    },
    "v1PlaygroundEvaluateRequest": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "policyFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyFile"
          },
          "description": "List of policy files.",
          "maxItems": 10,
          "minItems": 1,
          "required": [
            "policy_files"
          ]
        },
        "principal": {
          "$ref": "#/definitions/v1Principal"
        },
        "resource": {
          "$ref": "#/definitions/v1Resource"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of actions being performed on the resource.",
          "maxItems": 10,
          "minItems": 1,
          "uniqueItems": true,
          "required": [
            "actions"
          ]
        },
        "auxData": {
          "$ref": "#/definitions/cerbosrequestv1AuxData"
        }
      },
      "description": "Playground evaluate request",
      "required": [
        "policyFiles",
        "actions"
      ]
    },
    "v1PlaygroundEvaluateResponse": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "failure": {
          "$ref": "#/definitions/v1PlaygroundFailure"
        },
        "success": {
          "$ref": "#/definitions/PlaygroundEvaluateResponseEvalResultList"
        }
      },
      "description": "Playground evaluate response"
    },
    "v1PlaygroundFailure": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaygroundFailureError"
          }
        }
      },
      "description": "Playground response"
    },
    "v1PlaygroundProxyRequest": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "policyFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyFile"
          },
          "description": "List of policy files.",
          "maxItems": 10,
          "minItems": 1,
          "required": [
            "policy_files"
          ]
        },
        "checkResourceSet": {
          "$ref": "#/definitions/v1CheckResourceSetRequest"
        },
        "checkResourceBatch": {
          "$ref": "#/definitions/v1CheckResourceBatchRequest"
        }
      },
      "description": "Playground proxy request",
      "required": [
        "policyFiles"
      ]
    },
    "v1PlaygroundProxyResponse": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "failure": {
          "$ref": "#/definitions/v1PlaygroundFailure"
        },
        "checkResourceSet": {
          "$ref": "#/definitions/v1CheckResourceSetResponse"
        },
        "checkResourceBatch": {
          "$ref": "#/definitions/v1CheckResourceBatchResponse"
        }
      },
      "description": "Playground proxy response"
    },
    "v1PlaygroundValidateRequest": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "policyFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyFile"
          },
          "description": "List of policy files.",
          "maxItems": 10,
          "minItems": 1,
          "required": [
            "policy_files"
          ]
        }
      },
      "description": "Playground validate request",
      "required": [
        "policyFiles"
      ]
    },
    "v1PlaygroundValidateResponse": {
      "type": "object",
      "properties": {
        "playgroundId": {
          "type": "string"
        },
        "failure": {
          "$ref": "#/definitions/v1PlaygroundFailure"
        },
        "success": {
          "properties": {}
        }
      },
      "description": "Playground validate response"
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1Metadata"
        },
        "resourcePolicy": {
          "$ref": "#/definitions/v1ResourcePolicy"
        },
        "principalPolicy": {
          "$ref": "#/definitions/v1PrincipalPolicy"
        },
        "derivedRoles": {
          "$ref": "#/definitions/v1DerivedRoles"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyFile": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "required": [
            "file_name"
          ]
        },
        "contents": {
          "type": "string",
          "format": "byte",
          "required": [
            "contents"
          ]
        }
      },
      "required": [
        "fileName",
        "contents"
      ]
    },
    "v1Principal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "bugs_bunny",
          "description": "ID of the principal",
          "required": [
            "id"
          ]
        },
        "policyVersion": {
          "type": "string",
          "example": "default",
          "description": "The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.",
          "pattern": "^[[:word:]]*$"
        },
        "roles": {
          "type": "array",
          "example": [
            "user"
          ],
          "items": {
            "type": "string"
          },
          "description": "Roles assigned to this principal from your identity management system.",
          "pattern": "^[[:word:]\\-\\.]+$",
          "maxItems": 20,
          "minItems": 1,
          "uniqueItems": true,
          "required": [
            "roles"
          ]
        },
        "attr": {
          "type": "object",
          "example": {
            "beta_tester": true
          },
          "additionalProperties": {
            "type": "object"
          },
          "description": "Key-value pairs of contextual data about this principal that should be used during policy evaluation."
        }
      },
      "description": "A person or application attempting to perform the actions on the set of resources.",
      "required": [
        "id",
        "roles"
      ]
    },
    "v1PrincipalPolicy": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PrincipalRule"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1PrincipalRule": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrincipalRuleAction"
          }
        }
      }
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "example": "album:photo",
          "description": "Name of the resource kind being accessed.",
          "pattern": "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$",
          "required": [
            "kind"
          ]
        },
        "policyVersion": {
          "type": "string",
          "example": "default",
          "description": "The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.",
          "pattern": "^[[:word:]]*$"
        },
        "id": {
          "type": "string",
          "example": "XX125",
          "description": "ID of the resource instance",
          "required": [
            "id"
          ]
        },
        "attr": {
          "type": "object",
          "example": {
            "owner": "bugs_bunny"
          },
          "additionalProperties": {
            "type": "object"
          },
          "description": "Kay-value pairs of contextual data about this resource that should be used during policy evaluation."
        }
      },
      "required": [
        "kind",
        "id"
      ]
    },
    "v1ResourcePolicy": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "importDerivedRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceRule"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "v1ResourceRule": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "derivedRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "$ref": "#/definitions/v1Condition"
        },
        "effect": {
          "$ref": "#/definitions/v1Effect"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ResourceSet": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "example": "album:object",
          "description": "Resource kind.",
          "pattern": "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$",
          "required": [
            "kind"
          ]
        },
        "policyVersion": {
          "type": "string",
          "example": "default",
          "description": "The policy version to use to evaluate this request. If not specified, will default to the server-configured default version.",
          "pattern": "^[[:word:]]*$"
        },
        "instances": {
          "type": "object",
          "example": {
            "XX125": {
              "attr": {
                "owner": "bugs_bunny",
                "public": false,
                "flagged": false
              }
            },
            "XX225": {
              "attr": {
                "owner": "daffy_duck",
                "public": true,
                "flagged": false
              }
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/v1AttributesMap"
          },
          "description": "Set of resource instances to check. Each instance must be keyed by an application-specific unique identifier.",
          "maxProperties": 20,
          "minProperties": 1,
          "required": [
            "instances"
          ]
        }
      },
      "description": "Set of resources to check",
      "required": [
        "kind",
        "instances"
      ]
    },
    "v1RoleDef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parentRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "$ref": "#/definitions/v1Condition"
        }
      }
    },
    "v1ServerInfoResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "buildDate": {
          "type": "string"
        }
      },
      "description": "Server info response"
    },
    "v1alpha1CheckedExpr": {
      "type": "object",
      "properties": {
        "referenceMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1Reference"
          },
          "description": "A map from expression ids to resolved references.\n\nThe following entries are in this table:\n\n- An Ident or Select expression is represented here if it resolves to a\n  declaration. For instance, if `a.b.c` is represented by\n  `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,\n  while `c` is a field selection, then the reference is attached to the\n  nested select expression (but not to the id or or the outer select).\n  In turn, if `a` resolves to a declaration and `b.c` are field selections,\n  the reference is attached to the ident expression.\n- Every Call expression has an entry here, identifying the function being\n  called.\n- Every CreateStruct expression for a message has an entry, identifying\n  the message."
        },
        "typeMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/exprv1alpha1Type"
          },
          "description": "A map from expression ids to types.\n\nEvery expression node which has a type different than DYN has a mapping\nhere. If an expression has type DYN, it is omitted from this map to save\nspace."
        },
        "sourceInfo": {
          "$ref": "#/definitions/v1alpha1SourceInfo",
          "description": "The source info derived from input that generated the parsed `expr` and\nany optimizations made during the type-checking pass."
        },
        "expr": {
          "$ref": "#/definitions/v1alpha1Expr",
          "description": "The checked expression. Semantically equivalent to the parsed `expr`, but\nmay have structural differences."
        }
      },
      "description": "A CEL expression which has been successfully type checked."
    },
    "v1alpha1Constant": {
      "type": "object",
      "properties": {
        "nullValue": {
          "type": "string",
          "description": "null value."
        },
        "boolValue": {
          "type": "boolean",
          "description": "boolean value."
        },
        "int64Value": {
          "type": "string",
          "format": "int64",
          "description": "int64 value."
        },
        "uint64Value": {
          "type": "string",
          "format": "uint64",
          "description": "uint64 value."
        },
        "doubleValue": {
          "type": "number",
          "format": "double",
          "description": "double value."
        },
        "stringValue": {
          "type": "string",
          "description": "string value."
        },
        "bytesValue": {
          "type": "string",
          "format": "byte",
          "description": "bytes value."
        },
        "durationValue": {
          "type": "string",
          "description": "protobuf.Duration value.\n\nDeprecated: duration is no longer considered a builtin cel type."
        },
        "timestampValue": {
          "type": "string",
          "format": "date-time",
          "description": "protobuf.Timestamp value.\n\nDeprecated: timestamp is no longer considered a builtin cel type."
        }
      },
      "description": "Represents a primitive literal.\n\nNamed 'Constant' here for backwards compatibility.\n\nThis is similar as the primitives supported in the well-known type\n`google.protobuf.Value`, but richer so it can represent CEL's full range of\nprimitives.\n\nLists and structs are not included as constants as these aggregate types may\ncontain [Expr][google.api.expr.v1alpha1.Expr] elements which require evaluation and are thus not constant.\n\nExamples of literals include: `\"hello\"`, `b'bytes'`, `1u`, `4.2`, `-2`,\n`true`, `null`."
    },
    "v1alpha1Expr": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Required. An id assigned to this node by the parser which is unique in a\ngiven expression tree. This is used to associate type information and other\nattributes to a node in the parse tree."
        },
        "constExpr": {
          "$ref": "#/definitions/v1alpha1Constant",
          "description": "A literal expression."
        },
        "identExpr": {
          "$ref": "#/definitions/ExprIdent",
          "description": "An identifier expression."
        },
        "selectExpr": {
          "$ref": "#/definitions/ExprSelect",
          "description": "A field selection expression, e.g. `request.auth`."
        },
        "callExpr": {
          "$ref": "#/definitions/ExprCall",
          "description": "A call expression, including calls to predefined functions and operators."
        },
        "listExpr": {
          "$ref": "#/definitions/ExprCreateList",
          "description": "A list creation expression."
        },
        "structExpr": {
          "$ref": "#/definitions/ExprCreateStruct",
          "description": "A map or message creation expression."
        },
        "comprehensionExpr": {
          "$ref": "#/definitions/ExprComprehension",
          "description": "A comprehension expression."
        }
      },
      "description": "An abstract representation of a common expression.\n\nExpressions are abstractly represented as a collection of identifiers,\nselect statements, function calls, literals, and comprehensions. All\noperators with the exception of the '.' operator are modelled as function\ncalls. This makes it easy to represent new operators into the existing AST.\n\nAll references within expressions must resolve to a [Decl][google.api.expr.v1alpha1.Decl] provided at\ntype-check for an expression to be valid. A reference may either be a bare\nidentifier `name` or a qualified identifier `google.api.name`. References\nmay either refer to a value or a function declaration.\n\nFor example, the expression `google.api.name.startsWith('expr')` references\nthe declaration `google.api.name` within a [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and\nthe function declaration `startsWith`."
    },
    "v1alpha1Reference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The fully qualified name of the declaration."
        },
        "overloadId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For references to functions, this is a list of `Overload.overload_id`\nvalues which match according to typing rules.\n\nIf the list has more than one element, overload resolution among the\npresented candidates must happen at runtime because of dynamic types. The\ntype checker attempts to narrow down this list as much as possible.\n\nEmpty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl]."
        },
        "value": {
          "$ref": "#/definitions/v1alpha1Constant",
          "description": "For references to constants, this may contain the value of the\nconstant if known at compile time."
        }
      },
      "description": "Describes a resolved reference to a declaration."
    },
    "v1alpha1SourceInfo": {
      "type": "object",
      "properties": {
        "syntaxVersion": {
          "type": "string",
          "description": "The syntax version of the source, e.g. `cel1`."
        },
        "location": {
          "type": "string",
          "description": "The location name. All position information attached to an expression is\nrelative to this location.\n\nThe location could be a file, UI element, or similar. For example,\n`acme/app/AnvilPolicy.cel`."
        },
        "lineOffsets": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Monotonically increasing list of character offsets where newlines appear.\n\nThe line number of a given position is the index `i` where for a given\n`id` the `line_offsets[i] \u003c id_positions[id] \u003c line_offsets[i+1]`. The\ncolumn may be derivd from `id_positions[id] - line_offsets[i]`."
        },
        "positions": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "A map from the parse node id (e.g. `Expr.id`) to the character offset\nwithin source."
        },
        "macroCalls": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1Expr"
          },
          "description": "A map from the parse node id where a macro replacement was made to the\ncall `Expr` that resulted in a macro expansion.\n\nFor example, `has(value.field)` is a function call that is replaced by a\n`test_only` field selection in the AST. Likewise, the call\n`list.exists(e, e \u003e 10)` translates to a comprehension expression. The key\nin the map corresponds to the expression id of the expanded macro, and the\nvalue is the call `Expr` that was replaced."
        }
      },
      "description": "Source information collected at parse time."
    }
  },
  "securityDefinitions": {
    "BasicAuth": {
      "type": "basic"
    }
  }
}
