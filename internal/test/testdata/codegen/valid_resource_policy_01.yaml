---
inputPolicy:
  apiVersion: api.cerbos.dev/v1
  variables:
    status: ("PENDING_APPROVAL")
  resourcePolicy:
    version: "20210210"
    importDerivedRoles:
        - my_derived_roles
    resource: "hr:leave_request"
    rules:
      - actions: ['*']
        effect: EFFECT_ALLOW
        roles:
          - admin
      - actions: ["create", "edit", "view:*"]
        effect: EFFECT_ALLOW
        roles:
          - hr_operators
          - legal
      - actions: ["*", "create", "edit", "view:*"]
        effect: EFFECT_ALLOW
        roles:
          - super_user
        derivedRoles:
          - god
      - actions: ["create", "edit"]
        derivedRoles:
          - employee_that_owns_the_record
        effect: EFFECT_ALLOW
      - actions: ["view:*"]
        derivedRoles:
          - employee_that_owns_the_record
          - direct_manager
        effect: EFFECT_ALLOW
      - actions: ["view:public"]
        derivedRoles:
          - any_employee
        effect: EFFECT_ALLOW
      - actions: ["approve"]
        condition:
          match:
            all:
              of:
                - expr: request.resource.attr.status == variables.status
                - expr: |-
                    "test" in request.resource.attr.geographies
        derivedRoles:
          - direct_manager
        effect: EFFECT_ALLOW
wantRego: |-
  package cerbos.resource.hr_leave_request.v20210210

  cerbos_derived_roles = data.cerbos.derived_roles.my_derived_roles.cerbos_derived_roles

  cerbos_effect_for(cerbos_action) = "allow" {
      glob.match("*", [], cerbos_action)
      input.principal.roles[_] == "admin"    
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      cerbos_actions_list := ["create", "edit", "view:*"]
      cerbos_action_matches := [a | a := glob.match(cerbos_actions_list[_], [":"], cerbos_action)]
      cerbos_action_matches[_] == true
      cerbos_allowed_roles := {"hr_operators", "legal"}
      cerbos_allowed_roles[_] == input.principal.roles[_]
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      glob.match("*", [], cerbos_action)
      input.principal.roles[_] == "super_user"
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      glob.match("*", [], cerbos_action)
      cerbos_derived_roles["god"] == true
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      cerbos_actions_list := ["create", "edit"]
      cerbos_action_matches := [a | a := glob.match(cerbos_actions_list[_], [":"], cerbos_action)]
      cerbos_action_matches[_] == true
      cerbos_derived_roles["employee_that_owns_the_record"] == true    
  }

  cerbos_effect_for(cerbos_action) = "allow" {
    glob.match("view:*", [":"], cerbos_action)
      cerbos_allowed_roles := {"employee_that_owns_the_record", "direct_manager"}
      some cerbos_dr
      cerbos_derived_roles[cerbos_dr] == true
      cerbos_allowed_roles[_] == cerbos_dr     
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      glob.match("view:public", [":"], cerbos_action)
      cerbos_derived_roles["any_employee"] == true    
  }

  cerbos_effect_for(cerbos_action) = "allow" {
      glob.match("approve", [":"], cerbos_action)
      cerbos_derived_roles["direct_manager"] == true    
      cerbos_cel_eval(input, "cerbos.resource.hr_leave_request.v20210210", "cond_0")
  }

  cerbos_effective_derived_roles := {dr | cerbos_derived_roles[dr] == true}

  cerbos_effect_string(cerbos_action) = cerbos_effect {
    cerbos_effect := cerbos_effect_for(cerbos_action)
  } else = "deny"

  cerbos_effects := {cerbos_action: effect |
      cerbos_action := input.actions[_]
      effect := cerbos_effect_string(cerbos_action)
  }

wantNumConditions: 1
