---
inputPolicy:
  apiVersion: "cerbos.dev/v1"
  derived_roles:
    name: my_derived_roles
    definitions:
      - name: admin
        parentRoles: ["admin"]

      - name: tester
        parentRoles: ["dev", "qa"]

      - name: employee_that_owns_the_record
        parentRoles: ["employee"]
        computation:
          script: |-
            input.resource.attr.owner == input.principal.id

      - name: any_employee
        parentRoles: ["employee"]

      - name: direct_manager
        parentRoles: ["manager"]
        computation:
          match:
            expr:
              - "request.resource.attr.geography == request.principal.attr.geography"
              - "request.resource.attr.geography == request.principal.attr.managed_geographies"

wantRego: |-
  package cerbos.derived_roles.my_derived_roles

  derived_roles["admin"] = true {
      input.principal.roles[_] == "admin" 
  }

  derived_roles["tester"] = true {
      parent_roles := {"dev", "qa"}
      input.principal.roles[_] == parent_roles[_]
  }
    
  derived_roles["employee_that_owns_the_record"] = true  {
      input.principal.roles[_] == "employee" 
      input.resource.attr.owner == input.principal.id 
  }

  derived_roles["any_employee"] = true {
      input.principal.roles[_] == "employee" 
  }

  derived_roles["direct_manager"] = true {
      input.principal.roles[_] == "manager"
      cel_eval(input, "cerbos.derived_roles.my_derived_roles", "cond_0")
  }

wantNumConditions: 1
