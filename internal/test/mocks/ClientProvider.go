// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	hub "github.com/cerbos/cerbos/internal/storage/hub"
	bundle "github.com/cerbos/cloud-api/bundle"

	mock "github.com/stretchr/testify/mock"
)

// ClientProvider is an autogenerated mock type for the ClientProvider type
type ClientProvider struct {
	mock.Mock
}

type ClientProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientProvider) EXPECT() *ClientProvider_Expecter {
	return &ClientProvider_Expecter{mock: &_m.Mock}
}

// V1 provides a mock function with given fields: _a0
func (_m *ClientProvider) V1(_a0 bundle.ClientConf) (hub.ClientV1, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for V1")
	}

	var r0 hub.ClientV1
	var r1 error
	if rf, ok := ret.Get(0).(func(bundle.ClientConf) (hub.ClientV1, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bundle.ClientConf) hub.ClientV1); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hub.ClientV1)
		}
	}

	if rf, ok := ret.Get(1).(func(bundle.ClientConf) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProvider_V1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V1'
type ClientProvider_V1_Call struct {
	*mock.Call
}

// V1 is a helper method to define mock.On call
//   - _a0 bundle.ClientConf
func (_e *ClientProvider_Expecter) V1(_a0 interface{}) *ClientProvider_V1_Call {
	return &ClientProvider_V1_Call{Call: _e.mock.On("V1", _a0)}
}

func (_c *ClientProvider_V1_Call) Run(run func(_a0 bundle.ClientConf)) *ClientProvider_V1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bundle.ClientConf))
	})
	return _c
}

func (_c *ClientProvider_V1_Call) Return(_a0 hub.ClientV1, _a1 error) *ClientProvider_V1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProvider_V1_Call) RunAndReturn(run func(bundle.ClientConf) (hub.ClientV1, error)) *ClientProvider_V1_Call {
	_c.Call.Return(run)
	return _c
}

// V2 provides a mock function with given fields: _a0
func (_m *ClientProvider) V2(_a0 bundle.ClientConf) (hub.ClientV2, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for V2")
	}

	var r0 hub.ClientV2
	var r1 error
	if rf, ok := ret.Get(0).(func(bundle.ClientConf) (hub.ClientV2, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(bundle.ClientConf) hub.ClientV2); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hub.ClientV2)
		}
	}

	if rf, ok := ret.Get(1).(func(bundle.ClientConf) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProvider_V2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V2'
type ClientProvider_V2_Call struct {
	*mock.Call
}

// V2 is a helper method to define mock.On call
//   - _a0 bundle.ClientConf
func (_e *ClientProvider_Expecter) V2(_a0 interface{}) *ClientProvider_V2_Call {
	return &ClientProvider_V2_Call{Call: _e.mock.On("V2", _a0)}
}

func (_c *ClientProvider_V2_Call) Run(run func(_a0 bundle.ClientConf)) *ClientProvider_V2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bundle.ClientConf))
	})
	return _c
}

func (_c *ClientProvider_V2_Call) Return(_a0 hub.ClientV2, _a1 error) *ClientProvider_V2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProvider_V2_Call) RunAndReturn(run func(bundle.ClientConf) (hub.ClientV2, error)) *ClientProvider_V2_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientProvider creates a new instance of ClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientProvider {
	mock := &ClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
