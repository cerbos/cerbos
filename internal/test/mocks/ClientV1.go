// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bundle "github.com/cerbos/cloud-api/bundle"

	credentials "github.com/cerbos/cloud-api/credentials"

	mock "github.com/stretchr/testify/mock"
)

// ClientV1 is an autogenerated mock type for the ClientV1 type
type ClientV1 struct {
	mock.Mock
}

type ClientV1_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientV1) EXPECT() *ClientV1_Expecter {
	return &ClientV1_Expecter{mock: &_m.Mock}
}

// BootstrapBundle provides a mock function with given fields: _a0, _a1
func (_m *ClientV1) BootstrapBundle(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BootstrapBundle")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientV1_BootstrapBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootstrapBundle'
type ClientV1_BootstrapBundle_Call struct {
	*mock.Call
}

// BootstrapBundle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ClientV1_Expecter) BootstrapBundle(_a0 interface{}, _a1 interface{}) *ClientV1_BootstrapBundle_Call {
	return &ClientV1_BootstrapBundle_Call{Call: _e.mock.On("BootstrapBundle", _a0, _a1)}
}

func (_c *ClientV1_BootstrapBundle_Call) Run(run func(_a0 context.Context, _a1 string)) *ClientV1_BootstrapBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_BootstrapBundle_Call) Return(_a0 string, _a1 error) *ClientV1_BootstrapBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientV1_BootstrapBundle_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ClientV1_BootstrapBundle_Call {
	_c.Call.Return(run)
	return _c
}

// GetBundle provides a mock function with given fields: _a0, _a1
func (_m *ClientV1) GetBundle(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBundle")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientV1_GetBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBundle'
type ClientV1_GetBundle_Call struct {
	*mock.Call
}

// GetBundle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ClientV1_Expecter) GetBundle(_a0 interface{}, _a1 interface{}) *ClientV1_GetBundle_Call {
	return &ClientV1_GetBundle_Call{Call: _e.mock.On("GetBundle", _a0, _a1)}
}

func (_c *ClientV1_GetBundle_Call) Run(run func(_a0 context.Context, _a1 string)) *ClientV1_GetBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_GetBundle_Call) Return(_a0 string, _a1 error) *ClientV1_GetBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientV1_GetBundle_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ClientV1_GetBundle_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachedBundle provides a mock function with given fields: _a0
func (_m *ClientV1) GetCachedBundle(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCachedBundle")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientV1_GetCachedBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedBundle'
type ClientV1_GetCachedBundle_Call struct {
	*mock.Call
}

// GetCachedBundle is a helper method to define mock.On call
//   - _a0 string
func (_e *ClientV1_Expecter) GetCachedBundle(_a0 interface{}) *ClientV1_GetCachedBundle_Call {
	return &ClientV1_GetCachedBundle_Call{Call: _e.mock.On("GetCachedBundle", _a0)}
}

func (_c *ClientV1_GetCachedBundle_Call) Run(run func(_a0 string)) *ClientV1_GetCachedBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientV1_GetCachedBundle_Call) Return(_a0 string, _a1 error) *ClientV1_GetCachedBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientV1_GetCachedBundle_Call) RunAndReturn(run func(string) (string, error)) *ClientV1_GetCachedBundle_Call {
	_c.Call.Return(run)
	return _c
}

// HubCredentials provides a mock function with no fields
func (_m *ClientV1) HubCredentials() *credentials.Credentials {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HubCredentials")
	}

	var r0 *credentials.Credentials
	if rf, ok := ret.Get(0).(func() *credentials.Credentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credentials.Credentials)
		}
	}

	return r0
}

// ClientV1_HubCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HubCredentials'
type ClientV1_HubCredentials_Call struct {
	*mock.Call
}

// HubCredentials is a helper method to define mock.On call
func (_e *ClientV1_Expecter) HubCredentials() *ClientV1_HubCredentials_Call {
	return &ClientV1_HubCredentials_Call{Call: _e.mock.On("HubCredentials")}
}

func (_c *ClientV1_HubCredentials_Call) Run(run func()) *ClientV1_HubCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientV1_HubCredentials_Call) Return(_a0 *credentials.Credentials) *ClientV1_HubCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientV1_HubCredentials_Call) RunAndReturn(run func() *credentials.Credentials) *ClientV1_HubCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// WatchBundle provides a mock function with given fields: _a0, _a1
func (_m *ClientV1) WatchBundle(_a0 context.Context, _a1 string) (bundle.WatchHandle, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchBundle")
	}

	var r0 bundle.WatchHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bundle.WatchHandle, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bundle.WatchHandle); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bundle.WatchHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientV1_WatchBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchBundle'
type ClientV1_WatchBundle_Call struct {
	*mock.Call
}

// WatchBundle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ClientV1_Expecter) WatchBundle(_a0 interface{}, _a1 interface{}) *ClientV1_WatchBundle_Call {
	return &ClientV1_WatchBundle_Call{Call: _e.mock.On("WatchBundle", _a0, _a1)}
}

func (_c *ClientV1_WatchBundle_Call) Run(run func(_a0 context.Context, _a1 string)) *ClientV1_WatchBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_WatchBundle_Call) Return(_a0 bundle.WatchHandle, _a1 error) *ClientV1_WatchBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientV1_WatchBundle_Call) RunAndReturn(run func(context.Context, string) (bundle.WatchHandle, error)) *ClientV1_WatchBundle_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientV1 creates a new instance of ClientV1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientV1(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientV1 {
	mock := &ClientV1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
