// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/cerbos/cloud-api/bundle"
	"github.com/cerbos/cloud-api/credentials"
	mock "github.com/stretchr/testify/mock"
)

// NewClientV1 creates a new instance of ClientV1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientV1(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientV1 {
	mock := &ClientV1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientV1 is an autogenerated mock type for the ClientV1 type
type ClientV1 struct {
	mock.Mock
}

type ClientV1_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientV1) EXPECT() *ClientV1_Expecter {
	return &ClientV1_Expecter{mock: &_m.Mock}
}

// BootstrapBundle provides a mock function for the type ClientV1
func (_mock *ClientV1) BootstrapBundle(context1 context.Context, s string) (string, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for BootstrapBundle")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientV1_BootstrapBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootstrapBundle'
type ClientV1_BootstrapBundle_Call struct {
	*mock.Call
}

// BootstrapBundle is a helper method to define mock.On call
//   - context1
//   - s
func (_e *ClientV1_Expecter) BootstrapBundle(context1 interface{}, s interface{}) *ClientV1_BootstrapBundle_Call {
	return &ClientV1_BootstrapBundle_Call{Call: _e.mock.On("BootstrapBundle", context1, s)}
}

func (_c *ClientV1_BootstrapBundle_Call) Run(run func(context1 context.Context, s string)) *ClientV1_BootstrapBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_BootstrapBundle_Call) Return(s1 string, err error) *ClientV1_BootstrapBundle_Call {
	_c.Call.Return(s1, err)
	return _c
}

func (_c *ClientV1_BootstrapBundle_Call) RunAndReturn(run func(context1 context.Context, s string) (string, error)) *ClientV1_BootstrapBundle_Call {
	_c.Call.Return(run)
	return _c
}

// GetBundle provides a mock function for the type ClientV1
func (_mock *ClientV1) GetBundle(context1 context.Context, s string) (string, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetBundle")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientV1_GetBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBundle'
type ClientV1_GetBundle_Call struct {
	*mock.Call
}

// GetBundle is a helper method to define mock.On call
//   - context1
//   - s
func (_e *ClientV1_Expecter) GetBundle(context1 interface{}, s interface{}) *ClientV1_GetBundle_Call {
	return &ClientV1_GetBundle_Call{Call: _e.mock.On("GetBundle", context1, s)}
}

func (_c *ClientV1_GetBundle_Call) Run(run func(context1 context.Context, s string)) *ClientV1_GetBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_GetBundle_Call) Return(s1 string, err error) *ClientV1_GetBundle_Call {
	_c.Call.Return(s1, err)
	return _c
}

func (_c *ClientV1_GetBundle_Call) RunAndReturn(run func(context1 context.Context, s string) (string, error)) *ClientV1_GetBundle_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachedBundle provides a mock function for the type ClientV1
func (_mock *ClientV1) GetCachedBundle(s string) (string, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetCachedBundle")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientV1_GetCachedBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedBundle'
type ClientV1_GetCachedBundle_Call struct {
	*mock.Call
}

// GetCachedBundle is a helper method to define mock.On call
//   - s
func (_e *ClientV1_Expecter) GetCachedBundle(s interface{}) *ClientV1_GetCachedBundle_Call {
	return &ClientV1_GetCachedBundle_Call{Call: _e.mock.On("GetCachedBundle", s)}
}

func (_c *ClientV1_GetCachedBundle_Call) Run(run func(s string)) *ClientV1_GetCachedBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientV1_GetCachedBundle_Call) Return(s1 string, err error) *ClientV1_GetCachedBundle_Call {
	_c.Call.Return(s1, err)
	return _c
}

func (_c *ClientV1_GetCachedBundle_Call) RunAndReturn(run func(s string) (string, error)) *ClientV1_GetCachedBundle_Call {
	_c.Call.Return(run)
	return _c
}

// HubCredentials provides a mock function for the type ClientV1
func (_mock *ClientV1) HubCredentials() *credentials.Credentials {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HubCredentials")
	}

	var r0 *credentials.Credentials
	if returnFunc, ok := ret.Get(0).(func() *credentials.Credentials); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credentials.Credentials)
		}
	}
	return r0
}

// ClientV1_HubCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HubCredentials'
type ClientV1_HubCredentials_Call struct {
	*mock.Call
}

// HubCredentials is a helper method to define mock.On call
func (_e *ClientV1_Expecter) HubCredentials() *ClientV1_HubCredentials_Call {
	return &ClientV1_HubCredentials_Call{Call: _e.mock.On("HubCredentials")}
}

func (_c *ClientV1_HubCredentials_Call) Run(run func()) *ClientV1_HubCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientV1_HubCredentials_Call) Return(credentials1 *credentials.Credentials) *ClientV1_HubCredentials_Call {
	_c.Call.Return(credentials1)
	return _c
}

func (_c *ClientV1_HubCredentials_Call) RunAndReturn(run func() *credentials.Credentials) *ClientV1_HubCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// WatchBundle provides a mock function for the type ClientV1
func (_mock *ClientV1) WatchBundle(context1 context.Context, s string) (bundle.WatchHandle, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for WatchBundle")
	}

	var r0 bundle.WatchHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bundle.WatchHandle, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bundle.WatchHandle); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bundle.WatchHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientV1_WatchBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchBundle'
type ClientV1_WatchBundle_Call struct {
	*mock.Call
}

// WatchBundle is a helper method to define mock.On call
//   - context1
//   - s
func (_e *ClientV1_Expecter) WatchBundle(context1 interface{}, s interface{}) *ClientV1_WatchBundle_Call {
	return &ClientV1_WatchBundle_Call{Call: _e.mock.On("WatchBundle", context1, s)}
}

func (_c *ClientV1_WatchBundle_Call) Run(run func(context1 context.Context, s string)) *ClientV1_WatchBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientV1_WatchBundle_Call) Return(watchHandle bundle.WatchHandle, err error) *ClientV1_WatchBundle_Call {
	_c.Call.Return(watchHandle, err)
	return _c
}

func (_c *ClientV1_WatchBundle_Call) RunAndReturn(run func(context1 context.Context, s string) (bundle.WatchHandle, error)) *ClientV1_WatchBundle_Call {
	_c.Call.Return(run)
	return _c
}
