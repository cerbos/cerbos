// Copyright 2021 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	namer "github.com/cerbos/cerbos/internal/namer"
	mock "github.com/stretchr/testify/mock"

	policy "github.com/cerbos/cerbos/internal/policy"

	storage "github.com/cerbos/cerbos/internal/storage"
)

// MutableStore is an autogenerated mock type for the MutableStore type
type MutableStore struct {
	mock.Mock
}

// AddOrUpdate provides a mock function with given fields: _a0, _a1
func (_m *MutableStore) AddOrUpdate(_a0 context.Context, _a1 ...policy.Wrapper) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...policy.Wrapper) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MutableStore) Delete(_a0 context.Context, _a1 ...namer.ModuleID) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...namer.ModuleID) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Driver provides a mock function with given fields:
func (_m *MutableStore) Driver() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCompilationUnits provides a mock function with given fields: _a0, _a1
func (_m *MutableStore) GetCompilationUnits(_a0 context.Context, _a1 ...namer.ModuleID) (map[namer.ModuleID]*policy.CompilationUnit, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[namer.ModuleID]*policy.CompilationUnit
	if rf, ok := ret.Get(0).(func(context.Context, ...namer.ModuleID) map[namer.ModuleID]*policy.CompilationUnit); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[namer.ModuleID]*policy.CompilationUnit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...namer.ModuleID) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDependents provides a mock function with given fields: _a0, _a1
func (_m *MutableStore) GetDependents(_a0 context.Context, _a1 ...namer.ModuleID) (map[namer.ModuleID][]namer.ModuleID, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[namer.ModuleID][]namer.ModuleID
	if rf, ok := ret.Get(0).(func(context.Context, ...namer.ModuleID) map[namer.ModuleID][]namer.ModuleID); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[namer.ModuleID][]namer.ModuleID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...namer.ModuleID) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: _a0
func (_m *MutableStore) Subscribe(_a0 storage.Subscriber) {
	_m.Called(_a0)
}

// Unsubscribe provides a mock function with given fields: _a0
func (_m *MutableStore) Unsubscribe(_a0 storage.Subscriber) {
	_m.Called(_a0)
}
