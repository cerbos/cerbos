// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: request/v1/request.proto

package requestv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _request_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	if m.GetResource() == nil {
		return CheckRequestValidationError{
			field:  "Resource",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPrincipal() == nil {
		return CheckRequestValidationError{
			field:  "Principal",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetAction()) < 1 {
		return CheckRequestValidationError{
			field:  "Action",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resource) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ResourceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_Resource_Name_Pattern.MatchString(m.GetName()) {
		return ResourceValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[[:alpha:]][[:word:]\\\\@\\\\.\\\\-]*(\\\\:[[:alpha:]][[:word:]\\\\@\\\\.\\\\-]*)*$\"",
		}
	}

	if !_Resource_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		return ResourceValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
	}

	for key, val := range m.GetAttr() {
		_ = val

		if val == nil {
			return ResourceValidationError{
				field:  fmt.Sprintf("Attr[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Attr[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

var _Resource_Name_Pattern = regexp.MustCompile("^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$")

var _Resource_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

// Validate checks the field values on Principal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Principal) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return PrincipalValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_Principal_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		return PrincipalValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
	}

	if len(m.GetRoles()) < 1 {
		return PrincipalValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_Principal_Roles_Unique := make(map[string]struct{}, len(m.GetRoles()))

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if _, exists := _Principal_Roles_Unique[item]; exists {
			return PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_Principal_Roles_Unique[item] = struct{}{}
		}

		if !_Principal_Roles_Pattern.MatchString(item) {
			return PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "value does not match regex pattern \"^[[:word:]\\\\-\\\\.]+$\"",
			}
		}

	}

	for key, val := range m.GetAttr() {
		_ = val

		if val == nil {
			return PrincipalValidationError{
				field:  fmt.Sprintf("Attr[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Attr[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PrincipalValidationError is the validation error returned by
// Principal.Validate if the designated constraints aren't met.
type PrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalValidationError) ErrorName() string { return "PrincipalValidationError" }

// Error satisfies the builtin error interface
func (e PrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalValidationError{}

var _Principal_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _Principal_Roles_Pattern = regexp.MustCompile("^[[:word:]\\-\\.]+$")

// Validate checks the field values on CheckResourceBatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckResourceBatchRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	if len(m.GetActions()) < 1 {
		return CheckResourceBatchRequestValidationError{
			field:  "Actions",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_CheckResourceBatchRequest_Actions_Unique := make(map[string]struct{}, len(m.GetActions()))

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if _, exists := _CheckResourceBatchRequest_Actions_Unique[item]; exists {
			return CheckResourceBatchRequestValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_CheckResourceBatchRequest_Actions_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) < 1 {
			return CheckResourceBatchRequestValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
		}

	}

	if m.GetPrincipal() == nil {
		return CheckResourceBatchRequestValidationError{
			field:  "Principal",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourceBatchRequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetResource() == nil {
		return CheckResourceBatchRequestValidationError{
			field:  "Resource",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourceBatchRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckResourceBatchRequestValidationError is the validation error returned by
// CheckResourceBatchRequest.Validate if the designated constraints aren't met.
type CheckResourceBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchRequestValidationError) ErrorName() string {
	return "CheckResourceBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchRequestValidationError{}

// Validate checks the field values on ResourceBatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceBatch) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ResourceBatchValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_ResourceBatch_Name_Pattern.MatchString(m.GetName()) {
		return ResourceBatchValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[[:alpha:]][[:word:]\\\\@\\\\.\\\\-]*(\\\\:[[:alpha:]][[:word:]\\\\@\\\\.\\\\-]*)*$\"",
		}
	}

	if !_ResourceBatch_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		return ResourceBatchValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
	}

	if l := len(m.GetInstances()); l < 1 || l > 50 {
		return ResourceBatchValidationError{
			field:  "Instances",
			reason: "value must contain between 1 and 50 pairs, inclusive",
		}
	}

	for key, val := range m.GetInstances() {
		_ = val

		if val == nil {
			return ResourceBatchValidationError{
				field:  fmt.Sprintf("Instances[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Instances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceBatchValidationError{
					field:  fmt.Sprintf("Instances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResourceBatchValidationError is the validation error returned by
// ResourceBatch.Validate if the designated constraints aren't met.
type ResourceBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceBatchValidationError) ErrorName() string { return "ResourceBatchValidationError" }

// Error satisfies the builtin error interface
func (e ResourceBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceBatchValidationError{}

var _ResourceBatch_Name_Pattern = regexp.MustCompile("^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$")

var _ResourceBatch_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

// Validate checks the field values on Attributes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attributes) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetAttr() {
		_ = val

		if val == nil {
			return AttributesValidationError{
				field:  fmt.Sprintf("Attr[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Attr[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributesValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AttributesValidationError is the validation error returned by
// Attributes.Validate if the designated constraints aren't met.
type AttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributesValidationError) ErrorName() string { return "AttributesValidationError" }

// Error satisfies the builtin error interface
func (e AttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributesValidationError{}
