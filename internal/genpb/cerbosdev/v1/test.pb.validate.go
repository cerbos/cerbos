// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbosdev/v1/test.proto

package cerbosdevv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _test_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EngineTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EngineTestCase) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EngineTestCaseValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EngineTestCaseValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WantError

	return nil
}

// EngineTestCaseValidationError is the validation error returned by
// EngineTestCase.Validate if the designated constraints aren't met.
type EngineTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngineTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngineTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngineTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngineTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngineTestCaseValidationError) ErrorName() string { return "EngineTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e EngineTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngineTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngineTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngineTestCaseValidationError{}

// Validate checks the field values on CompileTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CompileTestCase) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MainDef

	for key, val := range m.GetInputDefs() {
		_ = val

		// no validation rules for InputDefs[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompileTestCaseValidationError{
					field:  fmt.Sprintf("InputDefs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CompileTestCaseValidationError is the validation error returned by
// CompileTestCase.Validate if the designated constraints aren't met.
type CompileTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompileTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompileTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompileTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompileTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompileTestCaseValidationError) ErrorName() string { return "CompileTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e CompileTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompileTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompileTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompileTestCaseValidationError{}

// Validate checks the field values on CodeGenTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CodeGenTestCase) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInputPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CodeGenTestCaseValidationError{
				field:  "InputPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WantError

	// no validation rules for WantRego

	// no validation rules for WantNumConditions

	return nil
}

// CodeGenTestCaseValidationError is the validation error returned by
// CodeGenTestCase.Validate if the designated constraints aren't met.
type CodeGenTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeGenTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeGenTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeGenTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeGenTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeGenTestCaseValidationError) ErrorName() string { return "CodeGenTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e CodeGenTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeGenTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeGenTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeGenTestCaseValidationError{}
