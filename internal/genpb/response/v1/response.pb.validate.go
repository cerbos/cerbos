// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: response/v1/response.proto

package responsev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _response_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CheckResourceBatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckResourceBatchResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	for key, val := range m.GetResourceInstances() {
		_ = val

		// no validation rules for ResourceInstances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceBatchResponseValidationError{
					field:  fmt.Sprintf("ResourceInstances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourceBatchResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckResourceBatchResponseValidationError is the validation error returned
// by CheckResourceBatchResponse.Validate if the designated constraints aren't met.
type CheckResourceBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponseValidationError) ErrorName() string {
	return "CheckResourceBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponseValidationError{}

// Validate checks the field values on
// CheckResourceBatchResponse_ActionEffectMap with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CheckResourceBatchResponse_ActionEffectMap) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Actions

	return nil
}

// CheckResourceBatchResponse_ActionEffectMapValidationError is the validation
// error returned by CheckResourceBatchResponse_ActionEffectMap.Validate if
// the designated constraints aren't met.
type CheckResourceBatchResponse_ActionEffectMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) ErrorName() string {
	return "CheckResourceBatchResponse_ActionEffectMapValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse_ActionEffectMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponse_ActionEffectMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponse_ActionEffectMapValidationError{}

// Validate checks the field values on CheckResourceBatchResponse_Meta with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckResourceBatchResponse_Meta) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetResourceInstances() {
		_ = val

		// no validation rules for ResourceInstances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceBatchResponse_MetaValidationError{
					field:  fmt.Sprintf("ResourceInstances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetEvaluationDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourceBatchResponse_MetaValidationError{
				field:  "EvaluationDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckResourceBatchResponse_MetaValidationError is the validation error
// returned by CheckResourceBatchResponse_Meta.Validate if the designated
// constraints aren't met.
type CheckResourceBatchResponse_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponse_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponse_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponse_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponse_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponse_MetaValidationError) ErrorName() string {
	return "CheckResourceBatchResponse_MetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponse_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponse_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponse_MetaValidationError{}

// Validate checks the field values on
// CheckResourceBatchResponse_Meta_EffectMeta with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CheckResourceBatchResponse_Meta_EffectMeta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MatchedPolicy

	// no validation rules for Error

	return nil
}

// CheckResourceBatchResponse_Meta_EffectMetaValidationError is the validation
// error returned by CheckResourceBatchResponse_Meta_EffectMeta.Validate if
// the designated constraints aren't met.
type CheckResourceBatchResponse_Meta_EffectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) ErrorName() string {
	return "CheckResourceBatchResponse_Meta_EffectMetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponse_Meta_EffectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse_Meta_EffectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponse_Meta_EffectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponse_Meta_EffectMetaValidationError{}

// Validate checks the field values on
// CheckResourceBatchResponse_Meta_ActionMeta with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CheckResourceBatchResponse_Meta_ActionMeta) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetActions() {
		_ = val

		// no validation rules for Actions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceBatchResponse_Meta_ActionMetaValidationError{
					field:  fmt.Sprintf("Actions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CheckResourceBatchResponse_Meta_ActionMetaValidationError is the validation
// error returned by CheckResourceBatchResponse_Meta_ActionMeta.Validate if
// the designated constraints aren't met.
type CheckResourceBatchResponse_Meta_ActionMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) ErrorName() string {
	return "CheckResourceBatchResponse_Meta_ActionMetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponse_Meta_ActionMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse_Meta_ActionMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponse_Meta_ActionMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponse_Meta_ActionMetaValidationError{}
