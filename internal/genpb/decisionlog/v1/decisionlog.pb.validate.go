// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: decisionlog/v1/decisionlog.proto

package decisionlogv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Decision with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Decision) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecisionValidationError{
				field:  "RequestTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestId

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecisionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecisionValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DecisionValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DecisionValidationError is the validation error returned by
// Decision.Validate if the designated constraints aren't met.
type DecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecisionValidationError) ErrorName() string { return "DecisionValidationError" }

// Error satisfies the builtin error interface
func (e DecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecisionValidationError{}

// Validate checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Source) Validate() error {
	if m == nil {
		return nil
	}

	switch m.IpAddress.(type) {

	case *Source_V4:
		// no validation rules for V4

	case *Source_V6:
		// no validation rules for V6

	}

	return nil
}

// SourceValidationError is the validation error returned by Source.Validate if
// the designated constraints aren't met.
type SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceValidationError) ErrorName() string { return "SourceValidationError" }

// Error satisfies the builtin error interface
func (e SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceValidationError{}

// Validate checks the field values on RequestPayload with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RequestPayload) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Payload.(type) {

	case *RequestPayload_CheckResourceSet:

		if v, ok := interface{}(m.GetCheckResourceSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestPayloadValidationError{
					field:  "CheckResourceSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RequestPayload_CheckResourceBatch:

		if v, ok := interface{}(m.GetCheckResourceBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestPayloadValidationError{
					field:  "CheckResourceBatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RequestPayload_AddOrUpdatePolicy:

		if v, ok := interface{}(m.GetAddOrUpdatePolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestPayloadValidationError{
					field:  "AddOrUpdatePolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestPayloadValidationError is the validation error returned by
// RequestPayload.Validate if the designated constraints aren't met.
type RequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPayloadValidationError) ErrorName() string { return "RequestPayloadValidationError" }

// Error satisfies the builtin error interface
func (e RequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPayloadValidationError{}

// Validate checks the field values on ResponsePayload with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResponsePayload) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Payload.(type) {

	case *ResponsePayload_CheckResourceSet:

		if v, ok := interface{}(m.GetCheckResourceSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsePayloadValidationError{
					field:  "CheckResourceSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResponsePayload_CheckResourceBatch:

		if v, ok := interface{}(m.GetCheckResourceBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsePayloadValidationError{
					field:  "CheckResourceBatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResponsePayload_AddOrUpdatePolicy:

		if v, ok := interface{}(m.GetAddOrUpdatePolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsePayloadValidationError{
					field:  "AddOrUpdatePolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResponsePayloadValidationError is the validation error returned by
// ResponsePayload.Validate if the designated constraints aren't met.
type ResponsePayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsePayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsePayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsePayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsePayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsePayloadValidationError) ErrorName() string { return "ResponsePayloadValidationError" }

// Error satisfies the builtin error interface
func (e ResponsePayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsePayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsePayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsePayloadValidationError{}
