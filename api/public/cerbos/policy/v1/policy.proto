// Copyright 2021-2023 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cerbos.policy.v1;

import "buf/validate/validate.proto";
import "cerbos/effect/v1/effect.proto";
import "cerbos/engine/v1/engine.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Cerbos.Api.V1.Policy";
option go_package = "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1;policyv1";
option java_package = "dev.cerbos.api.v1.policy";

message Policy {
  string api_version = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.const = "api.cerbos.dev/v1"
  ];
  bool disabled = 2;
  string description = 3;
  Metadata metadata = 4;
  oneof policy_type {
    option (buf.validate.oneof).required = true;
    ResourcePolicy resource_policy = 5;
    PrincipalPolicy principal_policy = 6;
    DerivedRoles derived_roles = 7;
    ExportVariables export_variables = 10;
  }
  map<string, string> variables = 8 [deprecated = true];
  string json_schema = 9 [json_name = "$schema"];
}

message SourceAttributes {
  map<string, google.protobuf.Value> attributes = 1;
}

message Metadata {
  string source_file = 1;
  map<string, string> annotations = 2;
  google.protobuf.UInt64Value hash = 3;
  string store_identifer = 4 [deprecated = true];
  string store_identifier = 5;
  SourceAttributes source_attributes = 6;
}

message ResourcePolicy {
  string resource = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {min_len: 1}
  ];
  string version = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {pattern: "^[[:word:]]+$"}
  ];
  repeated string import_derived_roles = 3 [(buf.validate.field).repeated = {
    unique: true,
    items {
      string {pattern: "^[[:word:]\\-\\.]+$"}
    }
  }];
  repeated ResourceRule rules = 4;
  string scope = 5 [(buf.validate.field).string.pattern = "^([[:alnum:]][[:word:]\\-]*(\\.[[:word:]\\-]*)*)*$"];
  Schemas schemas = 6;
  Variables variables = 7;
}

message ResourceRule {
  repeated string actions = 1 [
    (buf.validate.field).repeated = {
      min_items: 1,
      unique: true,
      items {
        string {min_len: 1}
      }
    },
    (buf.validate.field).required = true
  ];
  repeated string derived_roles = 2 [(buf.validate.field).repeated = {
    unique: true,
    items {
      string {pattern: "^[[:word:]\\-\\.]+$"}
    }
  }];
  repeated string roles = 3 [(buf.validate.field).repeated = {
    unique: true,
    items {
      string {min_len: 1}
    }
  }];
  Condition condition = 4;
  cerbos.effect.v1.Effect effect = 5 [
    (buf.validate.field).enum = {
      in: [
        1,
        2
      ]
    },
    (buf.validate.field).required = true
  ];
  string name = 6 [(buf.validate.field).string.pattern = "^([[:alpha:]][[:word:]\\@\\.\\-]*)*$"];
  Output output = 7;
}

message PrincipalPolicy {
  string principal = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {min_len: 1}
  ];
  string version = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[[:word:]]+$"
  ];
  repeated PrincipalRule rules = 3;
  string scope = 4 [(buf.validate.field).string.pattern = "^([[:alnum:]][[:word:]\\-]*(\\.[[:word:]\\-]*)*)*$"];
  Variables variables = 5;
}

message PrincipalRule {
  message Action {
    string action = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string = {min_len: 1}
    ];
    Condition condition = 2;
    cerbos.effect.v1.Effect effect = 3 [
      (buf.validate.field).enum = {
        in: [
          1,
          2
        ]
      },
      (buf.validate.field).required = true
    ];
    string name = 4 [(buf.validate.field).string.pattern = "^([[:alpha:]][[:word:]\\@\\.\\-]*)*$"];
    Output output = 5;
  }

  string resource = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {min_len: 1}
  ];
  repeated Action actions = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1
  ];
}

message DerivedRoles {
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      pattern: "^[[:word:]\\-\\.]+$",
      min_len: 1
    }
  ];
  repeated RoleDef definitions = 2 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).required = true
  ];
  Variables variables = 3;
}

message RoleDef {
  string name = 1 [
    (buf.validate.field).string.pattern = "^[[:word:]\\-\\.]+$",
    (buf.validate.field).required = true
  ];
  repeated string parent_roles = 2 [
    (buf.validate.field).repeated = {
      unique: true,
      min_items: 1,
      items {
        string {min_len: 1}
      }
    },
    (buf.validate.field).required = true
  ];
  Condition condition = 3;
}

message ExportVariables {
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      pattern: "^[[:word:]\\-\\.]+$",
      min_len: 1
    }
  ];
  map<string, string> definitions = 2;
}

message Variables {
  repeated string import = 1 [(buf.validate.field).repeated = {
    unique: true,
    items {
      string {pattern: "^[[:word:]\\-\\.]+$"}
    }
  }];
  map<string, string> local = 2;
}

message Condition {
  oneof condition {
    option (buf.validate.oneof).required = true;
    Match match = 1;
    string script = 2;
  }
}

message Match {
  message ExprList {
    repeated Match of = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).repeated = {min_items: 1}
    ];
  }

  oneof op {
    option (buf.validate.oneof).required = true;
    ExprList all = 1;
    ExprList any = 2;
    ExprList none = 3;
    string expr = 4;
  }
}

message Output {
  string expr = 1;
}

message Schemas {
  message IgnoreWhen {
    repeated string actions = 1 [
      (buf.validate.field).repeated = {
        unique: true,
        min_items: 1,
        items {
          string {min_len: 1}
        }
      },
      (buf.validate.field).required = true
    ];
  }

  message Schema {
    string ref = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string = {min_len: 1}
    ];
    IgnoreWhen ignore_when = 2;
  }

  Schema principal_schema = 1;
  Schema resource_schema = 2;
}

message TestFixture {
  message Principals {
    map<string, cerbos.engine.v1.Principal> principals = 1;
    string json_schema = 2 [json_name = "$schema"];
  }

  message Resources {
    map<string, cerbos.engine.v1.Resource> resources = 1;
    string json_schema = 2 [json_name = "$schema"];
  }

  message AuxData {
    map<string, cerbos.engine.v1.AuxData> aux_data = 1;
    string json_schema = 2 [json_name = "$schema"];
  }
}

message TestOptions {
  google.protobuf.Timestamp now = 1;
  bool lenient_scope_search = 2;
  map<string, google.protobuf.Value> globals = 3;
}

message TestSuite {
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];
  string description = 2;
  bool skip = 3;
  string skip_reason = 4;
  repeated TestTable tests = 5 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).required = true
  ];
  map<string, cerbos.engine.v1.Principal> principals = 6;
  map<string, cerbos.engine.v1.Resource> resources = 7;
  map<string, cerbos.engine.v1.AuxData> aux_data = 8;
  TestOptions options = 9;
  string json_schema = 10 [json_name = "$schema"];
}

message TestTable {
  message Input {
    repeated string principals = 1 [
      (buf.validate.field).repeated = {
        min_items: 1,
        unique: true,
        items: {
          string: {min_len: 1}
        }
      },
      (buf.validate.field).required = true
    ];
    repeated string resources = 2 [
      (buf.validate.field).repeated = {
        min_items: 1,
        unique: true,
        items: {
          string: {min_len: 1}
        }
      },
      (buf.validate.field).required = true
    ];
    repeated string actions = 3 [
      (buf.validate.field).repeated = {
        min_items: 1,
        unique: true,
        items: {
          string: {min_len: 1}
        }
      },
      (buf.validate.field).required = true
    ];
    string aux_data = 4;
  }

  message OutputExpectations {
    string action = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
    repeated cerbos.engine.v1.OutputEntry expected = 2 [
      (buf.validate.field).repeated.min_items = 1,
      (buf.validate.field).required = true
    ];
  }

  message Expectation {
    string principal = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
    string resource = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
    map<string, cerbos.effect.v1.Effect> actions = 3 [
      (buf.validate.field).map = {
        min_pairs: 1,
        keys: {
          string: {min_len: 1}
        },
        values: {
          enum: {
            in: [
              1,
              2
            ]
          }
        }
      },
      (buf.validate.field).required = true
    ];
    repeated OutputExpectations outputs = 4;
  }

  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];
  string description = 2;
  bool skip = 3;
  string skip_reason = 4;
  Input input = 5 [(buf.validate.field).required = true];
  repeated Expectation expected = 6 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).required = true
  ];
  TestOptions options = 7;
}

message Test {
  message TestName {
    string test_table_name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
    string principal_key = 2 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
    string resource_key = 3 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1
    ];
  }

  message OutputEntries {
    map<string, google.protobuf.Value> entries = 1;
  }

  TestName name = 1 [(buf.validate.field).required = true];
  string description = 2;
  bool skip = 3;
  string skip_reason = 4;
  cerbos.engine.v1.CheckInput input = 5 [(buf.validate.field).required = true];
  map<string, cerbos.effect.v1.Effect> expected = 6 [
    (buf.validate.field).map = {
      min_pairs: 1,
      keys: {
        string: {min_len: 1}
      },
      values: {
        enum: {
          in: [
            1,
            2
          ]
        }
      }
    },
    (buf.validate.field).required = true
  ];
  TestOptions options = 7;
  map<string, OutputEntries> expected_outputs = 8;
}

message TestResults {
  enum Result {
    RESULT_UNSPECIFIED = 0;
    RESULT_SKIPPED = 1;
    RESULT_PASSED = 2;
    RESULT_FAILED = 3;
    RESULT_ERRORED = 4;
  }

  message Tally {
    Result result = 1;
    uint32 count = 2;
  }

  message Summary {
    Result overall_result = 1;
    uint32 tests_count = 2;
    repeated Tally result_counts = 3;
  }

  message Suite {
    string file = 1;
    string name = 2;
    repeated Principal principals = 3 [deprecated = true];
    Summary summary = 4;
    string error = 5;
    repeated TestCase test_cases = 6;
    string description = 7;
  }

  message TestCase {
    string name = 1;
    repeated Principal principals = 2;
  }

  message Principal {
    string name = 1;
    repeated Resource resources = 2;
  }

  message Resource {
    string name = 1;
    repeated Action actions = 2;
  }

  message Action {
    string name = 1;
    Details details = 2;
  }

  message Details {
    Result result = 1;
    oneof outcome {
      Failure failure = 2;
      string error = 3;
      Success success = 5;
    }
    repeated cerbos.engine.v1.Trace engine_trace = 4;
  }

  message OutputFailure {
    message MismatchedValue {
      google.protobuf.Value expected = 1;
      google.protobuf.Value actual = 2;
    }

    message MissingValue {
      google.protobuf.Value expected = 1;
    }

    string src = 1;
    oneof outcome {
      MismatchedValue mismatched = 2;
      MissingValue missing = 3;
    }
  }

  message Failure {
    cerbos.effect.v1.Effect expected = 1;
    cerbos.effect.v1.Effect actual = 2;
    repeated OutputFailure outputs = 3;
  }

  message Success {
    cerbos.effect.v1.Effect effect = 1;
    repeated cerbos.engine.v1.OutputEntry outputs = 2;
  }

  repeated Suite suites = 1;
  Summary summary = 2;
}
