// Copyright 2021-2022 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cerbos.policy.v1;

import "cerbos/effect/v1/effect.proto";
import "cerbos/engine/v1/engine.proto";
import "validate/validate.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1;policyv1";
option java_package = "dev.cerbos.api.v1.policy";
option csharp_namespace = "Cerbos.Api.V1.Policy";

message Policy {
    string api_version = 1 [(validate.rules).string.const = "api.cerbos.dev/v1"];
    bool disabled = 2;
    string description = 3;
    Metadata metadata = 4;
    oneof policy_type {
        option (validate.required) = true;
        ResourcePolicy resource_policy = 5;
        PrincipalPolicy principal_policy = 6;
        DerivedRoles derived_roles = 7;
    }
    map<string, string> variables = 8;
}

message Metadata {
    string source_file = 1;
    map<string, string> annotations = 2;
    google.protobuf.UInt64Value hash = 3;
    string store_identifer = 4;
}

message ResourcePolicy {
    string resource = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$", min_len: 1}];
    string version = 2 [(validate.rules).string.pattern = "^[[:word:]]+$"];
    repeated string import_derived_roles = 3 [(validate.rules).repeated = {unique: true, items {string {pattern: "^[[:word:]\\-\\.]+$"}}}];
    repeated ResourceRule rules = 4;
    string scope = 5 [(validate.rules).string.pattern = "^([[:alpha:]][[:word:]\\-]+(\\.[[:alpha:]][[:word:]\\-]*)*)*$"];
    Schemas schemas = 6;
}

message ResourceRule {
    repeated string actions = 1 [(validate.rules).repeated = {min_items: 1, unique: true, items {string {min_len: 1}}}];
    repeated string derived_roles = 2 [(validate.rules).repeated = {unique: true, items {string {pattern: "^[[:word:]\\-\\.]+$"}}}];
    repeated string roles = 3 [(validate.rules).repeated = {unique: true, items {string {pattern: "^[[:word:]\\-\\.]+$"}}}];
    Condition condition = 4;
    cerbos.effect.v1.Effect effect = 5 [(validate.rules).enum = {in: [1, 2]}];
    string name = 6 [(validate.rules).string.pattern = "^([[:alpha:]][[:word:]\\@\\.\\-]*)*$"];
}

message PrincipalPolicy {
    string principal = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$", min_len: 1}];
    string version = 2 [(validate.rules).string.pattern = "^[[:word:]]+$"];
    repeated PrincipalRule rules = 3;
    string scope = 4 [(validate.rules).string.pattern = "^([[:alpha:]][[:word:]\\-]+(\\.[[:alpha:]][[:word:]\\-]*)*)*$"];
}

message PrincipalRule {
    message Action {
        string action = 1 [(validate.rules).string.min_len = 1];
        Condition condition = 2;
        cerbos.effect.v1.Effect effect = 3 [(validate.rules).enum = {in: [1, 2]}];
        string name = 4 [(validate.rules).string.pattern = "^([[:alpha:]][[:word:]\\@\\.\\-]*)*$"]; 
    }

    string resource = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$", min_len: 1}];
    repeated Action actions = 2 [(validate.rules).repeated.min_items = 1];
}

message DerivedRoles {
    string name = 1 [(validate.rules).string = {pattern: "^[[:word:]\\-\\.]+$", min_len: 1}];
    repeated RoleDef definitions = 2 [(validate.rules).repeated.min_items = 1];
}

message RoleDef {
    string name = 1 [(validate.rules).string.pattern = "^[[:word:]\\-\\.]+$"];
    repeated string parent_roles = 2 [(validate.rules).repeated = {unique: true, min_items: 1, items {string {pattern: "^[[:word:]\\-\\.]+$"}}}];
    Condition condition = 3;
}

message Condition {
    oneof condition {
        option (validate.required) = true;
        Match match = 1;
        string script = 2;
    }
}

message Match {
    message ExprList {
        repeated Match of = 1 [(validate.rules).repeated = {min_items: 1}];
    }

    oneof op {
        option (validate.required) = true;
        ExprList all = 1;
        ExprList any = 2;
        ExprList none = 3;
        string expr = 4;
    }
}

message Schemas {
    message IgnoreWhen {
        repeated string actions = 1 [(validate.rules).repeated = {unique: true, min_items: 1, items {string {min_len: 1}}}];
    }

    message Schema {
        string ref = 1 [(validate.rules).string = {min_len: 1}];
        IgnoreWhen ignore_when = 2;
    }

    Schema principal_schema = 1;
    Schema resource_schema = 2;
}

message TestFixture {
    message Principals {
        map<string, cerbos.engine.v1.Principal> principals = 1;
    }
    message Resources {
        map<string, cerbos.engine.v1.Resource> resources = 1;
    }
    message AuxData {
        map<string, cerbos.engine.v1.AuxData> aux_data = 1;
    }
}

message TestSuite {
    string name = 1 [(validate.rules).string.min_len = 1];
    string description = 2;
    bool skip = 3;
    string skip_reason = 4;
    repeated TestTable tests = 5 [(validate.rules).repeated.min_items = 1];
    map<string, cerbos.engine.v1.Principal> principals = 6;
    map<string, cerbos.engine.v1.Resource> resources = 7;
    map<string, cerbos.engine.v1.AuxData> aux_data = 8;
}

message TestTable {
    message CheckInput {
        string request_id = 1;
        string resource = 2 [(validate.rules).string.min_len = 1];
        repeated string actions = 3 [(validate.rules).repeated = {unique: true, items: {string: {min_len: 1}}}];
        string aux_data = 4;
    }

    message ExpectedItem {
        string principal = 1 [(validate.rules).string.min_len = 1];
        map<string, cerbos.effect.v1.Effect> actions = 2[(validate.rules).map = {min_pairs: 1}];
    }

    string name = 1 [(validate.rules).string.min_len = 1];
    string description = 2;
    bool skip = 3;
    string skip_reason = 4;
    CheckInput input = 5 [(validate.rules).message.required = true];
    repeated ExpectedItem expected = 6 [(validate.rules).repeated.min_items = 1];
}

message Test {
    message TestName {
        string test_table_name = 1 [(validate.rules).string.min_len = 1];
        string principal_key = 2 [(validate.rules).string.min_len = 1];
    }

    TestName name = 1 [(validate.rules).message.required = true];
    string description = 2;
    bool skip = 3;
    string skip_reason = 4;
    cerbos.engine.v1.CheckInput input = 5 [(validate.rules).message.required = true];
    map<string, cerbos.effect.v1.Effect> expected = 6;
}

