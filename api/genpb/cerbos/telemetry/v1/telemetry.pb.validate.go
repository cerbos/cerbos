// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/telemetry/v1/telemetry.proto

package telemetryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Ping with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingMultiError, or nil if none found.
func (m *Ping) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingValidationError{
				field:  "Features",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingMultiError(errors)
	}

	return nil
}

// PingMultiError is an error wrapping multiple validation errors returned by
// Ping.ValidateAll() if the designated constraints aren't met.
type PingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingMultiError) AllErrors() []error { return m }

// PingValidationError is the validation error returned by Ping.Validate if the
// designated constraints aren't met.
type PingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingValidationError) ErrorName() string { return "PingValidationError" }

// Error satisfies the builtin error interface
func (e PingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingValidationError{}

// Validate checks the field values on Ping_Cerbos with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ping_Cerbos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Cerbos with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Ping_CerbosMultiError, or
// nil if none found.
func (m *Ping_Cerbos) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Cerbos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Commit

	// no validation rules for BuildDate

	// no validation rules for ModuleVersion

	// no validation rules for ModuleChecksum

	if len(errors) > 0 {
		return Ping_CerbosMultiError(errors)
	}

	return nil
}

// Ping_CerbosMultiError is an error wrapping multiple validation errors
// returned by Ping_Cerbos.ValidateAll() if the designated constraints aren't met.
type Ping_CerbosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_CerbosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_CerbosMultiError) AllErrors() []error { return m }

// Ping_CerbosValidationError is the validation error returned by
// Ping_Cerbos.Validate if the designated constraints aren't met.
type Ping_CerbosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_CerbosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_CerbosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_CerbosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_CerbosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_CerbosValidationError) ErrorName() string { return "Ping_CerbosValidationError" }

// Error satisfies the builtin error interface
func (e Ping_CerbosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Cerbos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_CerbosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_CerbosValidationError{}

// Validate checks the field values on Ping_Source with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ping_Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Source with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Ping_SourceMultiError, or
// nil if none found.
func (m *Ping_Source) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCerbos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_SourceValidationError{
					field:  "Cerbos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_SourceValidationError{
					field:  "Cerbos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCerbos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_SourceValidationError{
				field:  "Cerbos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Os

	// no validation rules for Arch

	// no validation rules for NumCpus

	if len(errors) > 0 {
		return Ping_SourceMultiError(errors)
	}

	return nil
}

// Ping_SourceMultiError is an error wrapping multiple validation errors
// returned by Ping_Source.ValidateAll() if the designated constraints aren't met.
type Ping_SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_SourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_SourceMultiError) AllErrors() []error { return m }

// Ping_SourceValidationError is the validation error returned by
// Ping_Source.Validate if the designated constraints aren't met.
type Ping_SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_SourceValidationError) ErrorName() string { return "Ping_SourceValidationError" }

// Error satisfies the builtin error interface
func (e Ping_SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Source.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_SourceValidationError{}

// Validate checks the field values on Ping_Features with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ping_Features) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Ping_FeaturesMultiError, or
// nil if none found.
func (m *Ping_Features) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAudit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Audit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Audit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_FeaturesValidationError{
				field:  "Audit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_FeaturesValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdminApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "AdminApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "AdminApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_FeaturesValidationError{
				field:  "AdminApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_FeaturesValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_FeaturesValidationError{
				field:  "Storage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Ping_FeaturesMultiError(errors)
	}

	return nil
}

// Ping_FeaturesMultiError is an error wrapping multiple validation errors
// returned by Ping_Features.ValidateAll() if the designated constraints
// aren't met.
type Ping_FeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_FeaturesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_FeaturesMultiError) AllErrors() []error { return m }

// Ping_FeaturesValidationError is the validation error returned by
// Ping_Features.Validate if the designated constraints aren't met.
type Ping_FeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_FeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_FeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_FeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_FeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_FeaturesValidationError) ErrorName() string { return "Ping_FeaturesValidationError" }

// Error satisfies the builtin error interface
func (e Ping_FeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_FeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_FeaturesValidationError{}

// Validate checks the field values on Ping_Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ping_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Stats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Ping_StatsMultiError, or
// nil if none found.
func (m *Ping_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_StatsValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_StatsValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_StatsValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_StatsValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_StatsValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_StatsValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Ping_StatsMultiError(errors)
	}

	return nil
}

// Ping_StatsMultiError is an error wrapping multiple validation errors
// returned by Ping_Stats.ValidateAll() if the designated constraints aren't met.
type Ping_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_StatsMultiError) AllErrors() []error { return m }

// Ping_StatsValidationError is the validation error returned by
// Ping_Stats.Validate if the designated constraints aren't met.
type Ping_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_StatsValidationError) ErrorName() string { return "Ping_StatsValidationError" }

// Error satisfies the builtin error interface
func (e Ping_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_StatsValidationError{}

// Validate checks the field values on Ping_Features_Audit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Audit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Audit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_AuditMultiError, or nil if none found.
func (m *Ping_Features_Audit) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Audit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Backend

	if len(errors) > 0 {
		return Ping_Features_AuditMultiError(errors)
	}

	return nil
}

// Ping_Features_AuditMultiError is an error wrapping multiple validation
// errors returned by Ping_Features_Audit.ValidateAll() if the designated
// constraints aren't met.
type Ping_Features_AuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_AuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_AuditMultiError) AllErrors() []error { return m }

// Ping_Features_AuditValidationError is the validation error returned by
// Ping_Features_Audit.Validate if the designated constraints aren't met.
type Ping_Features_AuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_AuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_AuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_AuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_AuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_AuditValidationError) ErrorName() string {
	return "Ping_Features_AuditValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_AuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Audit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_AuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_AuditValidationError{}

// Validate checks the field values on Ping_Features_Schema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Schema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_SchemaMultiError, or nil if none found.
func (m *Ping_Features_Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enforcement

	if len(errors) > 0 {
		return Ping_Features_SchemaMultiError(errors)
	}

	return nil
}

// Ping_Features_SchemaMultiError is an error wrapping multiple validation
// errors returned by Ping_Features_Schema.ValidateAll() if the designated
// constraints aren't met.
type Ping_Features_SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_SchemaMultiError) AllErrors() []error { return m }

// Ping_Features_SchemaValidationError is the validation error returned by
// Ping_Features_Schema.Validate if the designated constraints aren't met.
type Ping_Features_SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_SchemaValidationError) ErrorName() string {
	return "Ping_Features_SchemaValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Schema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_SchemaValidationError{}

// Validate checks the field values on Ping_Features_AdminApi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_AdminApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_AdminApi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_AdminApiMultiError, or nil if none found.
func (m *Ping_Features_AdminApi) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_AdminApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if len(errors) > 0 {
		return Ping_Features_AdminApiMultiError(errors)
	}

	return nil
}

// Ping_Features_AdminApiMultiError is an error wrapping multiple validation
// errors returned by Ping_Features_AdminApi.ValidateAll() if the designated
// constraints aren't met.
type Ping_Features_AdminApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_AdminApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_AdminApiMultiError) AllErrors() []error { return m }

// Ping_Features_AdminApiValidationError is the validation error returned by
// Ping_Features_AdminApi.Validate if the designated constraints aren't met.
type Ping_Features_AdminApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_AdminApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_AdminApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_AdminApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_AdminApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_AdminApiValidationError) ErrorName() string {
	return "Ping_Features_AdminApiValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_AdminApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_AdminApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_AdminApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_AdminApiValidationError{}

// Validate checks the field values on Ping_Features_Storage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Storage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Storage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_StorageMultiError, or nil if none found.
func (m *Ping_Features_Storage) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Storage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Driver

	switch m.Store.(type) {

	case *Ping_Features_Storage_Disk_:

		if all {
			switch v := interface{}(m.GetDisk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Disk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Disk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Ping_Features_StorageValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ping_Features_Storage_Git_:

		if all {
			switch v := interface{}(m.GetGit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Git",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Git",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Ping_Features_StorageValidationError{
					field:  "Git",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ping_Features_Storage_Blob_:

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Ping_Features_StorageValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Ping_Features_StorageValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Ping_Features_StorageMultiError(errors)
	}

	return nil
}

// Ping_Features_StorageMultiError is an error wrapping multiple validation
// errors returned by Ping_Features_Storage.ValidateAll() if the designated
// constraints aren't met.
type Ping_Features_StorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_StorageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_StorageMultiError) AllErrors() []error { return m }

// Ping_Features_StorageValidationError is the validation error returned by
// Ping_Features_Storage.Validate if the designated constraints aren't met.
type Ping_Features_StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_StorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_StorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_StorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_StorageValidationError) ErrorName() string {
	return "Ping_Features_StorageValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Storage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_StorageValidationError{}

// Validate checks the field values on Ping_Features_Storage_Disk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Storage_Disk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Storage_Disk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_Storage_DiskMultiError, or nil if none found.
func (m *Ping_Features_Storage_Disk) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Storage_Disk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Watch

	if len(errors) > 0 {
		return Ping_Features_Storage_DiskMultiError(errors)
	}

	return nil
}

// Ping_Features_Storage_DiskMultiError is an error wrapping multiple
// validation errors returned by Ping_Features_Storage_Disk.ValidateAll() if
// the designated constraints aren't met.
type Ping_Features_Storage_DiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_Storage_DiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_Storage_DiskMultiError) AllErrors() []error { return m }

// Ping_Features_Storage_DiskValidationError is the validation error returned
// by Ping_Features_Storage_Disk.Validate if the designated constraints aren't met.
type Ping_Features_Storage_DiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_Storage_DiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_Storage_DiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_Storage_DiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_Storage_DiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_Storage_DiskValidationError) ErrorName() string {
	return "Ping_Features_Storage_DiskValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_Storage_DiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Storage_Disk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_Storage_DiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_Storage_DiskValidationError{}

// Validate checks the field values on Ping_Features_Storage_Git with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Storage_Git) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Storage_Git with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_Storage_GitMultiError, or nil if none found.
func (m *Ping_Features_Storage_Git) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Storage_Git) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Auth

	if all {
		switch v := interface{}(m.GetPollInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_Features_Storage_GitValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_Features_Storage_GitValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_Features_Storage_GitValidationError{
				field:  "PollInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Ping_Features_Storage_GitMultiError(errors)
	}

	return nil
}

// Ping_Features_Storage_GitMultiError is an error wrapping multiple validation
// errors returned by Ping_Features_Storage_Git.ValidateAll() if the
// designated constraints aren't met.
type Ping_Features_Storage_GitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_Storage_GitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_Storage_GitMultiError) AllErrors() []error { return m }

// Ping_Features_Storage_GitValidationError is the validation error returned by
// Ping_Features_Storage_Git.Validate if the designated constraints aren't met.
type Ping_Features_Storage_GitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_Storage_GitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_Storage_GitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_Storage_GitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_Storage_GitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_Storage_GitValidationError) ErrorName() string {
	return "Ping_Features_Storage_GitValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_Storage_GitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Storage_Git.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_Storage_GitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_Storage_GitValidationError{}

// Validate checks the field values on Ping_Features_Storage_Blob with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Ping_Features_Storage_Blob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Features_Storage_Blob with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Features_Storage_BlobMultiError, or nil if none found.
func (m *Ping_Features_Storage_Blob) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Features_Storage_Blob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetPollInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Ping_Features_Storage_BlobValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Ping_Features_Storage_BlobValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Ping_Features_Storage_BlobValidationError{
				field:  "PollInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Ping_Features_Storage_BlobMultiError(errors)
	}

	return nil
}

// Ping_Features_Storage_BlobMultiError is an error wrapping multiple
// validation errors returned by Ping_Features_Storage_Blob.ValidateAll() if
// the designated constraints aren't met.
type Ping_Features_Storage_BlobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Features_Storage_BlobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Features_Storage_BlobMultiError) AllErrors() []error { return m }

// Ping_Features_Storage_BlobValidationError is the validation error returned
// by Ping_Features_Storage_Blob.Validate if the designated constraints aren't met.
type Ping_Features_Storage_BlobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Features_Storage_BlobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Features_Storage_BlobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Features_Storage_BlobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Features_Storage_BlobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Features_Storage_BlobValidationError) ErrorName() string {
	return "Ping_Features_Storage_BlobValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Features_Storage_BlobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Features_Storage_Blob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Features_Storage_BlobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Features_Storage_BlobValidationError{}

// Validate checks the field values on Ping_Stats_Policy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Ping_Stats_Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Stats_Policy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Stats_PolicyMultiError, or nil if none found.
func (m *Ping_Stats_Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Stats_Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for AvgRuleCount

	// no validation rules for AvgConditionCount

	if len(errors) > 0 {
		return Ping_Stats_PolicyMultiError(errors)
	}

	return nil
}

// Ping_Stats_PolicyMultiError is an error wrapping multiple validation errors
// returned by Ping_Stats_Policy.ValidateAll() if the designated constraints
// aren't met.
type Ping_Stats_PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Stats_PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Stats_PolicyMultiError) AllErrors() []error { return m }

// Ping_Stats_PolicyValidationError is the validation error returned by
// Ping_Stats_Policy.Validate if the designated constraints aren't met.
type Ping_Stats_PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Stats_PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Stats_PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Stats_PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Stats_PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Stats_PolicyValidationError) ErrorName() string {
	return "Ping_Stats_PolicyValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Stats_PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Stats_Policy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Stats_PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Stats_PolicyValidationError{}

// Validate checks the field values on Ping_Stats_Schema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Ping_Stats_Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ping_Stats_Schema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Ping_Stats_SchemaMultiError, or nil if none found.
func (m *Ping_Stats_Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Ping_Stats_Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return Ping_Stats_SchemaMultiError(errors)
	}

	return nil
}

// Ping_Stats_SchemaMultiError is an error wrapping multiple validation errors
// returned by Ping_Stats_Schema.ValidateAll() if the designated constraints
// aren't met.
type Ping_Stats_SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Ping_Stats_SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Ping_Stats_SchemaMultiError) AllErrors() []error { return m }

// Ping_Stats_SchemaValidationError is the validation error returned by
// Ping_Stats_Schema.Validate if the designated constraints aren't met.
type Ping_Stats_SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Ping_Stats_SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Ping_Stats_SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Ping_Stats_SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Ping_Stats_SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Ping_Stats_SchemaValidationError) ErrorName() string {
	return "Ping_Stats_SchemaValidationError"
}

// Error satisfies the builtin error interface
func (e Ping_Stats_SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing_Stats_Schema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Ping_Stats_SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Ping_Stats_SchemaValidationError{}
