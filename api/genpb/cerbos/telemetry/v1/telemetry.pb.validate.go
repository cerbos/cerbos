// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/telemetry/v1/telemetry.proto

package telemetryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServerLaunch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerLaunchMultiError, or
// nil if none found.
func (m *ServerLaunch) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunchValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunchValidationError{
				field:  "Features",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunchValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunchValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerLaunchMultiError(errors)
	}

	return nil
}

// ServerLaunchMultiError is an error wrapping multiple validation errors
// returned by ServerLaunch.ValidateAll() if the designated constraints aren't met.
type ServerLaunchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunchMultiError) AllErrors() []error { return m }

// ServerLaunchValidationError is the validation error returned by
// ServerLaunch.Validate if the designated constraints aren't met.
type ServerLaunchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunchValidationError) ErrorName() string { return "ServerLaunchValidationError" }

// Error satisfies the builtin error interface
func (e ServerLaunchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunchValidationError{}

// Validate checks the field values on ServerStop with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerStop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerStop with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerStopMultiError, or
// nil if none found.
func (m *ServerStop) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerStop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUptime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerStopValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerStopValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerStopValidationError{
				field:  "Uptime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestsTotal

	if len(errors) > 0 {
		return ServerStopMultiError(errors)
	}

	return nil
}

// ServerStopMultiError is an error wrapping multiple validation errors
// returned by ServerStop.ValidateAll() if the designated constraints aren't met.
type ServerStopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerStopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerStopMultiError) AllErrors() []error { return m }

// ServerStopValidationError is the validation error returned by
// ServerStop.Validate if the designated constraints aren't met.
type ServerStopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerStopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerStopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerStopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerStopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerStopValidationError) ErrorName() string { return "ServerStopValidationError" }

// Error satisfies the builtin error interface
func (e ServerStopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerStop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerStopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerStopValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Data.(type) {

	case *Event_ApiActivity_:

		if all {
			switch v := interface{}(m.GetApiActivity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ApiActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ApiActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiActivity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ApiActivity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on ServerLaunch_Cerbos with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Cerbos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Cerbos with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_CerbosMultiError, or nil if none found.
func (m *ServerLaunch_Cerbos) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Cerbos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Commit

	// no validation rules for BuildDate

	// no validation rules for ModuleVersion

	// no validation rules for ModuleChecksum

	if len(errors) > 0 {
		return ServerLaunch_CerbosMultiError(errors)
	}

	return nil
}

// ServerLaunch_CerbosMultiError is an error wrapping multiple validation
// errors returned by ServerLaunch_Cerbos.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_CerbosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_CerbosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_CerbosMultiError) AllErrors() []error { return m }

// ServerLaunch_CerbosValidationError is the validation error returned by
// ServerLaunch_Cerbos.Validate if the designated constraints aren't met.
type ServerLaunch_CerbosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_CerbosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_CerbosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_CerbosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_CerbosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_CerbosValidationError) ErrorName() string {
	return "ServerLaunch_CerbosValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_CerbosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Cerbos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_CerbosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_CerbosValidationError{}

// Validate checks the field values on ServerLaunch_Source with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Source with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_SourceMultiError, or nil if none found.
func (m *ServerLaunch_Source) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCerbos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_SourceValidationError{
					field:  "Cerbos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_SourceValidationError{
					field:  "Cerbos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCerbos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_SourceValidationError{
				field:  "Cerbos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Os

	// no validation rules for Arch

	// no validation rules for NumCpus

	if len(errors) > 0 {
		return ServerLaunch_SourceMultiError(errors)
	}

	return nil
}

// ServerLaunch_SourceMultiError is an error wrapping multiple validation
// errors returned by ServerLaunch_Source.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_SourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_SourceMultiError) AllErrors() []error { return m }

// ServerLaunch_SourceValidationError is the validation error returned by
// ServerLaunch_Source.Validate if the designated constraints aren't met.
type ServerLaunch_SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_SourceValidationError) ErrorName() string {
	return "ServerLaunch_SourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Source.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_SourceValidationError{}

// Validate checks the field values on ServerLaunch_Features with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Features) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_FeaturesMultiError, or nil if none found.
func (m *ServerLaunch_Features) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAudit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Audit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Audit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_FeaturesValidationError{
				field:  "Audit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_FeaturesValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdminApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "AdminApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "AdminApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_FeaturesValidationError{
				field:  "AdminApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_FeaturesValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_FeaturesValidationError{
				field:  "Storage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerLaunch_FeaturesMultiError(errors)
	}

	return nil
}

// ServerLaunch_FeaturesMultiError is an error wrapping multiple validation
// errors returned by ServerLaunch_Features.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_FeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_FeaturesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_FeaturesMultiError) AllErrors() []error { return m }

// ServerLaunch_FeaturesValidationError is the validation error returned by
// ServerLaunch_Features.Validate if the designated constraints aren't met.
type ServerLaunch_FeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_FeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_FeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_FeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_FeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_FeaturesValidationError) ErrorName() string {
	return "ServerLaunch_FeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_FeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_FeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_FeaturesValidationError{}

// Validate checks the field values on ServerLaunch_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Stats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_StatsMultiError, or nil if none found.
func (m *ServerLaunch_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_StatsValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_StatsValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_StatsValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_StatsValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_StatsValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_StatsValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerLaunch_StatsMultiError(errors)
	}

	return nil
}

// ServerLaunch_StatsMultiError is an error wrapping multiple validation errors
// returned by ServerLaunch_Stats.ValidateAll() if the designated constraints
// aren't met.
type ServerLaunch_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_StatsMultiError) AllErrors() []error { return m }

// ServerLaunch_StatsValidationError is the validation error returned by
// ServerLaunch_Stats.Validate if the designated constraints aren't met.
type ServerLaunch_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_StatsValidationError) ErrorName() string {
	return "ServerLaunch_StatsValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_StatsValidationError{}

// Validate checks the field values on ServerLaunch_Features_Audit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Features_Audit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Audit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_AuditMultiError, or nil if none found.
func (m *ServerLaunch_Features_Audit) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Audit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Backend

	if len(errors) > 0 {
		return ServerLaunch_Features_AuditMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_AuditMultiError is an error wrapping multiple
// validation errors returned by ServerLaunch_Features_Audit.ValidateAll() if
// the designated constraints aren't met.
type ServerLaunch_Features_AuditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_AuditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_AuditMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_AuditValidationError is the validation error returned
// by ServerLaunch_Features_Audit.Validate if the designated constraints
// aren't met.
type ServerLaunch_Features_AuditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_AuditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_AuditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_AuditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_AuditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_AuditValidationError) ErrorName() string {
	return "ServerLaunch_Features_AuditValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_AuditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Audit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_AuditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_AuditValidationError{}

// Validate checks the field values on ServerLaunch_Features_Schema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Features_Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Schema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_SchemaMultiError, or nil if none found.
func (m *ServerLaunch_Features_Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enforcement

	if len(errors) > 0 {
		return ServerLaunch_Features_SchemaMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_SchemaMultiError is an error wrapping multiple
// validation errors returned by ServerLaunch_Features_Schema.ValidateAll() if
// the designated constraints aren't met.
type ServerLaunch_Features_SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_SchemaMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_SchemaValidationError is the validation error returned
// by ServerLaunch_Features_Schema.Validate if the designated constraints
// aren't met.
type ServerLaunch_Features_SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_SchemaValidationError) ErrorName() string {
	return "ServerLaunch_Features_SchemaValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Schema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_SchemaValidationError{}

// Validate checks the field values on ServerLaunch_Features_AdminApi with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Features_AdminApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_AdminApi with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_AdminApiMultiError, or nil if none found.
func (m *ServerLaunch_Features_AdminApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_AdminApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ServerLaunch_Features_AdminApiMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_AdminApiMultiError is an error wrapping multiple
// validation errors returned by ServerLaunch_Features_AdminApi.ValidateAll()
// if the designated constraints aren't met.
type ServerLaunch_Features_AdminApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_AdminApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_AdminApiMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_AdminApiValidationError is the validation error
// returned by ServerLaunch_Features_AdminApi.Validate if the designated
// constraints aren't met.
type ServerLaunch_Features_AdminApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_AdminApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_AdminApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_AdminApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_AdminApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_AdminApiValidationError) ErrorName() string {
	return "ServerLaunch_Features_AdminApiValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_AdminApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_AdminApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_AdminApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_AdminApiValidationError{}

// Validate checks the field values on ServerLaunch_Features_Storage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Features_Storage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Storage with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_StorageMultiError, or nil if none found.
func (m *ServerLaunch_Features_Storage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Storage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Driver

	switch m.Store.(type) {

	case *ServerLaunch_Features_Storage_Disk_:

		if all {
			switch v := interface{}(m.GetDisk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Disk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Disk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerLaunch_Features_StorageValidationError{
					field:  "Disk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerLaunch_Features_Storage_Git_:

		if all {
			switch v := interface{}(m.GetGit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Git",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Git",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerLaunch_Features_StorageValidationError{
					field:  "Git",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerLaunch_Features_Storage_Blob_:

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerLaunch_Features_StorageValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerLaunch_Features_StorageValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerLaunch_Features_StorageMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_StorageMultiError is an error wrapping multiple
// validation errors returned by ServerLaunch_Features_Storage.ValidateAll()
// if the designated constraints aren't met.
type ServerLaunch_Features_StorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_StorageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_StorageMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_StorageValidationError is the validation error
// returned by ServerLaunch_Features_Storage.Validate if the designated
// constraints aren't met.
type ServerLaunch_Features_StorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_StorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_StorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_StorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_StorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_StorageValidationError) ErrorName() string {
	return "ServerLaunch_Features_StorageValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_StorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Storage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_StorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_StorageValidationError{}

// Validate checks the field values on ServerLaunch_Features_Storage_Disk with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerLaunch_Features_Storage_Disk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Storage_Disk
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_Storage_DiskMultiError, or nil if none found.
func (m *ServerLaunch_Features_Storage_Disk) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Storage_Disk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Watch

	if len(errors) > 0 {
		return ServerLaunch_Features_Storage_DiskMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_Storage_DiskMultiError is an error wrapping multiple
// validation errors returned by
// ServerLaunch_Features_Storage_Disk.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_DiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_Storage_DiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_Storage_DiskMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_Storage_DiskValidationError is the validation error
// returned by ServerLaunch_Features_Storage_Disk.Validate if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_DiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_Storage_DiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_Storage_DiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_Storage_DiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_Storage_DiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_Storage_DiskValidationError) ErrorName() string {
	return "ServerLaunch_Features_Storage_DiskValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_Storage_DiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Storage_Disk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_Storage_DiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_Storage_DiskValidationError{}

// Validate checks the field values on ServerLaunch_Features_Storage_Git with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerLaunch_Features_Storage_Git) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Storage_Git
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_Storage_GitMultiError, or nil if none found.
func (m *ServerLaunch_Features_Storage_Git) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Storage_Git) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Auth

	if all {
		switch v := interface{}(m.GetPollInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_Features_Storage_GitValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_Features_Storage_GitValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_Features_Storage_GitValidationError{
				field:  "PollInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerLaunch_Features_Storage_GitMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_Storage_GitMultiError is an error wrapping multiple
// validation errors returned by
// ServerLaunch_Features_Storage_Git.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_GitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_Storage_GitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_Storage_GitMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_Storage_GitValidationError is the validation error
// returned by ServerLaunch_Features_Storage_Git.Validate if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_GitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_Storage_GitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_Storage_GitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_Storage_GitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_Storage_GitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_Storage_GitValidationError) ErrorName() string {
	return "ServerLaunch_Features_Storage_GitValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_Storage_GitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Storage_Git.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_Storage_GitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_Storage_GitValidationError{}

// Validate checks the field values on ServerLaunch_Features_Storage_Blob with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerLaunch_Features_Storage_Blob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Features_Storage_Blob
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerLaunch_Features_Storage_BlobMultiError, or nil if none found.
func (m *ServerLaunch_Features_Storage_Blob) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Features_Storage_Blob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetPollInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerLaunch_Features_Storage_BlobValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerLaunch_Features_Storage_BlobValidationError{
					field:  "PollInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerLaunch_Features_Storage_BlobValidationError{
				field:  "PollInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerLaunch_Features_Storage_BlobMultiError(errors)
	}

	return nil
}

// ServerLaunch_Features_Storage_BlobMultiError is an error wrapping multiple
// validation errors returned by
// ServerLaunch_Features_Storage_Blob.ValidateAll() if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_BlobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Features_Storage_BlobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Features_Storage_BlobMultiError) AllErrors() []error { return m }

// ServerLaunch_Features_Storage_BlobValidationError is the validation error
// returned by ServerLaunch_Features_Storage_Blob.Validate if the designated
// constraints aren't met.
type ServerLaunch_Features_Storage_BlobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Features_Storage_BlobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Features_Storage_BlobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Features_Storage_BlobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Features_Storage_BlobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Features_Storage_BlobValidationError) ErrorName() string {
	return "ServerLaunch_Features_Storage_BlobValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Features_Storage_BlobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Features_Storage_Blob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Features_Storage_BlobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Features_Storage_BlobValidationError{}

// Validate checks the field values on ServerLaunch_Stats_Policy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Stats_Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Stats_Policy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_Stats_PolicyMultiError, or nil if none found.
func (m *ServerLaunch_Stats_Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Stats_Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for AvgRuleCount

	// no validation rules for AvgConditionCount

	if len(errors) > 0 {
		return ServerLaunch_Stats_PolicyMultiError(errors)
	}

	return nil
}

// ServerLaunch_Stats_PolicyMultiError is an error wrapping multiple validation
// errors returned by ServerLaunch_Stats_Policy.ValidateAll() if the
// designated constraints aren't met.
type ServerLaunch_Stats_PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Stats_PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Stats_PolicyMultiError) AllErrors() []error { return m }

// ServerLaunch_Stats_PolicyValidationError is the validation error returned by
// ServerLaunch_Stats_Policy.Validate if the designated constraints aren't met.
type ServerLaunch_Stats_PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Stats_PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Stats_PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Stats_PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Stats_PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Stats_PolicyValidationError) ErrorName() string {
	return "ServerLaunch_Stats_PolicyValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Stats_PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Stats_Policy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Stats_PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Stats_PolicyValidationError{}

// Validate checks the field values on ServerLaunch_Stats_Schema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLaunch_Stats_Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLaunch_Stats_Schema with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLaunch_Stats_SchemaMultiError, or nil if none found.
func (m *ServerLaunch_Stats_Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLaunch_Stats_Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return ServerLaunch_Stats_SchemaMultiError(errors)
	}

	return nil
}

// ServerLaunch_Stats_SchemaMultiError is an error wrapping multiple validation
// errors returned by ServerLaunch_Stats_Schema.ValidateAll() if the
// designated constraints aren't met.
type ServerLaunch_Stats_SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLaunch_Stats_SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLaunch_Stats_SchemaMultiError) AllErrors() []error { return m }

// ServerLaunch_Stats_SchemaValidationError is the validation error returned by
// ServerLaunch_Stats_Schema.Validate if the designated constraints aren't met.
type ServerLaunch_Stats_SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLaunch_Stats_SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLaunch_Stats_SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLaunch_Stats_SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLaunch_Stats_SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLaunch_Stats_SchemaValidationError) ErrorName() string {
	return "ServerLaunch_Stats_SchemaValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLaunch_Stats_SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLaunch_Stats_Schema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLaunch_Stats_SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLaunch_Stats_SchemaValidationError{}

// Validate checks the field values on Event_CountStat with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Event_CountStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_CountStat with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Event_CountStatMultiError, or nil if none found.
func (m *Event_CountStat) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_CountStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Count

	if len(errors) > 0 {
		return Event_CountStatMultiError(errors)
	}

	return nil
}

// Event_CountStatMultiError is an error wrapping multiple validation errors
// returned by Event_CountStat.ValidateAll() if the designated constraints
// aren't met.
type Event_CountStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_CountStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_CountStatMultiError) AllErrors() []error { return m }

// Event_CountStatValidationError is the validation error returned by
// Event_CountStat.Validate if the designated constraints aren't met.
type Event_CountStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_CountStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_CountStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_CountStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_CountStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_CountStatValidationError) ErrorName() string { return "Event_CountStatValidationError" }

// Error satisfies the builtin error interface
func (e Event_CountStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_CountStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_CountStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_CountStatValidationError{}

// Validate checks the field values on Event_ApiActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Event_ApiActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_ApiActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Event_ApiActivityMultiError, or nil if none found.
func (m *Event_ApiActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_ApiActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUptime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Event_ApiActivityValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Event_ApiActivityValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_ApiActivityValidationError{
				field:  "Uptime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMethodCalls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Event_ApiActivityValidationError{
						field:  fmt.Sprintf("MethodCalls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Event_ApiActivityValidationError{
						field:  fmt.Sprintf("MethodCalls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_ApiActivityValidationError{
					field:  fmt.Sprintf("MethodCalls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserAgents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Event_ApiActivityValidationError{
						field:  fmt.Sprintf("UserAgents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Event_ApiActivityValidationError{
						field:  fmt.Sprintf("UserAgents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_ApiActivityValidationError{
					field:  fmt.Sprintf("UserAgents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Event_ApiActivityMultiError(errors)
	}

	return nil
}

// Event_ApiActivityMultiError is an error wrapping multiple validation errors
// returned by Event_ApiActivity.ValidateAll() if the designated constraints
// aren't met.
type Event_ApiActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_ApiActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_ApiActivityMultiError) AllErrors() []error { return m }

// Event_ApiActivityValidationError is the validation error returned by
// Event_ApiActivity.Validate if the designated constraints aren't met.
type Event_ApiActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ApiActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ApiActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ApiActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ApiActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ApiActivityValidationError) ErrorName() string {
	return "Event_ApiActivityValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ApiActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ApiActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ApiActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ApiActivityValidationError{}
