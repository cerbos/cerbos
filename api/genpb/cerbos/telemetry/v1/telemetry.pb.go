// Copyright 2021-2022 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: cerbos/telemetry/v1/telemetry.proto

package telemetryv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Source   *Ping_Source   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Features *Ping_Features `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
	Stats    *Ping_Stats    `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Ping) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Ping) GetSource() *Ping_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Ping) GetFeatures() *Ping_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Ping) GetStats() *Ping_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Ping_Cerbos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Commit         string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	BuildDate      string `protobuf:"bytes,3,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	ModuleVersion  string `protobuf:"bytes,4,opt,name=module_version,json=moduleVersion,proto3" json:"module_version,omitempty"`
	ModuleChecksum string `protobuf:"bytes,5,opt,name=module_checksum,json=moduleChecksum,proto3" json:"module_checksum,omitempty"`
}

func (x *Ping_Cerbos) Reset() {
	*x = Ping_Cerbos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Cerbos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Cerbos) ProtoMessage() {}

func (x *Ping_Cerbos) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Cerbos.ProtoReflect.Descriptor instead.
func (*Ping_Cerbos) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ping_Cerbos) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Ping_Cerbos) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Ping_Cerbos) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *Ping_Cerbos) GetModuleVersion() string {
	if x != nil {
		return x.ModuleVersion
	}
	return ""
}

func (x *Ping_Cerbos) GetModuleChecksum() string {
	if x != nil {
		return x.ModuleChecksum
	}
	return ""
}

type Ping_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cerbos  *Ping_Cerbos `protobuf:"bytes,1,opt,name=cerbos,proto3" json:"cerbos,omitempty"`
	Os      string       `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Arch    string       `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	NumCpus uint32       `protobuf:"varint,4,opt,name=num_cpus,json=numCpus,proto3" json:"num_cpus,omitempty"`
}

func (x *Ping_Source) Reset() {
	*x = Ping_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Source) ProtoMessage() {}

func (x *Ping_Source) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Source.ProtoReflect.Descriptor instead.
func (*Ping_Source) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ping_Source) GetCerbos() *Ping_Cerbos {
	if x != nil {
		return x.Cerbos
	}
	return nil
}

func (x *Ping_Source) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Ping_Source) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Ping_Source) GetNumCpus() uint32 {
	if x != nil {
		return x.NumCpus
	}
	return 0
}

type Ping_Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audit    *Ping_Features_Audit    `protobuf:"bytes,1,opt,name=audit,proto3" json:"audit,omitempty"`
	Schema   *Ping_Features_Schema   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	AdminApi *Ping_Features_AdminApi `protobuf:"bytes,3,opt,name=admin_api,json=adminApi,proto3" json:"admin_api,omitempty"`
	Storage  *Ping_Features_Storage  `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *Ping_Features) Reset() {
	*x = Ping_Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features) ProtoMessage() {}

func (x *Ping_Features) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features.ProtoReflect.Descriptor instead.
func (*Ping_Features) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ping_Features) GetAudit() *Ping_Features_Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *Ping_Features) GetSchema() *Ping_Features_Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Ping_Features) GetAdminApi() *Ping_Features_AdminApi {
	if x != nil {
		return x.AdminApi
	}
	return nil
}

func (x *Ping_Features) GetStorage() *Ping_Features_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

type Ping_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *Ping_Stats_Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Schema *Ping_Stats_Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Ping_Stats) Reset() {
	*x = Ping_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Stats) ProtoMessage() {}

func (x *Ping_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Stats.ProtoReflect.Descriptor instead.
func (*Ping_Stats) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ping_Stats) GetPolicy() *Ping_Stats_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *Ping_Stats) GetSchema() *Ping_Stats_Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Ping_Features_Audit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Backend string `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *Ping_Features_Audit) Reset() {
	*x = Ping_Features_Audit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Audit) ProtoMessage() {}

func (x *Ping_Features_Audit) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Audit.ProtoReflect.Descriptor instead.
func (*Ping_Features_Audit) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Ping_Features_Audit) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Ping_Features_Audit) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

type Ping_Features_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enforcement string `protobuf:"bytes,1,opt,name=enforcement,proto3" json:"enforcement,omitempty"`
}

func (x *Ping_Features_Schema) Reset() {
	*x = Ping_Features_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Schema) ProtoMessage() {}

func (x *Ping_Features_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Schema.ProtoReflect.Descriptor instead.
func (*Ping_Features_Schema) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Ping_Features_Schema) GetEnforcement() string {
	if x != nil {
		return x.Enforcement
	}
	return ""
}

type Ping_Features_AdminApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Ping_Features_AdminApi) Reset() {
	*x = Ping_Features_AdminApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_AdminApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_AdminApi) ProtoMessage() {}

func (x *Ping_Features_AdminApi) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_AdminApi.ProtoReflect.Descriptor instead.
func (*Ping_Features_AdminApi) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *Ping_Features_AdminApi) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Ping_Features_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// Types that are assignable to Store:
	//	*Ping_Features_Storage_Disk_
	//	*Ping_Features_Storage_Git_
	//	*Ping_Features_Storage_Blob_
	Store isPing_Features_Storage_Store `protobuf_oneof:"store"`
}

func (x *Ping_Features_Storage) Reset() {
	*x = Ping_Features_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Storage) ProtoMessage() {}

func (x *Ping_Features_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Storage.ProtoReflect.Descriptor instead.
func (*Ping_Features_Storage) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *Ping_Features_Storage) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (m *Ping_Features_Storage) GetStore() isPing_Features_Storage_Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (x *Ping_Features_Storage) GetDisk() *Ping_Features_Storage_Disk {
	if x, ok := x.GetStore().(*Ping_Features_Storage_Disk_); ok {
		return x.Disk
	}
	return nil
}

func (x *Ping_Features_Storage) GetGit() *Ping_Features_Storage_Git {
	if x, ok := x.GetStore().(*Ping_Features_Storage_Git_); ok {
		return x.Git
	}
	return nil
}

func (x *Ping_Features_Storage) GetBlob() *Ping_Features_Storage_Blob {
	if x, ok := x.GetStore().(*Ping_Features_Storage_Blob_); ok {
		return x.Blob
	}
	return nil
}

type isPing_Features_Storage_Store interface {
	isPing_Features_Storage_Store()
}

type Ping_Features_Storage_Disk_ struct {
	Disk *Ping_Features_Storage_Disk `protobuf:"bytes,2,opt,name=disk,proto3,oneof"`
}

type Ping_Features_Storage_Git_ struct {
	Git *Ping_Features_Storage_Git `protobuf:"bytes,3,opt,name=git,proto3,oneof"`
}

type Ping_Features_Storage_Blob_ struct {
	Blob *Ping_Features_Storage_Blob `protobuf:"bytes,4,opt,name=blob,proto3,oneof"`
}

func (*Ping_Features_Storage_Disk_) isPing_Features_Storage_Store() {}

func (*Ping_Features_Storage_Git_) isPing_Features_Storage_Store() {}

func (*Ping_Features_Storage_Blob_) isPing_Features_Storage_Store() {}

type Ping_Features_Storage_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch bool `protobuf:"varint,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *Ping_Features_Storage_Disk) Reset() {
	*x = Ping_Features_Storage_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Storage_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Storage_Disk) ProtoMessage() {}

func (x *Ping_Features_Storage_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Storage_Disk.ProtoReflect.Descriptor instead.
func (*Ping_Features_Storage_Disk) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 3, 0}
}

func (x *Ping_Features_Storage_Disk) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

type Ping_Features_Storage_Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol     string               `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Auth         bool                 `protobuf:"varint,2,opt,name=auth,proto3" json:"auth,omitempty"`
	PollInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
}

func (x *Ping_Features_Storage_Git) Reset() {
	*x = Ping_Features_Storage_Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Storage_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Storage_Git) ProtoMessage() {}

func (x *Ping_Features_Storage_Git) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Storage_Git.ProtoReflect.Descriptor instead.
func (*Ping_Features_Storage_Git) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 3, 1}
}

func (x *Ping_Features_Storage_Git) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Ping_Features_Storage_Git) GetAuth() bool {
	if x != nil {
		return x.Auth
	}
	return false
}

func (x *Ping_Features_Storage_Git) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

type Ping_Features_Storage_Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider     string               `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	PollInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
}

func (x *Ping_Features_Storage_Blob) Reset() {
	*x = Ping_Features_Storage_Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Features_Storage_Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Features_Storage_Blob) ProtoMessage() {}

func (x *Ping_Features_Storage_Blob) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Features_Storage_Blob.ProtoReflect.Descriptor instead.
func (*Ping_Features_Storage_Blob) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 2, 3, 2}
}

func (x *Ping_Features_Storage_Blob) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Ping_Features_Storage_Blob) GetPollInterval() *durationpb.Duration {
	if x != nil {
		return x.PollInterval
	}
	return nil
}

type Ping_Stats_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count             map[string]uint32  `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AvgRuleCount      map[string]float64 `protobuf:"bytes,2,rep,name=avg_rule_count,json=avgRuleCount,proto3" json:"avg_rule_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	AvgConditionCount map[string]float64 `protobuf:"bytes,3,rep,name=avg_condition_count,json=avgConditionCount,proto3" json:"avg_condition_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *Ping_Stats_Policy) Reset() {
	*x = Ping_Stats_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Stats_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Stats_Policy) ProtoMessage() {}

func (x *Ping_Stats_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Stats_Policy.ProtoReflect.Descriptor instead.
func (*Ping_Stats_Policy) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Ping_Stats_Policy) GetCount() map[string]uint32 {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Ping_Stats_Policy) GetAvgRuleCount() map[string]float64 {
	if x != nil {
		return x.AvgRuleCount
	}
	return nil
}

func (x *Ping_Stats_Policy) GetAvgConditionCount() map[string]float64 {
	if x != nil {
		return x.AvgConditionCount
	}
	return nil
}

type Ping_Stats_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Ping_Stats_Schema) Reset() {
	*x = Ping_Stats_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Stats_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Stats_Schema) ProtoMessage() {}

func (x *Ping_Stats_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_telemetry_v1_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Stats_Schema.ProtoReflect.Descriptor instead.
func (*Ping_Stats_Schema) Descriptor() ([]byte, []int) {
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Ping_Stats_Schema) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_cerbos_telemetry_v1_telemetry_proto protoreflect.FileDescriptor

var file_cerbos_telemetry_v1_telemetry_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x10, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xa9,
	0x01, 0x0a, 0x06, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x1a, 0x81, 0x01, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x52, 0x06, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x73, 0x1a, 0xa4,
	0x07, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48,
	0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x69, 0x52, 0x08,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x3b,
	0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x2a, 0x0a, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x24, 0x0a, 0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf5, 0x03,
	0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x6c, 0x6f, 0x62, 0x1a, 0x1c, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x75, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x62, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d,
	0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x8b, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a,
	0xe1, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x76, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x61, 0x76, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x41, 0x76, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x1e, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x7b, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x76, 0x31, 0xaa, 0x02, 0x17, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_telemetry_v1_telemetry_proto_rawDescOnce sync.Once
	file_cerbos_telemetry_v1_telemetry_proto_rawDescData = file_cerbos_telemetry_v1_telemetry_proto_rawDesc
)

func file_cerbos_telemetry_v1_telemetry_proto_rawDescGZIP() []byte {
	file_cerbos_telemetry_v1_telemetry_proto_rawDescOnce.Do(func() {
		file_cerbos_telemetry_v1_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_telemetry_v1_telemetry_proto_rawDescData)
	})
	return file_cerbos_telemetry_v1_telemetry_proto_rawDescData
}

var file_cerbos_telemetry_v1_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cerbos_telemetry_v1_telemetry_proto_goTypes = []interface{}{
	(*Ping)(nil),                       // 0: cerbos.telemetry.v1.Ping
	(*Ping_Cerbos)(nil),                // 1: cerbos.telemetry.v1.Ping.Cerbos
	(*Ping_Source)(nil),                // 2: cerbos.telemetry.v1.Ping.Source
	(*Ping_Features)(nil),              // 3: cerbos.telemetry.v1.Ping.Features
	(*Ping_Stats)(nil),                 // 4: cerbos.telemetry.v1.Ping.Stats
	(*Ping_Features_Audit)(nil),        // 5: cerbos.telemetry.v1.Ping.Features.Audit
	(*Ping_Features_Schema)(nil),       // 6: cerbos.telemetry.v1.Ping.Features.Schema
	(*Ping_Features_AdminApi)(nil),     // 7: cerbos.telemetry.v1.Ping.Features.AdminApi
	(*Ping_Features_Storage)(nil),      // 8: cerbos.telemetry.v1.Ping.Features.Storage
	(*Ping_Features_Storage_Disk)(nil), // 9: cerbos.telemetry.v1.Ping.Features.Storage.Disk
	(*Ping_Features_Storage_Git)(nil),  // 10: cerbos.telemetry.v1.Ping.Features.Storage.Git
	(*Ping_Features_Storage_Blob)(nil), // 11: cerbos.telemetry.v1.Ping.Features.Storage.Blob
	(*Ping_Stats_Policy)(nil),          // 12: cerbos.telemetry.v1.Ping.Stats.Policy
	(*Ping_Stats_Schema)(nil),          // 13: cerbos.telemetry.v1.Ping.Stats.Schema
	nil,                                // 14: cerbos.telemetry.v1.Ping.Stats.Policy.CountEntry
	nil,                                // 15: cerbos.telemetry.v1.Ping.Stats.Policy.AvgRuleCountEntry
	nil,                                // 16: cerbos.telemetry.v1.Ping.Stats.Policy.AvgConditionCountEntry
	(*durationpb.Duration)(nil),        // 17: google.protobuf.Duration
}
var file_cerbos_telemetry_v1_telemetry_proto_depIdxs = []int32{
	2,  // 0: cerbos.telemetry.v1.Ping.source:type_name -> cerbos.telemetry.v1.Ping.Source
	3,  // 1: cerbos.telemetry.v1.Ping.features:type_name -> cerbos.telemetry.v1.Ping.Features
	4,  // 2: cerbos.telemetry.v1.Ping.stats:type_name -> cerbos.telemetry.v1.Ping.Stats
	1,  // 3: cerbos.telemetry.v1.Ping.Source.cerbos:type_name -> cerbos.telemetry.v1.Ping.Cerbos
	5,  // 4: cerbos.telemetry.v1.Ping.Features.audit:type_name -> cerbos.telemetry.v1.Ping.Features.Audit
	6,  // 5: cerbos.telemetry.v1.Ping.Features.schema:type_name -> cerbos.telemetry.v1.Ping.Features.Schema
	7,  // 6: cerbos.telemetry.v1.Ping.Features.admin_api:type_name -> cerbos.telemetry.v1.Ping.Features.AdminApi
	8,  // 7: cerbos.telemetry.v1.Ping.Features.storage:type_name -> cerbos.telemetry.v1.Ping.Features.Storage
	12, // 8: cerbos.telemetry.v1.Ping.Stats.policy:type_name -> cerbos.telemetry.v1.Ping.Stats.Policy
	13, // 9: cerbos.telemetry.v1.Ping.Stats.schema:type_name -> cerbos.telemetry.v1.Ping.Stats.Schema
	9,  // 10: cerbos.telemetry.v1.Ping.Features.Storage.disk:type_name -> cerbos.telemetry.v1.Ping.Features.Storage.Disk
	10, // 11: cerbos.telemetry.v1.Ping.Features.Storage.git:type_name -> cerbos.telemetry.v1.Ping.Features.Storage.Git
	11, // 12: cerbos.telemetry.v1.Ping.Features.Storage.blob:type_name -> cerbos.telemetry.v1.Ping.Features.Storage.Blob
	17, // 13: cerbos.telemetry.v1.Ping.Features.Storage.Git.poll_interval:type_name -> google.protobuf.Duration
	17, // 14: cerbos.telemetry.v1.Ping.Features.Storage.Blob.poll_interval:type_name -> google.protobuf.Duration
	14, // 15: cerbos.telemetry.v1.Ping.Stats.Policy.count:type_name -> cerbos.telemetry.v1.Ping.Stats.Policy.CountEntry
	15, // 16: cerbos.telemetry.v1.Ping.Stats.Policy.avg_rule_count:type_name -> cerbos.telemetry.v1.Ping.Stats.Policy.AvgRuleCountEntry
	16, // 17: cerbos.telemetry.v1.Ping.Stats.Policy.avg_condition_count:type_name -> cerbos.telemetry.v1.Ping.Stats.Policy.AvgConditionCountEntry
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cerbos_telemetry_v1_telemetry_proto_init() }
func file_cerbos_telemetry_v1_telemetry_proto_init() {
	if File_cerbos_telemetry_v1_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Cerbos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Audit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_AdminApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Storage_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Storage_Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Features_Storage_Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Stats_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_telemetry_v1_telemetry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Stats_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_telemetry_v1_telemetry_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Ping_Features_Storage_Disk_)(nil),
		(*Ping_Features_Storage_Git_)(nil),
		(*Ping_Features_Storage_Blob_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_telemetry_v1_telemetry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_telemetry_v1_telemetry_proto_goTypes,
		DependencyIndexes: file_cerbos_telemetry_v1_telemetry_proto_depIdxs,
		MessageInfos:      file_cerbos_telemetry_v1_telemetry_proto_msgTypes,
	}.Build()
	File_cerbos_telemetry_v1_telemetry_proto = out.File
	file_cerbos_telemetry_v1_telemetry_proto_rawDesc = nil
	file_cerbos_telemetry_v1_telemetry_proto_goTypes = nil
	file_cerbos_telemetry_v1_telemetry_proto_depIdxs = nil
}
