// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/engine/v1/engine.proto

package enginev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	effectv1 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = effectv1.Effect(0)
)

// Validate checks the field values on PlanResourcesInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesInputMultiError, or nil if none found.
func (m *PlanResourcesInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesInputValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesInputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuxData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuxData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesInputValidationError{
				field:  "AuxData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeMeta

	if len(errors) > 0 {
		return PlanResourcesInputMultiError(errors)
	}

	return nil
}

// PlanResourcesInputMultiError is an error wrapping multiple validation errors
// returned by PlanResourcesInput.ValidateAll() if the designated constraints
// aren't met.
type PlanResourcesInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesInputMultiError) AllErrors() []error { return m }

// PlanResourcesInputValidationError is the validation error returned by
// PlanResourcesInput.Validate if the designated constraints aren't met.
type PlanResourcesInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesInputValidationError) ErrorName() string {
	return "PlanResourcesInputValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesInputValidationError{}

// Validate checks the field values on PlanResourcesAst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesAst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesAst with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesAstMultiError, or nil if none found.
func (m *PlanResourcesAst) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesAst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilterAst()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesAstValidationError{
					field:  "FilterAst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesAstValidationError{
					field:  "FilterAst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterAst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesAstValidationError{
				field:  "FilterAst",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlanResourcesAstMultiError(errors)
	}

	return nil
}

// PlanResourcesAstMultiError is an error wrapping multiple validation errors
// returned by PlanResourcesAst.ValidateAll() if the designated constraints
// aren't met.
type PlanResourcesAstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesAstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesAstMultiError) AllErrors() []error { return m }

// PlanResourcesAstValidationError is the validation error returned by
// PlanResourcesAst.Validate if the designated constraints aren't met.
type PlanResourcesAstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesAstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesAstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesAstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesAstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesAstValidationError) ErrorName() string { return "PlanResourcesAstValidationError" }

// Error satisfies the builtin error interface
func (e PlanResourcesAstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesAst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesAstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesAstValidationError{}

// Validate checks the field values on PlanResourcesFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesFilterMultiError, or nil if none found.
func (m *PlanResourcesFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesFilterValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesFilterValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesFilterValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlanResourcesFilterMultiError(errors)
	}

	return nil
}

// PlanResourcesFilterMultiError is an error wrapping multiple validation
// errors returned by PlanResourcesFilter.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesFilterMultiError) AllErrors() []error { return m }

// PlanResourcesFilterValidationError is the validation error returned by
// PlanResourcesFilter.Validate if the designated constraints aren't met.
type PlanResourcesFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesFilterValidationError) ErrorName() string {
	return "PlanResourcesFilterValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesFilterValidationError{}

// Validate checks the field values on PlanResourcesOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesOutputMultiError, or nil if none found.
func (m *PlanResourcesOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Action

	// no validation rules for Kind

	// no validation rules for PolicyVersion

	// no validation rules for Scope

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesOutputValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesOutputValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesOutputValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilterDebug

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesOutputValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlanResourcesOutputMultiError(errors)
	}

	return nil
}

// PlanResourcesOutputMultiError is an error wrapping multiple validation
// errors returned by PlanResourcesOutput.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesOutputMultiError) AllErrors() []error { return m }

// PlanResourcesOutputValidationError is the validation error returned by
// PlanResourcesOutput.Validate if the designated constraints aren't met.
type PlanResourcesOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesOutputValidationError) ErrorName() string {
	return "PlanResourcesOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesOutputValidationError{}

// Validate checks the field values on CheckInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckInputMultiError, or
// nil if none found.
func (m *CheckInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if m.GetResource() == nil {
		err := CheckInputValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPrincipal() == nil {
		err := CheckInputValidationError{
			field:  "Principal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	_CheckInput_Actions_Unique := make(map[string]struct{}, len(m.GetActions()))

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if _, exists := _CheckInput_Actions_Unique[item]; exists {
			err := CheckInputValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CheckInput_Actions_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) < 1 {
			err := CheckInputValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetAuxData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuxData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "AuxData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckInputMultiError(errors)
	}

	return nil
}

// CheckInputMultiError is an error wrapping multiple validation errors
// returned by CheckInput.ValidateAll() if the designated constraints aren't met.
type CheckInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckInputMultiError) AllErrors() []error { return m }

// CheckInputValidationError is the validation error returned by
// CheckInput.Validate if the designated constraints aren't met.
type CheckInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckInputValidationError) ErrorName() string { return "CheckInputValidationError" }

// Error satisfies the builtin error interface
func (e CheckInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckInputValidationError{}

// Validate checks the field values on CheckOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckOutputMultiError, or
// nil if none found.
func (m *CheckOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for ResourceId

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckOutputValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckOutputValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckOutputValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckOutputValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckOutputValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckOutputMultiError(errors)
	}

	return nil
}

// CheckOutputMultiError is an error wrapping multiple validation errors
// returned by CheckOutput.ValidateAll() if the designated constraints aren't met.
type CheckOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutputMultiError) AllErrors() []error { return m }

// CheckOutputValidationError is the validation error returned by
// CheckOutput.Validate if the designated constraints aren't met.
type CheckOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutputValidationError) ErrorName() string { return "CheckOutputValidationError" }

// Error satisfies the builtin error interface
func (e CheckOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutputValidationError{}

// Validate checks the field values on OutputEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OutputEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutputEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OutputEntryMultiError, or
// nil if none found.
func (m *OutputEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *OutputEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	if all {
		switch v := interface{}(m.GetVal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OutputEntryValidationError{
					field:  "Val",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OutputEntryValidationError{
					field:  "Val",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OutputEntryValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OutputEntryMultiError(errors)
	}

	return nil
}

// OutputEntryMultiError is an error wrapping multiple validation errors
// returned by OutputEntry.ValidateAll() if the designated constraints aren't met.
type OutputEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputEntryMultiError) AllErrors() []error { return m }

// OutputEntryValidationError is the validation error returned by
// OutputEntry.Validate if the designated constraints aren't met.
type OutputEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputEntryValidationError) ErrorName() string { return "OutputEntryValidationError" }

// Error satisfies the builtin error interface
func (e OutputEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputEntryValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ResourceValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Resource_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := ResourceValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ResourceValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := ResourceValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResourceValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_Resource_Scope_Pattern.MatchString(m.GetScope()) {
		err := ResourceValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alnum:]][[:word:]\\\\-]*(\\\\.[[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

var _Resource_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _Resource_Scope_Pattern = regexp.MustCompile("^([[:alnum:]][[:word:]\\-]*(\\.[[:word:]\\-]*)*)*$")

// Validate checks the field values on Principal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Principal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Principal with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrincipalMultiError, or nil
// if none found.
func (m *Principal) ValidateAll() error {
	return m.validate(true)
}

func (m *Principal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PrincipalValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Principal_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := PrincipalValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoles()) < 1 {
		err := PrincipalValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Principal_Roles_Unique := make(map[string]struct{}, len(m.GetRoles()))

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if _, exists := _Principal_Roles_Unique[item]; exists {
			err := PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Principal_Roles_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) < 1 {
			err := PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := PrincipalValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PrincipalValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_Principal_Scope_Pattern.MatchString(m.GetScope()) {
		err := PrincipalValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alnum:]][[:word:]\\\\-]*(\\\\.[[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrincipalMultiError(errors)
	}

	return nil
}

// PrincipalMultiError is an error wrapping multiple validation errors returned
// by Principal.ValidateAll() if the designated constraints aren't met.
type PrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalMultiError) AllErrors() []error { return m }

// PrincipalValidationError is the validation error returned by
// Principal.Validate if the designated constraints aren't met.
type PrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalValidationError) ErrorName() string { return "PrincipalValidationError" }

// Error satisfies the builtin error interface
func (e PrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalValidationError{}

var _Principal_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _Principal_Scope_Pattern = regexp.MustCompile("^([[:alnum:]][[:word:]\\-]*(\\.[[:word:]\\-]*)*)*$")

// Validate checks the field values on AuxData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuxData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuxData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuxDataMultiError, or nil if none found.
func (m *AuxData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuxData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetJwt()))
		i := 0
		for key := range m.GetJwt() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetJwt()[key]
			_ = val

			// no validation rules for Jwt[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AuxDataValidationError{
							field:  fmt.Sprintf("Jwt[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AuxDataValidationError{
							field:  fmt.Sprintf("Jwt[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AuxDataValidationError{
						field:  fmt.Sprintf("Jwt[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AuxDataMultiError(errors)
	}

	return nil
}

// AuxDataMultiError is an error wrapping multiple validation errors returned
// by AuxData.ValidateAll() if the designated constraints aren't met.
type AuxDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuxDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuxDataMultiError) AllErrors() []error { return m }

// AuxDataValidationError is the validation error returned by AuxData.Validate
// if the designated constraints aren't met.
type AuxDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuxDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuxDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuxDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuxDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuxDataValidationError) ErrorName() string { return "AuxDataValidationError" }

// Error satisfies the builtin error interface
func (e AuxDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuxData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuxDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuxDataValidationError{}

// Validate checks the field values on Trace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Trace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trace with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TraceMultiError, or nil if none found.
func (m *Trace) ValidateAll() error {
	return m.validate(true)
}

func (m *Trace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraceValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraceValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraceValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraceValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TraceMultiError(errors)
	}

	return nil
}

// TraceMultiError is an error wrapping multiple validation errors returned by
// Trace.ValidateAll() if the designated constraints aren't met.
type TraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraceMultiError) AllErrors() []error { return m }

// TraceValidationError is the validation error returned by Trace.Validate if
// the designated constraints aren't met.
type TraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraceValidationError) ErrorName() string { return "TraceValidationError" }

// Error satisfies the builtin error interface
func (e TraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraceValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuxData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuxData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "AuxData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Runtime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuntimeMultiError, or nil if none found.
func (m *Runtime) ValidateAll() error {
	return m.validate(true)
}

func (m *Runtime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RuntimeMultiError(errors)
	}

	return nil
}

// RuntimeMultiError is an error wrapping multiple validation errors returned
// by Runtime.ValidateAll() if the designated constraints aren't met.
type RuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeMultiError) AllErrors() []error { return m }

// RuntimeValidationError is the validation error returned by Runtime.Validate
// if the designated constraints aren't met.
type RuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeValidationError) ErrorName() string { return "RuntimeValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeValidationError{}

// Validate checks the field values on PlanResourcesInput_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesInput_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesInput_Resource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesInput_ResourceMultiError, or nil if none found.
func (m *PlanResourcesInput_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesInput_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := PlanResourcesInput_ResourceValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := PlanResourcesInput_ResourceValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PlanResourcesInput_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PlanResourcesInput_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PlanResourcesInput_ResourceValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_PlanResourcesInput_Resource_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := PlanResourcesInput_ResourceValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PlanResourcesInput_Resource_Scope_Pattern.MatchString(m.GetScope()) {
		err := PlanResourcesInput_ResourceValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alnum:]][[:word:]\\\\-]*(\\\\.[[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PlanResourcesInput_ResourceMultiError(errors)
	}

	return nil
}

// PlanResourcesInput_ResourceMultiError is an error wrapping multiple
// validation errors returned by PlanResourcesInput_Resource.ValidateAll() if
// the designated constraints aren't met.
type PlanResourcesInput_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesInput_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesInput_ResourceMultiError) AllErrors() []error { return m }

// PlanResourcesInput_ResourceValidationError is the validation error returned
// by PlanResourcesInput_Resource.Validate if the designated constraints
// aren't met.
type PlanResourcesInput_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesInput_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesInput_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesInput_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesInput_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesInput_ResourceValidationError) ErrorName() string {
	return "PlanResourcesInput_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesInput_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesInput_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesInput_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesInput_ResourceValidationError{}

var _PlanResourcesInput_Resource_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _PlanResourcesInput_Resource_Scope_Pattern = regexp.MustCompile("^([[:alnum:]][[:word:]\\-]*(\\.[[:word:]\\-]*)*)*$")

// Validate checks the field values on PlanResourcesAst_Node with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesAst_Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesAst_Node with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesAst_NodeMultiError, or nil if none found.
func (m *PlanResourcesAst_Node) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesAst_Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *PlanResourcesAst_Node_LogicalOperation:
		if v == nil {
			err := PlanResourcesAst_NodeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogicalOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesAst_NodeValidationError{
						field:  "LogicalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesAst_NodeValidationError{
						field:  "LogicalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogicalOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesAst_NodeValidationError{
					field:  "LogicalOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlanResourcesAst_Node_Expression:
		if v == nil {
			err := PlanResourcesAst_NodeValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesAst_NodeValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesAst_NodeValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesAst_NodeValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PlanResourcesAst_NodeMultiError(errors)
	}

	return nil
}

// PlanResourcesAst_NodeMultiError is an error wrapping multiple validation
// errors returned by PlanResourcesAst_Node.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesAst_NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesAst_NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesAst_NodeMultiError) AllErrors() []error { return m }

// PlanResourcesAst_NodeValidationError is the validation error returned by
// PlanResourcesAst_Node.Validate if the designated constraints aren't met.
type PlanResourcesAst_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesAst_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesAst_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesAst_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesAst_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesAst_NodeValidationError) ErrorName() string {
	return "PlanResourcesAst_NodeValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesAst_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesAst_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesAst_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesAst_NodeValidationError{}

// Validate checks the field values on PlanResourcesAst_LogicalOperation with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PlanResourcesAst_LogicalOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesAst_LogicalOperation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PlanResourcesAst_LogicalOperationMultiError, or nil if none found.
func (m *PlanResourcesAst_LogicalOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesAst_LogicalOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesAst_LogicalOperationValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesAst_LogicalOperationValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesAst_LogicalOperationValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlanResourcesAst_LogicalOperationMultiError(errors)
	}

	return nil
}

// PlanResourcesAst_LogicalOperationMultiError is an error wrapping multiple
// validation errors returned by
// PlanResourcesAst_LogicalOperation.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesAst_LogicalOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesAst_LogicalOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesAst_LogicalOperationMultiError) AllErrors() []error { return m }

// PlanResourcesAst_LogicalOperationValidationError is the validation error
// returned by PlanResourcesAst_LogicalOperation.Validate if the designated
// constraints aren't met.
type PlanResourcesAst_LogicalOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesAst_LogicalOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesAst_LogicalOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesAst_LogicalOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesAst_LogicalOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesAst_LogicalOperationValidationError) ErrorName() string {
	return "PlanResourcesAst_LogicalOperationValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesAst_LogicalOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesAst_LogicalOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesAst_LogicalOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesAst_LogicalOperationValidationError{}

// Validate checks the field values on PlanResourcesFilter_Expression with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesFilter_Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesFilter_Expression with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PlanResourcesFilter_ExpressionMultiError, or nil if none found.
func (m *PlanResourcesFilter_Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesFilter_Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetOperands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesFilter_ExpressionValidationError{
						field:  fmt.Sprintf("Operands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesFilter_ExpressionValidationError{
						field:  fmt.Sprintf("Operands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesFilter_ExpressionValidationError{
					field:  fmt.Sprintf("Operands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlanResourcesFilter_ExpressionMultiError(errors)
	}

	return nil
}

// PlanResourcesFilter_ExpressionMultiError is an error wrapping multiple
// validation errors returned by PlanResourcesFilter_Expression.ValidateAll()
// if the designated constraints aren't met.
type PlanResourcesFilter_ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesFilter_ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesFilter_ExpressionMultiError) AllErrors() []error { return m }

// PlanResourcesFilter_ExpressionValidationError is the validation error
// returned by PlanResourcesFilter_Expression.Validate if the designated
// constraints aren't met.
type PlanResourcesFilter_ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesFilter_ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesFilter_ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesFilter_ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesFilter_ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesFilter_ExpressionValidationError) ErrorName() string {
	return "PlanResourcesFilter_ExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesFilter_ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesFilter_Expression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesFilter_ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesFilter_ExpressionValidationError{}

// Validate checks the field values on PlanResourcesFilter_Expression_Operand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PlanResourcesFilter_Expression_Operand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PlanResourcesFilter_Expression_Operand with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PlanResourcesFilter_Expression_OperandMultiError, or nil if none found.
func (m *PlanResourcesFilter_Expression_Operand) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesFilter_Expression_Operand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Node.(type) {
	case *PlanResourcesFilter_Expression_Operand_Value:
		if v == nil {
			err := PlanResourcesFilter_Expression_OperandValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesFilter_Expression_OperandValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesFilter_Expression_OperandValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesFilter_Expression_OperandValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlanResourcesFilter_Expression_Operand_Expression:
		if v == nil {
			err := PlanResourcesFilter_Expression_OperandValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesFilter_Expression_OperandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesFilter_Expression_OperandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesFilter_Expression_OperandValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlanResourcesFilter_Expression_Operand_Variable:
		if v == nil {
			err := PlanResourcesFilter_Expression_OperandValidationError{
				field:  "Node",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Variable
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PlanResourcesFilter_Expression_OperandMultiError(errors)
	}

	return nil
}

// PlanResourcesFilter_Expression_OperandMultiError is an error wrapping
// multiple validation errors returned by
// PlanResourcesFilter_Expression_Operand.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesFilter_Expression_OperandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesFilter_Expression_OperandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesFilter_Expression_OperandMultiError) AllErrors() []error { return m }

// PlanResourcesFilter_Expression_OperandValidationError is the validation
// error returned by PlanResourcesFilter_Expression_Operand.Validate if the
// designated constraints aren't met.
type PlanResourcesFilter_Expression_OperandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesFilter_Expression_OperandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesFilter_Expression_OperandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesFilter_Expression_OperandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesFilter_Expression_OperandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesFilter_Expression_OperandValidationError) ErrorName() string {
	return "PlanResourcesFilter_Expression_OperandValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesFilter_Expression_OperandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesFilter_Expression_Operand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesFilter_Expression_OperandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesFilter_Expression_OperandValidationError{}

// Validate checks the field values on CheckOutput_ActionEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOutput_ActionEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutput_ActionEffect with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOutput_ActionEffectMultiError, or nil if none found.
func (m *CheckOutput_ActionEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutput_ActionEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Effect

	// no validation rules for Policy

	// no validation rules for Scope

	if len(errors) > 0 {
		return CheckOutput_ActionEffectMultiError(errors)
	}

	return nil
}

// CheckOutput_ActionEffectMultiError is an error wrapping multiple validation
// errors returned by CheckOutput_ActionEffect.ValidateAll() if the designated
// constraints aren't met.
type CheckOutput_ActionEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutput_ActionEffectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutput_ActionEffectMultiError) AllErrors() []error { return m }

// CheckOutput_ActionEffectValidationError is the validation error returned by
// CheckOutput_ActionEffect.Validate if the designated constraints aren't met.
type CheckOutput_ActionEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutput_ActionEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutput_ActionEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutput_ActionEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutput_ActionEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutput_ActionEffectValidationError) ErrorName() string {
	return "CheckOutput_ActionEffectValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOutput_ActionEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutput_ActionEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutput_ActionEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutput_ActionEffectValidationError{}

// Validate checks the field values on Trace_Component with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Trace_Component) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trace_Component with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Trace_ComponentMultiError, or nil if none found.
func (m *Trace_Component) ValidateAll() error {
	return m.validate(true)
}

func (m *Trace_Component) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	switch v := m.Details.(type) {
	case *Trace_Component_Action:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Action
	case *Trace_Component_DerivedRole:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DerivedRole
	case *Trace_Component_Expr:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Expr
	case *Trace_Component_Index:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Index
	case *Trace_Component_Policy:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Policy
	case *Trace_Component_Resource:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Resource
	case *Trace_Component_Rule:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Rule
	case *Trace_Component_Scope:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Scope
	case *Trace_Component_Variable_:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVariable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Trace_ComponentValidationError{
						field:  "Variable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Trace_ComponentValidationError{
						field:  "Variable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVariable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Trace_ComponentValidationError{
					field:  "Variable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Trace_Component_Output:
		if v == nil {
			err := Trace_ComponentValidationError{
				field:  "Details",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Output
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Trace_ComponentMultiError(errors)
	}

	return nil
}

// Trace_ComponentMultiError is an error wrapping multiple validation errors
// returned by Trace_Component.ValidateAll() if the designated constraints
// aren't met.
type Trace_ComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Trace_ComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Trace_ComponentMultiError) AllErrors() []error { return m }

// Trace_ComponentValidationError is the validation error returned by
// Trace_Component.Validate if the designated constraints aren't met.
type Trace_ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Trace_ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Trace_ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Trace_ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Trace_ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Trace_ComponentValidationError) ErrorName() string { return "Trace_ComponentValidationError" }

// Error satisfies the builtin error interface
func (e Trace_ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrace_Component.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Trace_ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Trace_ComponentValidationError{}

// Validate checks the field values on Trace_Event with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Trace_Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trace_Event with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Trace_EventMultiError, or
// nil if none found.
func (m *Trace_Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Trace_Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Effect

	// no validation rules for Error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Trace_EventValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Trace_EventValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Trace_EventValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Trace_EventMultiError(errors)
	}

	return nil
}

// Trace_EventMultiError is an error wrapping multiple validation errors
// returned by Trace_Event.ValidateAll() if the designated constraints aren't met.
type Trace_EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Trace_EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Trace_EventMultiError) AllErrors() []error { return m }

// Trace_EventValidationError is the validation error returned by
// Trace_Event.Validate if the designated constraints aren't met.
type Trace_EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Trace_EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Trace_EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Trace_EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Trace_EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Trace_EventValidationError) ErrorName() string { return "Trace_EventValidationError" }

// Error satisfies the builtin error interface
func (e Trace_EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrace_Event.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Trace_EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Trace_EventValidationError{}

// Validate checks the field values on Trace_Component_Variable with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Trace_Component_Variable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trace_Component_Variable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Trace_Component_VariableMultiError, or nil if none found.
func (m *Trace_Component_Variable) ValidateAll() error {
	return m.validate(true)
}

func (m *Trace_Component_Variable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Expr

	if len(errors) > 0 {
		return Trace_Component_VariableMultiError(errors)
	}

	return nil
}

// Trace_Component_VariableMultiError is an error wrapping multiple validation
// errors returned by Trace_Component_Variable.ValidateAll() if the designated
// constraints aren't met.
type Trace_Component_VariableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Trace_Component_VariableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Trace_Component_VariableMultiError) AllErrors() []error { return m }

// Trace_Component_VariableValidationError is the validation error returned by
// Trace_Component_Variable.Validate if the designated constraints aren't met.
type Trace_Component_VariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Trace_Component_VariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Trace_Component_VariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Trace_Component_VariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Trace_Component_VariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Trace_Component_VariableValidationError) ErrorName() string {
	return "Trace_Component_VariableValidationError"
}

// Error satisfies the builtin error interface
func (e Trace_Component_VariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrace_Component_Variable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Trace_Component_VariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Trace_Component_VariableValidationError{}

// Validate checks the field values on Request_Principal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Request_Principal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_Principal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_PrincipalMultiError, or nil if none found.
func (m *Request_Principal) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_Principal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Request_PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Request_PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Request_PrincipalValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Request_PrincipalMultiError(errors)
	}

	return nil
}

// Request_PrincipalMultiError is an error wrapping multiple validation errors
// returned by Request_Principal.ValidateAll() if the designated constraints
// aren't met.
type Request_PrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_PrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_PrincipalMultiError) AllErrors() []error { return m }

// Request_PrincipalValidationError is the validation error returned by
// Request_Principal.Validate if the designated constraints aren't met.
type Request_PrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_PrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_PrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_PrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_PrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_PrincipalValidationError) ErrorName() string {
	return "Request_PrincipalValidationError"
}

// Error satisfies the builtin error interface
func (e Request_PrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_Principal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_PrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_PrincipalValidationError{}

// Validate checks the field values on Request_Resource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Request_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request_Resource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Request_ResourceMultiError, or nil if none found.
func (m *Request_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Request_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	// no validation rules for Id

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Request_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Request_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Request_ResourceValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Request_ResourceMultiError(errors)
	}

	return nil
}

// Request_ResourceMultiError is an error wrapping multiple validation errors
// returned by Request_Resource.ValidateAll() if the designated constraints
// aren't met.
type Request_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Request_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Request_ResourceMultiError) AllErrors() []error { return m }

// Request_ResourceValidationError is the validation error returned by
// Request_Resource.Validate if the designated constraints aren't met.
type Request_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_ResourceValidationError) ErrorName() string { return "Request_ResourceValidationError" }

// Error satisfies the builtin error interface
func (e Request_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_ResourceValidationError{}
