// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/engine/v1/engine.proto

package enginev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	effectv1 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = effectv1.Effect(0)
)

// Validate checks the field values on ResourcesQueryPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourcesQueryPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesQueryPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcesQueryPlanRequestMultiError, or nil if none found.
func (m *ResourcesQueryPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesQueryPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesQueryPlanRequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesQueryPlanRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuxData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcesQueryPlanRequestValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuxData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesQueryPlanRequestValidationError{
				field:  "AuxData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeMeta

	if len(errors) > 0 {
		return ResourcesQueryPlanRequestMultiError(errors)
	}

	return nil
}

// ResourcesQueryPlanRequestMultiError is an error wrapping multiple validation
// errors returned by ResourcesQueryPlanRequest.ValidateAll() if the
// designated constraints aren't met.
type ResourcesQueryPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesQueryPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesQueryPlanRequestMultiError) AllErrors() []error { return m }

// ResourcesQueryPlanRequestValidationError is the validation error returned by
// ResourcesQueryPlanRequest.Validate if the designated constraints aren't met.
type ResourcesQueryPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesQueryPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesQueryPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesQueryPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesQueryPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesQueryPlanRequestValidationError) ErrorName() string {
	return "ResourcesQueryPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesQueryPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesQueryPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesQueryPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesQueryPlanRequestValidationError{}

// Validate checks the field values on CheckInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckInputMultiError, or
// nil if none found.
func (m *CheckInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if m.GetResource() == nil {
		err := CheckInputValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPrincipal() == nil {
		err := CheckInputValidationError{
			field:  "Principal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	_CheckInput_Actions_Unique := make(map[string]struct{}, len(m.GetActions()))

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if _, exists := _CheckInput_Actions_Unique[item]; exists {
			err := CheckInputValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CheckInput_Actions_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) < 1 {
			err := CheckInputValidationError{
				field:  fmt.Sprintf("Actions[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetAuxData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInputValidationError{
					field:  "AuxData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuxData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInputValidationError{
				field:  "AuxData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckInputMultiError(errors)
	}

	return nil
}

// CheckInputMultiError is an error wrapping multiple validation errors
// returned by CheckInput.ValidateAll() if the designated constraints aren't met.
type CheckInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckInputMultiError) AllErrors() []error { return m }

// CheckInputValidationError is the validation error returned by
// CheckInput.Validate if the designated constraints aren't met.
type CheckInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckInputValidationError) ErrorName() string { return "CheckInputValidationError" }

// Error satisfies the builtin error interface
func (e CheckInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckInputValidationError{}

// Validate checks the field values on CheckOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckOutputMultiError, or
// nil if none found.
func (m *CheckOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for ResourceId

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckOutputValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckOutputValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckOutputValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckOutputValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckOutputValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckOutputMultiError(errors)
	}

	return nil
}

// CheckOutputMultiError is an error wrapping multiple validation errors
// returned by CheckOutput.ValidateAll() if the designated constraints aren't met.
type CheckOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutputMultiError) AllErrors() []error { return m }

// CheckOutputValidationError is the validation error returned by
// CheckOutput.Validate if the designated constraints aren't met.
type CheckOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutputValidationError) ErrorName() string { return "CheckOutputValidationError" }

// Error satisfies the builtin error interface
func (e CheckOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutputValidationError{}

// Validate checks the field values on ResourcesQueryPlanOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourcesQueryPlanOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesQueryPlanOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcesQueryPlanOutputMultiError, or nil if none found.
func (m *ResourcesQueryPlanOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesQueryPlanOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Action

	// no validation rules for Kind

	// no validation rules for PolicyVersion

	// no validation rules for Scope

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcesQueryPlanOutputValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcesQueryPlanOutputValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesQueryPlanOutputValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourcesQueryPlanOutputMultiError(errors)
	}

	return nil
}

// ResourcesQueryPlanOutputMultiError is an error wrapping multiple validation
// errors returned by ResourcesQueryPlanOutput.ValidateAll() if the designated
// constraints aren't met.
type ResourcesQueryPlanOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesQueryPlanOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesQueryPlanOutputMultiError) AllErrors() []error { return m }

// ResourcesQueryPlanOutputValidationError is the validation error returned by
// ResourcesQueryPlanOutput.Validate if the designated constraints aren't met.
type ResourcesQueryPlanOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesQueryPlanOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesQueryPlanOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesQueryPlanOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesQueryPlanOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesQueryPlanOutputValidationError) ErrorName() string {
	return "ResourcesQueryPlanOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesQueryPlanOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesQueryPlanOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesQueryPlanOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesQueryPlanOutputValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ResourceValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Resource_Kind_Pattern.MatchString(m.GetKind()) {
		err := ResourceValidationError{
			field:  "Kind",
			reason: "value does not match regex pattern \"^[[:alpha:]][[:word:]\\\\@\\\\.\\\\-/]*(\\\\:[[:alpha:]][[:word:]\\\\@\\\\.\\\\-/]*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Resource_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := ResourceValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ResourceValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := ResourceValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResourceValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_Resource_Scope_Pattern.MatchString(m.GetScope()) {
		err := ResourceValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alpha:]][[:word:]\\\\-]+(\\\\.[[:alpha:]][[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

var _Resource_Kind_Pattern = regexp.MustCompile("^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$")

var _Resource_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _Resource_Scope_Pattern = regexp.MustCompile("^([[:alpha:]][[:word:]\\-]+(\\.[[:alpha:]][[:word:]\\-]*)*)*$")

// Validate checks the field values on Principal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Principal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Principal with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrincipalMultiError, or nil
// if none found.
func (m *Principal) ValidateAll() error {
	return m.validate(true)
}

func (m *Principal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PrincipalValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Principal_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := PrincipalValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetRoles()); l < 1 || l > 20 {
		err := PrincipalValidationError{
			field:  "Roles",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Principal_Roles_Unique := make(map[string]struct{}, len(m.GetRoles()))

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if _, exists := _Principal_Roles_Unique[item]; exists {
			err := PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Principal_Roles_Unique[item] = struct{}{}
		}

		if !_Principal_Roles_Pattern.MatchString(item) {
			err := PrincipalValidationError{
				field:  fmt.Sprintf("Roles[%v]", idx),
				reason: "value does not match regex pattern \"^[[:word:]\\\\-\\\\.]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := PrincipalValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PrincipalValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PrincipalValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_Principal_Scope_Pattern.MatchString(m.GetScope()) {
		err := PrincipalValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alpha:]][[:word:]\\\\-]+(\\\\.[[:alpha:]][[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrincipalMultiError(errors)
	}

	return nil
}

// PrincipalMultiError is an error wrapping multiple validation errors returned
// by Principal.ValidateAll() if the designated constraints aren't met.
type PrincipalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalMultiError) AllErrors() []error { return m }

// PrincipalValidationError is the validation error returned by
// Principal.Validate if the designated constraints aren't met.
type PrincipalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalValidationError) ErrorName() string { return "PrincipalValidationError" }

// Error satisfies the builtin error interface
func (e PrincipalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalValidationError{}

var _Principal_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _Principal_Roles_Pattern = regexp.MustCompile("^[[:word:]\\-\\.]+$")

var _Principal_Scope_Pattern = regexp.MustCompile("^([[:alpha:]][[:word:]\\-]+(\\.[[:alpha:]][[:word:]\\-]*)*)*$")

// Validate checks the field values on AuxData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuxData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuxData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuxDataMultiError, or nil if none found.
func (m *AuxData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuxData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetJwt()))
		i := 0
		for key := range m.GetJwt() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetJwt()[key]
			_ = val

			// no validation rules for Jwt[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AuxDataValidationError{
							field:  fmt.Sprintf("Jwt[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AuxDataValidationError{
							field:  fmt.Sprintf("Jwt[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AuxDataValidationError{
						field:  fmt.Sprintf("Jwt[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AuxDataMultiError(errors)
	}

	return nil
}

// AuxDataMultiError is an error wrapping multiple validation errors returned
// by AuxData.ValidateAll() if the designated constraints aren't met.
type AuxDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuxDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuxDataMultiError) AllErrors() []error { return m }

// AuxDataValidationError is the validation error returned by AuxData.Validate
// if the designated constraints aren't met.
type AuxDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuxDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuxDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuxDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuxDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuxDataValidationError) ErrorName() string { return "AuxDataValidationError" }

// Error satisfies the builtin error interface
func (e AuxDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuxData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuxDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuxDataValidationError{}

// Validate checks the field values on ResourcesQueryPlanRequest_Resource with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResourcesQueryPlanRequest_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesQueryPlanRequest_Resource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResourcesQueryPlanRequest_ResourceMultiError, or nil if none found.
func (m *ResourcesQueryPlanRequest_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesQueryPlanRequest_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ResourcesQueryPlanRequest_ResourceValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResourcesQueryPlanRequest_Resource_Kind_Pattern.MatchString(m.GetKind()) {
		err := ResourcesQueryPlanRequest_ResourceValidationError{
			field:  "Kind",
			reason: "value does not match regex pattern \"^[[:alpha:]][[:word:]\\\\@\\\\.\\\\-/]*(\\\\:[[:alpha:]][[:word:]\\\\@\\\\.\\\\-/]*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			if val == nil {
				err := ResourcesQueryPlanRequest_ResourceValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResourcesQueryPlanRequest_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResourcesQueryPlanRequest_ResourceValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResourcesQueryPlanRequest_ResourceValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if !_ResourcesQueryPlanRequest_Resource_PolicyVersion_Pattern.MatchString(m.GetPolicyVersion()) {
		err := ResourcesQueryPlanRequest_ResourceValidationError{
			field:  "PolicyVersion",
			reason: "value does not match regex pattern \"^[[:word:]]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ResourcesQueryPlanRequest_Resource_Scope_Pattern.MatchString(m.GetScope()) {
		err := ResourcesQueryPlanRequest_ResourceValidationError{
			field:  "Scope",
			reason: "value does not match regex pattern \"^([[:alpha:]][[:word:]\\\\-]+(\\\\.[[:alpha:]][[:word:]\\\\-]*)*)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourcesQueryPlanRequest_ResourceMultiError(errors)
	}

	return nil
}

// ResourcesQueryPlanRequest_ResourceMultiError is an error wrapping multiple
// validation errors returned by
// ResourcesQueryPlanRequest_Resource.ValidateAll() if the designated
// constraints aren't met.
type ResourcesQueryPlanRequest_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesQueryPlanRequest_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesQueryPlanRequest_ResourceMultiError) AllErrors() []error { return m }

// ResourcesQueryPlanRequest_ResourceValidationError is the validation error
// returned by ResourcesQueryPlanRequest_Resource.Validate if the designated
// constraints aren't met.
type ResourcesQueryPlanRequest_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesQueryPlanRequest_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesQueryPlanRequest_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesQueryPlanRequest_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesQueryPlanRequest_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesQueryPlanRequest_ResourceValidationError) ErrorName() string {
	return "ResourcesQueryPlanRequest_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesQueryPlanRequest_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesQueryPlanRequest_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesQueryPlanRequest_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesQueryPlanRequest_ResourceValidationError{}

var _ResourcesQueryPlanRequest_Resource_Kind_Pattern = regexp.MustCompile("^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$")

var _ResourcesQueryPlanRequest_Resource_PolicyVersion_Pattern = regexp.MustCompile("^[[:word:]]*$")

var _ResourcesQueryPlanRequest_Resource_Scope_Pattern = regexp.MustCompile("^([[:alpha:]][[:word:]\\-]+(\\.[[:alpha:]][[:word:]\\-]*)*)*$")

// Validate checks the field values on CheckOutput_ActionEffect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOutput_ActionEffect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutput_ActionEffect with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOutput_ActionEffectMultiError, or nil if none found.
func (m *CheckOutput_ActionEffect) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutput_ActionEffect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Effect

	// no validation rules for Policy

	// no validation rules for Scope

	if len(errors) > 0 {
		return CheckOutput_ActionEffectMultiError(errors)
	}

	return nil
}

// CheckOutput_ActionEffectMultiError is an error wrapping multiple validation
// errors returned by CheckOutput_ActionEffect.ValidateAll() if the designated
// constraints aren't met.
type CheckOutput_ActionEffectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutput_ActionEffectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutput_ActionEffectMultiError) AllErrors() []error { return m }

// CheckOutput_ActionEffectValidationError is the validation error returned by
// CheckOutput_ActionEffect.Validate if the designated constraints aren't met.
type CheckOutput_ActionEffectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutput_ActionEffectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutput_ActionEffectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutput_ActionEffectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutput_ActionEffectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutput_ActionEffectValidationError) ErrorName() string {
	return "CheckOutput_ActionEffectValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOutput_ActionEffectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutput_ActionEffect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutput_ActionEffectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutput_ActionEffectValidationError{}

// Validate checks the field values on ResourcesQueryPlanOutput_Node with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourcesQueryPlanOutput_Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesQueryPlanOutput_Node with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResourcesQueryPlanOutput_NodeMultiError, or nil if none found.
func (m *ResourcesQueryPlanOutput_Node) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesQueryPlanOutput_Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Node.(type) {

	case *ResourcesQueryPlanOutput_Node_LogicalOperation:

		if all {
			switch v := interface{}(m.GetLogicalOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_NodeValidationError{
						field:  "LogicalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_NodeValidationError{
						field:  "LogicalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogicalOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesQueryPlanOutput_NodeValidationError{
					field:  "LogicalOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ResourcesQueryPlanOutput_Node_Expression:

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_NodeValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_NodeValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesQueryPlanOutput_NodeValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourcesQueryPlanOutput_NodeMultiError(errors)
	}

	return nil
}

// ResourcesQueryPlanOutput_NodeMultiError is an error wrapping multiple
// validation errors returned by ResourcesQueryPlanOutput_Node.ValidateAll()
// if the designated constraints aren't met.
type ResourcesQueryPlanOutput_NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesQueryPlanOutput_NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesQueryPlanOutput_NodeMultiError) AllErrors() []error { return m }

// ResourcesQueryPlanOutput_NodeValidationError is the validation error
// returned by ResourcesQueryPlanOutput_Node.Validate if the designated
// constraints aren't met.
type ResourcesQueryPlanOutput_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesQueryPlanOutput_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesQueryPlanOutput_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesQueryPlanOutput_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesQueryPlanOutput_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesQueryPlanOutput_NodeValidationError) ErrorName() string {
	return "ResourcesQueryPlanOutput_NodeValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesQueryPlanOutput_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesQueryPlanOutput_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesQueryPlanOutput_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesQueryPlanOutput_NodeValidationError{}

// Validate checks the field values on
// ResourcesQueryPlanOutput_LogicalOperation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourcesQueryPlanOutput_LogicalOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResourcesQueryPlanOutput_LogicalOperation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ResourcesQueryPlanOutput_LogicalOperationMultiError, or nil if none found.
func (m *ResourcesQueryPlanOutput_LogicalOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesQueryPlanOutput_LogicalOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_LogicalOperationValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesQueryPlanOutput_LogicalOperationValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesQueryPlanOutput_LogicalOperationValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourcesQueryPlanOutput_LogicalOperationMultiError(errors)
	}

	return nil
}

// ResourcesQueryPlanOutput_LogicalOperationMultiError is an error wrapping
// multiple validation errors returned by
// ResourcesQueryPlanOutput_LogicalOperation.ValidateAll() if the designated
// constraints aren't met.
type ResourcesQueryPlanOutput_LogicalOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesQueryPlanOutput_LogicalOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesQueryPlanOutput_LogicalOperationMultiError) AllErrors() []error { return m }

// ResourcesQueryPlanOutput_LogicalOperationValidationError is the validation
// error returned by ResourcesQueryPlanOutput_LogicalOperation.Validate if the
// designated constraints aren't met.
type ResourcesQueryPlanOutput_LogicalOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) ErrorName() string {
	return "ResourcesQueryPlanOutput_LogicalOperationValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesQueryPlanOutput_LogicalOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesQueryPlanOutput_LogicalOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesQueryPlanOutput_LogicalOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesQueryPlanOutput_LogicalOperationValidationError{}
