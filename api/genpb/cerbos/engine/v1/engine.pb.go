// Copyright 2021-2023 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: cerbos/engine/v1/engine.proto

package enginev1

import (
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/schema/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanResourcesAst_LogicalOperation_Operator int32

const (
	PlanResourcesAst_LogicalOperation_OPERATOR_UNSPECIFIED PlanResourcesAst_LogicalOperation_Operator = 0
	PlanResourcesAst_LogicalOperation_OPERATOR_AND         PlanResourcesAst_LogicalOperation_Operator = 1
	PlanResourcesAst_LogicalOperation_OPERATOR_OR          PlanResourcesAst_LogicalOperation_Operator = 2
	PlanResourcesAst_LogicalOperation_OPERATOR_NOT         PlanResourcesAst_LogicalOperation_Operator = 3
)

// Enum value maps for PlanResourcesAst_LogicalOperation_Operator.
var (
	PlanResourcesAst_LogicalOperation_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_AND",
		2: "OPERATOR_OR",
		3: "OPERATOR_NOT",
	}
	PlanResourcesAst_LogicalOperation_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_AND":         1,
		"OPERATOR_OR":          2,
		"OPERATOR_NOT":         3,
	}
)

func (x PlanResourcesAst_LogicalOperation_Operator) Enum() *PlanResourcesAst_LogicalOperation_Operator {
	p := new(PlanResourcesAst_LogicalOperation_Operator)
	*p = x
	return p
}

func (x PlanResourcesAst_LogicalOperation_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanResourcesAst_LogicalOperation_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_engine_v1_engine_proto_enumTypes[0].Descriptor()
}

func (PlanResourcesAst_LogicalOperation_Operator) Type() protoreflect.EnumType {
	return &file_cerbos_engine_v1_engine_proto_enumTypes[0]
}

func (x PlanResourcesAst_LogicalOperation_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanResourcesAst_LogicalOperation_Operator.Descriptor instead.
func (PlanResourcesAst_LogicalOperation_Operator) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{1, 1, 0}
}

type PlanResourcesFilter_Kind int32

const (
	PlanResourcesFilter_KIND_UNSPECIFIED    PlanResourcesFilter_Kind = 0
	PlanResourcesFilter_KIND_ALWAYS_ALLOWED PlanResourcesFilter_Kind = 1
	PlanResourcesFilter_KIND_ALWAYS_DENIED  PlanResourcesFilter_Kind = 2
	PlanResourcesFilter_KIND_CONDITIONAL    PlanResourcesFilter_Kind = 3
)

// Enum value maps for PlanResourcesFilter_Kind.
var (
	PlanResourcesFilter_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_ALWAYS_ALLOWED",
		2: "KIND_ALWAYS_DENIED",
		3: "KIND_CONDITIONAL",
	}
	PlanResourcesFilter_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":    0,
		"KIND_ALWAYS_ALLOWED": 1,
		"KIND_ALWAYS_DENIED":  2,
		"KIND_CONDITIONAL":    3,
	}
)

func (x PlanResourcesFilter_Kind) Enum() *PlanResourcesFilter_Kind {
	p := new(PlanResourcesFilter_Kind)
	*p = x
	return p
}

func (x PlanResourcesFilter_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanResourcesFilter_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_engine_v1_engine_proto_enumTypes[1].Descriptor()
}

func (PlanResourcesFilter_Kind) Type() protoreflect.EnumType {
	return &file_cerbos_engine_v1_engine_proto_enumTypes[1]
}

func (x PlanResourcesFilter_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanResourcesFilter_Kind.Descriptor instead.
func (PlanResourcesFilter_Kind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{2, 0}
}

type Trace_Component_Kind int32

const (
	Trace_Component_KIND_UNSPECIFIED    Trace_Component_Kind = 0
	Trace_Component_KIND_ACTION         Trace_Component_Kind = 1
	Trace_Component_KIND_CONDITION_ALL  Trace_Component_Kind = 2
	Trace_Component_KIND_CONDITION_ANY  Trace_Component_Kind = 3
	Trace_Component_KIND_CONDITION_NONE Trace_Component_Kind = 4
	Trace_Component_KIND_CONDITION      Trace_Component_Kind = 5
	Trace_Component_KIND_DERIVED_ROLE   Trace_Component_Kind = 6
	Trace_Component_KIND_EXPR           Trace_Component_Kind = 7
	Trace_Component_KIND_POLICY         Trace_Component_Kind = 8
	Trace_Component_KIND_RESOURCE       Trace_Component_Kind = 9
	Trace_Component_KIND_RULE           Trace_Component_Kind = 10
	Trace_Component_KIND_SCOPE          Trace_Component_Kind = 11
	Trace_Component_KIND_VARIABLE       Trace_Component_Kind = 12
	Trace_Component_KIND_VARIABLES      Trace_Component_Kind = 13
)

// Enum value maps for Trace_Component_Kind.
var (
	Trace_Component_Kind_name = map[int32]string{
		0:  "KIND_UNSPECIFIED",
		1:  "KIND_ACTION",
		2:  "KIND_CONDITION_ALL",
		3:  "KIND_CONDITION_ANY",
		4:  "KIND_CONDITION_NONE",
		5:  "KIND_CONDITION",
		6:  "KIND_DERIVED_ROLE",
		7:  "KIND_EXPR",
		8:  "KIND_POLICY",
		9:  "KIND_RESOURCE",
		10: "KIND_RULE",
		11: "KIND_SCOPE",
		12: "KIND_VARIABLE",
		13: "KIND_VARIABLES",
	}
	Trace_Component_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":    0,
		"KIND_ACTION":         1,
		"KIND_CONDITION_ALL":  2,
		"KIND_CONDITION_ANY":  3,
		"KIND_CONDITION_NONE": 4,
		"KIND_CONDITION":      5,
		"KIND_DERIVED_ROLE":   6,
		"KIND_EXPR":           7,
		"KIND_POLICY":         8,
		"KIND_RESOURCE":       9,
		"KIND_RULE":           10,
		"KIND_SCOPE":          11,
		"KIND_VARIABLE":       12,
		"KIND_VARIABLES":      13,
	}
)

func (x Trace_Component_Kind) Enum() *Trace_Component_Kind {
	p := new(Trace_Component_Kind)
	*p = x
	return p
}

func (x Trace_Component_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_Component_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_engine_v1_engine_proto_enumTypes[2].Descriptor()
}

func (Trace_Component_Kind) Type() protoreflect.EnumType {
	return &file_cerbos_engine_v1_engine_proto_enumTypes[2]
}

func (x Trace_Component_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_Component_Kind.Descriptor instead.
func (Trace_Component_Kind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9, 0, 0}
}

type Trace_Event_Status int32

const (
	Trace_Event_STATUS_UNSPECIFIED Trace_Event_Status = 0
	Trace_Event_STATUS_ACTIVATED   Trace_Event_Status = 1
	Trace_Event_STATUS_SKIPPED     Trace_Event_Status = 2
)

// Enum value maps for Trace_Event_Status.
var (
	Trace_Event_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVATED",
		2: "STATUS_SKIPPED",
	}
	Trace_Event_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ACTIVATED":   1,
		"STATUS_SKIPPED":     2,
	}
)

func (x Trace_Event_Status) Enum() *Trace_Event_Status {
	p := new(Trace_Event_Status)
	*p = x
	return p
}

func (x Trace_Event_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_Event_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_engine_v1_engine_proto_enumTypes[3].Descriptor()
}

func (Trace_Event_Status) Type() protoreflect.EnumType {
	return &file_cerbos_engine_v1_engine_proto_enumTypes[3]
}

func (x Trace_Event_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_Event_Status.Descriptor instead.
func (Trace_Event_Status) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9, 1, 0}
}

type PlanResourcesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string                       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Action      string                       `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Principal   *Principal                   `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Resource    *PlanResourcesInput_Resource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	AuxData     *AuxData                     `protobuf:"bytes,5,opt,name=aux_data,json=auxData,proto3" json:"aux_data,omitempty"`
	IncludeMeta bool                         `protobuf:"varint,6,opt,name=include_meta,json=includeMeta,proto3" json:"include_meta,omitempty"`
}

func (x *PlanResourcesInput) Reset() {
	*x = PlanResourcesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesInput) ProtoMessage() {}

func (x *PlanResourcesInput) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesInput.ProtoReflect.Descriptor instead.
func (*PlanResourcesInput) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{0}
}

func (x *PlanResourcesInput) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PlanResourcesInput) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlanResourcesInput) GetPrincipal() *Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *PlanResourcesInput) GetResource() *PlanResourcesInput_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PlanResourcesInput) GetAuxData() *AuxData {
	if x != nil {
		return x.AuxData
	}
	return nil
}

func (x *PlanResourcesInput) GetIncludeMeta() bool {
	if x != nil {
		return x.IncludeMeta
	}
	return false
}

type PlanResourcesAst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterAst *PlanResourcesAst_Node `protobuf:"bytes,1,opt,name=filter_ast,json=filterAst,proto3" json:"filter_ast,omitempty"`
}

func (x *PlanResourcesAst) Reset() {
	*x = PlanResourcesAst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesAst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesAst) ProtoMessage() {}

func (x *PlanResourcesAst) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesAst.ProtoReflect.Descriptor instead.
func (*PlanResourcesAst) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{1}
}

func (x *PlanResourcesAst) GetFilterAst() *PlanResourcesAst_Node {
	if x != nil {
		return x.FilterAst
	}
	return nil
}

type PlanResourcesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      PlanResourcesFilter_Kind                `protobuf:"varint,1,opt,name=kind,proto3,enum=cerbos.engine.v1.PlanResourcesFilter_Kind" json:"kind,omitempty"`
	Condition *PlanResourcesFilter_Expression_Operand `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *PlanResourcesFilter) Reset() {
	*x = PlanResourcesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesFilter) ProtoMessage() {}

func (x *PlanResourcesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesFilter.ProtoReflect.Descriptor instead.
func (*PlanResourcesFilter) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{2}
}

func (x *PlanResourcesFilter) GetKind() PlanResourcesFilter_Kind {
	if x != nil {
		return x.Kind
	}
	return PlanResourcesFilter_KIND_UNSPECIFIED
}

func (x *PlanResourcesFilter) GetCondition() *PlanResourcesFilter_Expression_Operand {
	if x != nil {
		return x.Condition
	}
	return nil
}

type PlanResourcesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string                `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Action           string                `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Kind             string                `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	PolicyVersion    string                `protobuf:"bytes,4,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Scope            string                `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Filter           *PlanResourcesFilter  `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterDebug      string                `protobuf:"bytes,7,opt,name=filter_debug,json=filterDebug,proto3" json:"filter_debug,omitempty"`
	ValidationErrors []*v1.ValidationError `protobuf:"bytes,8,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *PlanResourcesOutput) Reset() {
	*x = PlanResourcesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesOutput) ProtoMessage() {}

func (x *PlanResourcesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesOutput.ProtoReflect.Descriptor instead.
func (*PlanResourcesOutput) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{3}
}

func (x *PlanResourcesOutput) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PlanResourcesOutput) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlanResourcesOutput) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PlanResourcesOutput) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *PlanResourcesOutput) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PlanResourcesOutput) GetFilter() *PlanResourcesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PlanResourcesOutput) GetFilterDebug() string {
	if x != nil {
		return x.FilterDebug
	}
	return ""
}

func (x *PlanResourcesOutput) GetValidationErrors() []*v1.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type CheckInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string     `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Resource  *Resource  `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Principal *Principal `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Actions   []string   `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	AuxData   *AuxData   `protobuf:"bytes,5,opt,name=aux_data,json=auxData,proto3" json:"aux_data,omitempty"`
}

func (x *CheckInput) Reset() {
	*x = CheckInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInput) ProtoMessage() {}

func (x *CheckInput) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInput.ProtoReflect.Descriptor instead.
func (*CheckInput) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{4}
}

func (x *CheckInput) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckInput) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CheckInput) GetPrincipal() *Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *CheckInput) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckInput) GetAuxData() *AuxData {
	if x != nil {
		return x.AuxData
	}
	return nil
}

type CheckOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId             string                               `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResourceId            string                               `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Actions               map[string]*CheckOutput_ActionEffect `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EffectiveDerivedRoles []string                             `protobuf:"bytes,4,rep,name=effective_derived_roles,json=effectiveDerivedRoles,proto3" json:"effective_derived_roles,omitempty"`
	ValidationErrors      []*v1.ValidationError                `protobuf:"bytes,5,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *CheckOutput) Reset() {
	*x = CheckOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOutput) ProtoMessage() {}

func (x *CheckOutput) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOutput.ProtoReflect.Descriptor instead.
func (*CheckOutput) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{5}
}

func (x *CheckOutput) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckOutput) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CheckOutput) GetActions() map[string]*CheckOutput_ActionEffect {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckOutput) GetEffectiveDerivedRoles() []string {
	if x != nil {
		return x.EffectiveDerivedRoles
	}
	return nil
}

func (x *CheckOutput) GetValidationErrors() []*v1.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string                     `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	PolicyVersion string                     `protobuf:"bytes,2,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Id            string                     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Attr          map[string]*structpb.Value `protobuf:"bytes,4,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope         string                     `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{6}
}

func (x *Resource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Resource) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetAttr() map[string]*structpb.Value {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *Resource) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type Principal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyVersion string                     `protobuf:"bytes,2,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Roles         []string                   `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Attr          map[string]*structpb.Value `protobuf:"bytes,4,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scope         string                     `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *Principal) Reset() {
	*x = Principal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{7}
}

func (x *Principal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Principal) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *Principal) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Principal) GetAttr() map[string]*structpb.Value {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *Principal) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type AuxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt map[string]*structpb.Value `protobuf:"bytes,1,rep,name=jwt,proto3" json:"jwt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuxData) Reset() {
	*x = AuxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxData) ProtoMessage() {}

func (x *AuxData) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxData.ProtoReflect.Descriptor instead.
func (*AuxData) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{8}
}

func (x *AuxData) GetJwt() map[string]*structpb.Value {
	if x != nil {
		return x.Jwt
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components []*Trace_Component `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	Event      *Trace_Event       `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9}
}

func (x *Trace) GetComponents() []*Trace_Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Trace) GetEvent() *Trace_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type PlanResourcesInput_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string                     `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Attr          map[string]*structpb.Value `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PolicyVersion string                     `protobuf:"bytes,3,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Scope         string                     `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *PlanResourcesInput_Resource) Reset() {
	*x = PlanResourcesInput_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesInput_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesInput_Resource) ProtoMessage() {}

func (x *PlanResourcesInput_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesInput_Resource.ProtoReflect.Descriptor instead.
func (*PlanResourcesInput_Resource) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PlanResourcesInput_Resource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PlanResourcesInput_Resource) GetAttr() map[string]*structpb.Value {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *PlanResourcesInput_Resource) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *PlanResourcesInput_Resource) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type PlanResourcesAst_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//
	//	*PlanResourcesAst_Node_LogicalOperation
	//	*PlanResourcesAst_Node_Expression
	Node isPlanResourcesAst_Node_Node `protobuf_oneof:"node"`
}

func (x *PlanResourcesAst_Node) Reset() {
	*x = PlanResourcesAst_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesAst_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesAst_Node) ProtoMessage() {}

func (x *PlanResourcesAst_Node) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesAst_Node.ProtoReflect.Descriptor instead.
func (*PlanResourcesAst_Node) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{1, 0}
}

func (m *PlanResourcesAst_Node) GetNode() isPlanResourcesAst_Node_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *PlanResourcesAst_Node) GetLogicalOperation() *PlanResourcesAst_LogicalOperation {
	if x, ok := x.GetNode().(*PlanResourcesAst_Node_LogicalOperation); ok {
		return x.LogicalOperation
	}
	return nil
}

func (x *PlanResourcesAst_Node) GetExpression() *v1alpha1.CheckedExpr {
	if x, ok := x.GetNode().(*PlanResourcesAst_Node_Expression); ok {
		return x.Expression
	}
	return nil
}

type isPlanResourcesAst_Node_Node interface {
	isPlanResourcesAst_Node_Node()
}

type PlanResourcesAst_Node_LogicalOperation struct {
	LogicalOperation *PlanResourcesAst_LogicalOperation `protobuf:"bytes,1,opt,name=logical_operation,json=logicalOperation,proto3,oneof"`
}

type PlanResourcesAst_Node_Expression struct {
	Expression *v1alpha1.CheckedExpr `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

func (*PlanResourcesAst_Node_LogicalOperation) isPlanResourcesAst_Node_Node() {}

func (*PlanResourcesAst_Node_Expression) isPlanResourcesAst_Node_Node() {}

type PlanResourcesAst_LogicalOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator PlanResourcesAst_LogicalOperation_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=cerbos.engine.v1.PlanResourcesAst_LogicalOperation_Operator" json:"operator,omitempty"`
	Nodes    []*PlanResourcesAst_Node                   `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *PlanResourcesAst_LogicalOperation) Reset() {
	*x = PlanResourcesAst_LogicalOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesAst_LogicalOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesAst_LogicalOperation) ProtoMessage() {}

func (x *PlanResourcesAst_LogicalOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesAst_LogicalOperation.ProtoReflect.Descriptor instead.
func (*PlanResourcesAst_LogicalOperation) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PlanResourcesAst_LogicalOperation) GetOperator() PlanResourcesAst_LogicalOperation_Operator {
	if x != nil {
		return x.Operator
	}
	return PlanResourcesAst_LogicalOperation_OPERATOR_UNSPECIFIED
}

func (x *PlanResourcesAst_LogicalOperation) GetNodes() []*PlanResourcesAst_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PlanResourcesFilter_Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string                                    `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Operands []*PlanResourcesFilter_Expression_Operand `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *PlanResourcesFilter_Expression) Reset() {
	*x = PlanResourcesFilter_Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesFilter_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesFilter_Expression) ProtoMessage() {}

func (x *PlanResourcesFilter_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesFilter_Expression.ProtoReflect.Descriptor instead.
func (*PlanResourcesFilter_Expression) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PlanResourcesFilter_Expression) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PlanResourcesFilter_Expression) GetOperands() []*PlanResourcesFilter_Expression_Operand {
	if x != nil {
		return x.Operands
	}
	return nil
}

type PlanResourcesFilter_Expression_Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//
	//	*PlanResourcesFilter_Expression_Operand_Value
	//	*PlanResourcesFilter_Expression_Operand_Expression
	//	*PlanResourcesFilter_Expression_Operand_Variable
	Node isPlanResourcesFilter_Expression_Operand_Node `protobuf_oneof:"node"`
}

func (x *PlanResourcesFilter_Expression_Operand) Reset() {
	*x = PlanResourcesFilter_Expression_Operand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesFilter_Expression_Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesFilter_Expression_Operand) ProtoMessage() {}

func (x *PlanResourcesFilter_Expression_Operand) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesFilter_Expression_Operand.ProtoReflect.Descriptor instead.
func (*PlanResourcesFilter_Expression_Operand) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (m *PlanResourcesFilter_Expression_Operand) GetNode() isPlanResourcesFilter_Expression_Operand_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *PlanResourcesFilter_Expression_Operand) GetValue() *structpb.Value {
	if x, ok := x.GetNode().(*PlanResourcesFilter_Expression_Operand_Value); ok {
		return x.Value
	}
	return nil
}

func (x *PlanResourcesFilter_Expression_Operand) GetExpression() *PlanResourcesFilter_Expression {
	if x, ok := x.GetNode().(*PlanResourcesFilter_Expression_Operand_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *PlanResourcesFilter_Expression_Operand) GetVariable() string {
	if x, ok := x.GetNode().(*PlanResourcesFilter_Expression_Operand_Variable); ok {
		return x.Variable
	}
	return ""
}

type isPlanResourcesFilter_Expression_Operand_Node interface {
	isPlanResourcesFilter_Expression_Operand_Node()
}

type PlanResourcesFilter_Expression_Operand_Value struct {
	Value *structpb.Value `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type PlanResourcesFilter_Expression_Operand_Expression struct {
	Expression *PlanResourcesFilter_Expression `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

type PlanResourcesFilter_Expression_Operand_Variable struct {
	Variable string `protobuf:"bytes,3,opt,name=variable,proto3,oneof"`
}

func (*PlanResourcesFilter_Expression_Operand_Value) isPlanResourcesFilter_Expression_Operand_Node() {
}

func (*PlanResourcesFilter_Expression_Operand_Expression) isPlanResourcesFilter_Expression_Operand_Node() {
}

func (*PlanResourcesFilter_Expression_Operand_Variable) isPlanResourcesFilter_Expression_Operand_Node() {
}

type CheckOutput_ActionEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effect v11.Effect `protobuf:"varint,1,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Policy string     `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Scope  string     `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *CheckOutput_ActionEffect) Reset() {
	*x = CheckOutput_ActionEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOutput_ActionEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOutput_ActionEffect) ProtoMessage() {}

func (x *CheckOutput_ActionEffect) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOutput_ActionEffect.ProtoReflect.Descriptor instead.
func (*CheckOutput_ActionEffect) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CheckOutput_ActionEffect) GetEffect() v11.Effect {
	if x != nil {
		return x.Effect
	}
	return v11.Effect(0)
}

func (x *CheckOutput_ActionEffect) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *CheckOutput_ActionEffect) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type Trace_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind Trace_Component_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=cerbos.engine.v1.Trace_Component_Kind" json:"kind,omitempty"`
	// Types that are assignable to Details:
	//
	//	*Trace_Component_Action
	//	*Trace_Component_DerivedRole
	//	*Trace_Component_Expr
	//	*Trace_Component_Index
	//	*Trace_Component_Policy
	//	*Trace_Component_Resource
	//	*Trace_Component_Rule
	//	*Trace_Component_Scope
	//	*Trace_Component_Variable_
	Details isTrace_Component_Details `protobuf_oneof:"details"`
}

func (x *Trace_Component) Reset() {
	*x = Trace_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace_Component) ProtoMessage() {}

func (x *Trace_Component) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace_Component.ProtoReflect.Descriptor instead.
func (*Trace_Component) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Trace_Component) GetKind() Trace_Component_Kind {
	if x != nil {
		return x.Kind
	}
	return Trace_Component_KIND_UNSPECIFIED
}

func (m *Trace_Component) GetDetails() isTrace_Component_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Trace_Component) GetAction() string {
	if x, ok := x.GetDetails().(*Trace_Component_Action); ok {
		return x.Action
	}
	return ""
}

func (x *Trace_Component) GetDerivedRole() string {
	if x, ok := x.GetDetails().(*Trace_Component_DerivedRole); ok {
		return x.DerivedRole
	}
	return ""
}

func (x *Trace_Component) GetExpr() string {
	if x, ok := x.GetDetails().(*Trace_Component_Expr); ok {
		return x.Expr
	}
	return ""
}

func (x *Trace_Component) GetIndex() uint32 {
	if x, ok := x.GetDetails().(*Trace_Component_Index); ok {
		return x.Index
	}
	return 0
}

func (x *Trace_Component) GetPolicy() string {
	if x, ok := x.GetDetails().(*Trace_Component_Policy); ok {
		return x.Policy
	}
	return ""
}

func (x *Trace_Component) GetResource() string {
	if x, ok := x.GetDetails().(*Trace_Component_Resource); ok {
		return x.Resource
	}
	return ""
}

func (x *Trace_Component) GetRule() string {
	if x, ok := x.GetDetails().(*Trace_Component_Rule); ok {
		return x.Rule
	}
	return ""
}

func (x *Trace_Component) GetScope() string {
	if x, ok := x.GetDetails().(*Trace_Component_Scope); ok {
		return x.Scope
	}
	return ""
}

func (x *Trace_Component) GetVariable() *Trace_Component_Variable {
	if x, ok := x.GetDetails().(*Trace_Component_Variable_); ok {
		return x.Variable
	}
	return nil
}

type isTrace_Component_Details interface {
	isTrace_Component_Details()
}

type Trace_Component_Action struct {
	Action string `protobuf:"bytes,2,opt,name=action,proto3,oneof"`
}

type Trace_Component_DerivedRole struct {
	DerivedRole string `protobuf:"bytes,3,opt,name=derived_role,json=derivedRole,proto3,oneof"`
}

type Trace_Component_Expr struct {
	Expr string `protobuf:"bytes,4,opt,name=expr,proto3,oneof"`
}

type Trace_Component_Index struct {
	Index uint32 `protobuf:"varint,5,opt,name=index,proto3,oneof"`
}

type Trace_Component_Policy struct {
	Policy string `protobuf:"bytes,6,opt,name=policy,proto3,oneof"`
}

type Trace_Component_Resource struct {
	Resource string `protobuf:"bytes,7,opt,name=resource,proto3,oneof"`
}

type Trace_Component_Rule struct {
	Rule string `protobuf:"bytes,8,opt,name=rule,proto3,oneof"`
}

type Trace_Component_Scope struct {
	Scope string `protobuf:"bytes,9,opt,name=scope,proto3,oneof"`
}

type Trace_Component_Variable_ struct {
	Variable *Trace_Component_Variable `protobuf:"bytes,10,opt,name=variable,proto3,oneof"`
}

func (*Trace_Component_Action) isTrace_Component_Details() {}

func (*Trace_Component_DerivedRole) isTrace_Component_Details() {}

func (*Trace_Component_Expr) isTrace_Component_Details() {}

func (*Trace_Component_Index) isTrace_Component_Details() {}

func (*Trace_Component_Policy) isTrace_Component_Details() {}

func (*Trace_Component_Resource) isTrace_Component_Details() {}

func (*Trace_Component_Rule) isTrace_Component_Details() {}

func (*Trace_Component_Scope) isTrace_Component_Details() {}

func (*Trace_Component_Variable_) isTrace_Component_Details() {}

type Trace_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Trace_Event_Status `protobuf:"varint,1,opt,name=status,proto3,enum=cerbos.engine.v1.Trace_Event_Status" json:"status,omitempty"`
	Effect  v11.Effect         `protobuf:"varint,2,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Error   string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Message string             `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Result  *structpb.Value    `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Trace_Event) Reset() {
	*x = Trace_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace_Event) ProtoMessage() {}

func (x *Trace_Event) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace_Event.ProtoReflect.Descriptor instead.
func (*Trace_Event) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Trace_Event) GetStatus() Trace_Event_Status {
	if x != nil {
		return x.Status
	}
	return Trace_Event_STATUS_UNSPECIFIED
}

func (x *Trace_Event) GetEffect() v11.Effect {
	if x != nil {
		return x.Effect
	}
	return v11.Effect(0)
}

func (x *Trace_Event) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Trace_Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Trace_Event) GetResult() *structpb.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

type Trace_Component_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Trace_Component_Variable) Reset() {
	*x = Trace_Component_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_engine_v1_engine_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace_Component_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace_Component_Variable) ProtoMessage() {}

func (x *Trace_Component_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_engine_v1_engine_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace_Component_Variable.ProtoReflect.Descriptor instead.
func (*Trace_Component_Variable) Descriptor() ([]byte, []int) {
	return file_cerbos_engine_v1_engine_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *Trace_Component_Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trace_Component_Variable) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

var File_cerbos_engine_v1_engine_proto protoreflect.FileDescriptor

var file_cerbos_engine_v1_engine_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf7, 0x09, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x61, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0xca, 0x07, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb3, 0x01, 0x92, 0x41, 0x62, 0x32, 0x0e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x4a, 0x0e,
	0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8a, 0x01,
	0x3f, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a,
	0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c,
	0x3a, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x24,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x47, 0x72, 0x45, 0x10, 0x01, 0x32, 0x41, 0x5e, 0x5b, 0x5b,
	0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x2f, 0x5d, 0x2a, 0x28, 0x5c, 0x3a, 0x5b, 0x5b,
	0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x2f, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6b, 0x92, 0x41,
	0x60, 0x32, 0x5e, 0x4b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0xdd, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb5, 0x01, 0x92, 0x41, 0x99, 0x01, 0x32,
	0x7c, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x22,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x11, 0x72,
	0x0f, 0x32, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24,
	0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x86, 0x02, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xef, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x32, 0x7d, 0x41, 0x20, 0x64, 0x6f, 0x74, 0x2d, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x20, 0x74, 0x6f, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x8a, 0x01, 0x2f, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e,
	0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d,
	0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d,
	0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x33, 0x72, 0x31,
	0x32, 0x2f, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a,
	0x24, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x04, 0x0a, 0x10, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x41, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x73, 0x74, 0x1a, 0xbb, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x62, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x86, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x41, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x59, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x22, 0xa4, 0x06,
	0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6b, 0x69,
	0x6e, 0x64, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x2e, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79,
	0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x6b, 0x69,
	0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x2e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xda, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x0a, 0x10, 0x32,
	0x0e, 0x43, 0x45, 0x4c, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x63, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41,
	0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x03, 0x22, 0xcf, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x4e, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x12, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x0b, 0x92, 0x01, 0x08,
	0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x61, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x6e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x66, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x08,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcd, 0x01, 0x92, 0x41, 0x7c, 0x32,
	0x29, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x4a, 0x0d, 0x22, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x3a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x3f, 0x5e, 0x5b, 0x5b, 0x3a,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a,
	0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x3a, 0x5b, 0x5b, 0x3a, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d,
	0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x42, 0x47, 0x72, 0x45, 0x10, 0x01, 0x32, 0x41, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c,
	0x2e, 0x5c, 0x2d, 0x2f, 0x5d, 0x2a, 0x28, 0x5c, 0x3a, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c,
	0x2e, 0x5c, 0x2d, 0x2f, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0xdd, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb5, 0x01, 0x92, 0x41, 0x99, 0x01, 0x32,
	0x7c, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x22,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x11, 0x72,
	0x0f, 0x32, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24,
	0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x26,
	0x32, 0x1b, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x07, 0x22,
	0x58, 0x58, 0x31, 0x32, 0x35, 0x22, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x8a, 0x01, 0x92, 0x41, 0x7f,
	0x32, 0x64, 0x4b, 0x61, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x17, 0x7b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x3a, 0x20, 0x22, 0x62, 0x75, 0x67, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x22, 0x7d, 0xfa,
	0x42, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x93, 0x02,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xfc, 0x01,
	0x92, 0x41, 0xbe, 0x01, 0x32, 0x7d, 0x41, 0x20, 0x64, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74,
	0x6f, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4a, 0x0b, 0x22, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x70, 0x22,
	0x8a, 0x01, 0x2f, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d,
	0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e,
	0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29,
	0x2a, 0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x33, 0x72, 0x31, 0x32, 0x2f, 0x5e, 0x28, 0x5b,
	0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72,
	0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72,
	0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x08, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x41, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0x92, 0x41, 0x23, 0x32, 0x13, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x4a, 0x0c, 0x22, 0x62, 0x75, 0x67, 0x73, 0x5f,
	0x62, 0x75, 0x6e, 0x6e, 0x79, 0x22, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0xdd, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb5,
	0x01, 0x92, 0x41, 0x99, 0x01, 0x32, 0x7c, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01,
	0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0xe2, 0x41,
	0x01, 0x01, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72,
	0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x94, 0x01, 0x92, 0x41, 0x6c, 0x32, 0x46, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4a, 0x08, 0x5b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x5d, 0x8a, 0x01, 0x11,
	0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b,
	0x24, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x1e, 0x92, 0x01,
	0x1b, 0x08, 0x01, 0x18, 0x01, 0x22, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x89, 0x01, 0x92, 0x41, 0x7e, 0x32,
	0x65, 0x4b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x15, 0x7b, 0x22, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x7d, 0xfa, 0x42, 0x05,
	0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x94, 0x02, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0xfd, 0x01, 0x92, 0x41,
	0xbf, 0x01, 0x32, 0x7e, 0x41, 0x20, 0x64, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f,
	0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4a, 0x0b, 0x22, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x70, 0x22, 0x8a,
	0x01, 0x2f, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a,
	0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x33, 0x72, 0x31, 0x32, 0x2f, 0x5e, 0x28, 0x5b, 0x5b,
	0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x32, 0x52, 0x41, 0x20, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x22, 0xb1,
	0x01, 0x0a, 0x07, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x03, 0x6a, 0x77,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4a, 0x77, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6a, 0x77, 0x74,
	0x1a, 0x4e, 0x0a, 0x08, 0x4a, 0x77, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x20, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xe8, 0x08, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0xc0, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x32, 0x0a, 0x08, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x9a, 0x02, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x52,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x0d, 0x42, 0x09, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xa3, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x42, 0x6f, 0x0a,
	0x18, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x76, 0x31, 0xaa, 0x02, 0x14, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_engine_v1_engine_proto_rawDescOnce sync.Once
	file_cerbos_engine_v1_engine_proto_rawDescData = file_cerbos_engine_v1_engine_proto_rawDesc
)

func file_cerbos_engine_v1_engine_proto_rawDescGZIP() []byte {
	file_cerbos_engine_v1_engine_proto_rawDescOnce.Do(func() {
		file_cerbos_engine_v1_engine_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_engine_v1_engine_proto_rawDescData)
	})
	return file_cerbos_engine_v1_engine_proto_rawDescData
}

var file_cerbos_engine_v1_engine_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cerbos_engine_v1_engine_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_cerbos_engine_v1_engine_proto_goTypes = []interface{}{
	(PlanResourcesAst_LogicalOperation_Operator)(0), // 0: cerbos.engine.v1.PlanResourcesAst.LogicalOperation.Operator
	(PlanResourcesFilter_Kind)(0),                   // 1: cerbos.engine.v1.PlanResourcesFilter.Kind
	(Trace_Component_Kind)(0),                       // 2: cerbos.engine.v1.Trace.Component.Kind
	(Trace_Event_Status)(0),                         // 3: cerbos.engine.v1.Trace.Event.Status
	(*PlanResourcesInput)(nil),                      // 4: cerbos.engine.v1.PlanResourcesInput
	(*PlanResourcesAst)(nil),                        // 5: cerbos.engine.v1.PlanResourcesAst
	(*PlanResourcesFilter)(nil),                     // 6: cerbos.engine.v1.PlanResourcesFilter
	(*PlanResourcesOutput)(nil),                     // 7: cerbos.engine.v1.PlanResourcesOutput
	(*CheckInput)(nil),                              // 8: cerbos.engine.v1.CheckInput
	(*CheckOutput)(nil),                             // 9: cerbos.engine.v1.CheckOutput
	(*Resource)(nil),                                // 10: cerbos.engine.v1.Resource
	(*Principal)(nil),                               // 11: cerbos.engine.v1.Principal
	(*AuxData)(nil),                                 // 12: cerbos.engine.v1.AuxData
	(*Trace)(nil),                                   // 13: cerbos.engine.v1.Trace
	(*PlanResourcesInput_Resource)(nil),             // 14: cerbos.engine.v1.PlanResourcesInput.Resource
	nil,                                             // 15: cerbos.engine.v1.PlanResourcesInput.Resource.AttrEntry
	(*PlanResourcesAst_Node)(nil),                   // 16: cerbos.engine.v1.PlanResourcesAst.Node
	(*PlanResourcesAst_LogicalOperation)(nil),       // 17: cerbos.engine.v1.PlanResourcesAst.LogicalOperation
	(*PlanResourcesFilter_Expression)(nil),          // 18: cerbos.engine.v1.PlanResourcesFilter.Expression
	(*PlanResourcesFilter_Expression_Operand)(nil),  // 19: cerbos.engine.v1.PlanResourcesFilter.Expression.Operand
	(*CheckOutput_ActionEffect)(nil),                // 20: cerbos.engine.v1.CheckOutput.ActionEffect
	nil,                                             // 21: cerbos.engine.v1.CheckOutput.ActionsEntry
	nil,                                             // 22: cerbos.engine.v1.Resource.AttrEntry
	nil,                                             // 23: cerbos.engine.v1.Principal.AttrEntry
	nil,                                             // 24: cerbos.engine.v1.AuxData.JwtEntry
	(*Trace_Component)(nil),                         // 25: cerbos.engine.v1.Trace.Component
	(*Trace_Event)(nil),                             // 26: cerbos.engine.v1.Trace.Event
	(*Trace_Component_Variable)(nil),                // 27: cerbos.engine.v1.Trace.Component.Variable
	(*v1.ValidationError)(nil),                      // 28: cerbos.schema.v1.ValidationError
	(*structpb.Value)(nil),                          // 29: google.protobuf.Value
	(*v1alpha1.CheckedExpr)(nil),                    // 30: google.api.expr.v1alpha1.CheckedExpr
	(v11.Effect)(0),                                 // 31: cerbos.effect.v1.Effect
}
var file_cerbos_engine_v1_engine_proto_depIdxs = []int32{
	11, // 0: cerbos.engine.v1.PlanResourcesInput.principal:type_name -> cerbos.engine.v1.Principal
	14, // 1: cerbos.engine.v1.PlanResourcesInput.resource:type_name -> cerbos.engine.v1.PlanResourcesInput.Resource
	12, // 2: cerbos.engine.v1.PlanResourcesInput.aux_data:type_name -> cerbos.engine.v1.AuxData
	16, // 3: cerbos.engine.v1.PlanResourcesAst.filter_ast:type_name -> cerbos.engine.v1.PlanResourcesAst.Node
	1,  // 4: cerbos.engine.v1.PlanResourcesFilter.kind:type_name -> cerbos.engine.v1.PlanResourcesFilter.Kind
	19, // 5: cerbos.engine.v1.PlanResourcesFilter.condition:type_name -> cerbos.engine.v1.PlanResourcesFilter.Expression.Operand
	6,  // 6: cerbos.engine.v1.PlanResourcesOutput.filter:type_name -> cerbos.engine.v1.PlanResourcesFilter
	28, // 7: cerbos.engine.v1.PlanResourcesOutput.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	10, // 8: cerbos.engine.v1.CheckInput.resource:type_name -> cerbos.engine.v1.Resource
	11, // 9: cerbos.engine.v1.CheckInput.principal:type_name -> cerbos.engine.v1.Principal
	12, // 10: cerbos.engine.v1.CheckInput.aux_data:type_name -> cerbos.engine.v1.AuxData
	21, // 11: cerbos.engine.v1.CheckOutput.actions:type_name -> cerbos.engine.v1.CheckOutput.ActionsEntry
	28, // 12: cerbos.engine.v1.CheckOutput.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	22, // 13: cerbos.engine.v1.Resource.attr:type_name -> cerbos.engine.v1.Resource.AttrEntry
	23, // 14: cerbos.engine.v1.Principal.attr:type_name -> cerbos.engine.v1.Principal.AttrEntry
	24, // 15: cerbos.engine.v1.AuxData.jwt:type_name -> cerbos.engine.v1.AuxData.JwtEntry
	25, // 16: cerbos.engine.v1.Trace.components:type_name -> cerbos.engine.v1.Trace.Component
	26, // 17: cerbos.engine.v1.Trace.event:type_name -> cerbos.engine.v1.Trace.Event
	15, // 18: cerbos.engine.v1.PlanResourcesInput.Resource.attr:type_name -> cerbos.engine.v1.PlanResourcesInput.Resource.AttrEntry
	29, // 19: cerbos.engine.v1.PlanResourcesInput.Resource.AttrEntry.value:type_name -> google.protobuf.Value
	17, // 20: cerbos.engine.v1.PlanResourcesAst.Node.logical_operation:type_name -> cerbos.engine.v1.PlanResourcesAst.LogicalOperation
	30, // 21: cerbos.engine.v1.PlanResourcesAst.Node.expression:type_name -> google.api.expr.v1alpha1.CheckedExpr
	0,  // 22: cerbos.engine.v1.PlanResourcesAst.LogicalOperation.operator:type_name -> cerbos.engine.v1.PlanResourcesAst.LogicalOperation.Operator
	16, // 23: cerbos.engine.v1.PlanResourcesAst.LogicalOperation.nodes:type_name -> cerbos.engine.v1.PlanResourcesAst.Node
	19, // 24: cerbos.engine.v1.PlanResourcesFilter.Expression.operands:type_name -> cerbos.engine.v1.PlanResourcesFilter.Expression.Operand
	29, // 25: cerbos.engine.v1.PlanResourcesFilter.Expression.Operand.value:type_name -> google.protobuf.Value
	18, // 26: cerbos.engine.v1.PlanResourcesFilter.Expression.Operand.expression:type_name -> cerbos.engine.v1.PlanResourcesFilter.Expression
	31, // 27: cerbos.engine.v1.CheckOutput.ActionEffect.effect:type_name -> cerbos.effect.v1.Effect
	20, // 28: cerbos.engine.v1.CheckOutput.ActionsEntry.value:type_name -> cerbos.engine.v1.CheckOutput.ActionEffect
	29, // 29: cerbos.engine.v1.Resource.AttrEntry.value:type_name -> google.protobuf.Value
	29, // 30: cerbos.engine.v1.Principal.AttrEntry.value:type_name -> google.protobuf.Value
	29, // 31: cerbos.engine.v1.AuxData.JwtEntry.value:type_name -> google.protobuf.Value
	2,  // 32: cerbos.engine.v1.Trace.Component.kind:type_name -> cerbos.engine.v1.Trace.Component.Kind
	27, // 33: cerbos.engine.v1.Trace.Component.variable:type_name -> cerbos.engine.v1.Trace.Component.Variable
	3,  // 34: cerbos.engine.v1.Trace.Event.status:type_name -> cerbos.engine.v1.Trace.Event.Status
	31, // 35: cerbos.engine.v1.Trace.Event.effect:type_name -> cerbos.effect.v1.Effect
	29, // 36: cerbos.engine.v1.Trace.Event.result:type_name -> google.protobuf.Value
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_cerbos_engine_v1_engine_proto_init() }
func file_cerbos_engine_v1_engine_proto_init() {
	if File_cerbos_engine_v1_engine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_engine_v1_engine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesAst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Principal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesInput_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesAst_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesAst_LogicalOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesFilter_Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanResourcesFilter_Expression_Operand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOutput_ActionEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_engine_v1_engine_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace_Component_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_engine_v1_engine_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*PlanResourcesAst_Node_LogicalOperation)(nil),
		(*PlanResourcesAst_Node_Expression)(nil),
	}
	file_cerbos_engine_v1_engine_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*PlanResourcesFilter_Expression_Operand_Value)(nil),
		(*PlanResourcesFilter_Expression_Operand_Expression)(nil),
		(*PlanResourcesFilter_Expression_Operand_Variable)(nil),
	}
	file_cerbos_engine_v1_engine_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Trace_Component_Action)(nil),
		(*Trace_Component_DerivedRole)(nil),
		(*Trace_Component_Expr)(nil),
		(*Trace_Component_Index)(nil),
		(*Trace_Component_Policy)(nil),
		(*Trace_Component_Resource)(nil),
		(*Trace_Component_Rule)(nil),
		(*Trace_Component_Scope)(nil),
		(*Trace_Component_Variable_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_engine_v1_engine_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_engine_v1_engine_proto_goTypes,
		DependencyIndexes: file_cerbos_engine_v1_engine_proto_depIdxs,
		EnumInfos:         file_cerbos_engine_v1_engine_proto_enumTypes,
		MessageInfos:      file_cerbos_engine_v1_engine_proto_msgTypes,
	}.Build()
	File_cerbos_engine_v1_engine_proto = out.File
	file_cerbos_engine_v1_engine_proto_rawDesc = nil
	file_cerbos_engine_v1_engine_proto_goTypes = nil
	file_cerbos_engine_v1_engine_proto_depIdxs = nil
}
