// Code generated by protoc-gen-go-hashpb. Do not edit.
// protoc-gen-go-hashpb v0.1.0
// Source: cerbos/engine/v1/engine.proto

package enginev1

import (
	hash "hash"
)

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ResourcesQueryPlanRequest) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_ResourcesQueryPlanRequest_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ResourcesQueryPlanRequest_Resource) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_ResourcesQueryPlanRequest_Resource_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *CheckInput) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_CheckInput_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *CheckOutput) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_CheckOutput_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *CheckOutput_ActionEffect) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_CheckOutput_ActionEffect_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ResourcesQueryPlanOutput) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_ResourcesQueryPlanOutput_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ResourcesQueryPlanOutput_Node) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_ResourcesQueryPlanOutput_Node_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ResourcesQueryPlanOutput_LogicalOperation) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_ResourcesQueryPlanOutput_LogicalOperation_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Resource) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Resource_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Principal) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Principal_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *AuxData) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_AuxData_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Trace) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Trace_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Trace_Component) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Trace_Component_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Trace_Component_Variable) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Trace_Component_Variable_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Trace_Event) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		cerbos_engine_v1_Trace_Event_hashpb_sum(m, hasher, ignore)
	}
}
