// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/schema/v1/schema.proto

package schemav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Schema) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetApiVersion() != "api.cerbos.dev/v1" {
		return SchemaValidationError{
			field:  "ApiVersion",
			reason: "value must equal api.cerbos.dev/v1",
		}
	}

	// no validation rules for Disabled

	// no validation rules for Description

	if v, ok := interface{}(m.GetPrincipalSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "PrincipalSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetResourceSchemas() {
		_ = val

		// no validation rules for ResourceSchemas[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("ResourceSchemas[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on JSONSchemaProps with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JSONSchemaProps) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Schema

	// no validation rules for Ref

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for Format

	// no validation rules for Title

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaPropsValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetDefinitions() {
		_ = val

		// no validation rules for Definitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaPropsValidationError{
					field:  fmt.Sprintf("Definitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// JSONSchemaPropsValidationError is the validation error returned by
// JSONSchemaProps.Validate if the designated constraints aren't met.
type JSONSchemaPropsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSONSchemaPropsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSONSchemaPropsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSONSchemaPropsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSONSchemaPropsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSONSchemaPropsValidationError) ErrorName() string { return "JSONSchemaPropsValidationError" }

// Error satisfies the builtin error interface
func (e JSONSchemaPropsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSONSchemaProps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSONSchemaPropsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSONSchemaPropsValidationError{}

// Validate checks the field values on ValidationError with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ValidationError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	// no validation rules for Message

	// no validation rules for Source

	return nil
}

// ValidationErrorValidationError is the validation error returned by
// ValidationError.Validate if the designated constraints aren't met.
type ValidationErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrorValidationError) ErrorName() string { return "ValidationErrorValidationError" }

// Error satisfies the builtin error interface
func (e ValidationErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrorValidationError{}

// Validate checks the field values on AttrWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AttrWrapper) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetAttr() {
		_ = val

		// no validation rules for Attr[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrWrapperValidationError{
					field:  fmt.Sprintf("Attr[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AttrWrapperValidationError is the validation error returned by
// AttrWrapper.Validate if the designated constraints aren't met.
type AttrWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrWrapperValidationError) ErrorName() string { return "AttrWrapperValidationError" }

// Error satisfies the builtin error interface
func (e AttrWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrWrapperValidationError{}
