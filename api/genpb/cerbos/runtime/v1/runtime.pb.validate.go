// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/runtime/v1/runtime.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	effectv1 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = effectv1.Effect(0)

	_ = effectv1.Effect(0)
)

// Validate checks the field values on RunnablePolicySet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RunnablePolicySet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnablePolicySet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnablePolicySetMultiError, or nil if none found.
func (m *RunnablePolicySet) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePolicySet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fqn

	switch m.PolicySet.(type) {

	case *RunnablePolicySet_ResourcePolicy:

		if all {
			switch v := interface{}(m.GetResourcePolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "ResourcePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "ResourcePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourcePolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnablePolicySetValidationError{
					field:  "ResourcePolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunnablePolicySet_PrincipalPolicy:

		if all {
			switch v := interface{}(m.GetPrincipalPolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "PrincipalPolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "PrincipalPolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrincipalPolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnablePolicySetValidationError{
					field:  "PrincipalPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunnablePolicySet_DerivedRoles:

		if all {
			switch v := interface{}(m.GetDerivedRoles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "DerivedRoles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnablePolicySetValidationError{
						field:  "DerivedRoles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDerivedRoles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnablePolicySetValidationError{
					field:  "DerivedRoles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RunnablePolicySetMultiError(errors)
	}
	return nil
}

// RunnablePolicySetMultiError is an error wrapping multiple validation errors
// returned by RunnablePolicySet.ValidateAll() if the designated constraints
// aren't met.
type RunnablePolicySetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePolicySetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePolicySetMultiError) AllErrors() []error { return m }

// RunnablePolicySetValidationError is the validation error returned by
// RunnablePolicySet.Validate if the designated constraints aren't met.
type RunnablePolicySetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePolicySetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnablePolicySetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnablePolicySetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePolicySetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePolicySetValidationError) ErrorName() string {
	return "RunnablePolicySetValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePolicySetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePolicySet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePolicySetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePolicySetValidationError{}

// Validate checks the field values on RunnableResourcePolicySet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnableResourcePolicySet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableResourcePolicySet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnableResourcePolicySetMultiError, or nil if none found.
func (m *RunnableResourcePolicySet) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableResourcePolicySet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableResourcePolicySetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableResourcePolicySetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableResourcePolicySetValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnableResourcePolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnableResourcePolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnableResourcePolicySetValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchemas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableResourcePolicySetValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableResourcePolicySetValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableResourcePolicySetValidationError{
				field:  "Schemas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunnableResourcePolicySetMultiError(errors)
	}
	return nil
}

// RunnableResourcePolicySetMultiError is an error wrapping multiple validation
// errors returned by RunnableResourcePolicySet.ValidateAll() if the
// designated constraints aren't met.
type RunnableResourcePolicySetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableResourcePolicySetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableResourcePolicySetMultiError) AllErrors() []error { return m }

// RunnableResourcePolicySetValidationError is the validation error returned by
// RunnableResourcePolicySet.Validate if the designated constraints aren't met.
type RunnableResourcePolicySetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableResourcePolicySetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableResourcePolicySetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableResourcePolicySetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableResourcePolicySetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableResourcePolicySetValidationError) ErrorName() string {
	return "RunnableResourcePolicySetValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableResourcePolicySetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableResourcePolicySet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableResourcePolicySetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableResourcePolicySetValidationError{}

// Validate checks the field values on RunnableDerivedRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnableDerivedRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableDerivedRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnableDerivedRoleMultiError, or nil if none found.
func (m *RunnableDerivedRole) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableDerivedRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetParentRoles()))
		i := 0
		for key := range m.GetParentRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParentRoles()[key]
			_ = val

			// no validation rules for ParentRoles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableDerivedRoleValidationError{
							field:  fmt.Sprintf("ParentRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableDerivedRoleValidationError{
							field:  fmt.Sprintf("ParentRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableDerivedRoleValidationError{
						field:  fmt.Sprintf("ParentRoles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetVariables()))
		i := 0
		for key := range m.GetVariables() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVariables()[key]
			_ = val

			// no validation rules for Variables[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableDerivedRoleValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableDerivedRoleValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableDerivedRoleValidationError{
						field:  fmt.Sprintf("Variables[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableDerivedRoleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableDerivedRoleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableDerivedRoleValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunnableDerivedRoleMultiError(errors)
	}
	return nil
}

// RunnableDerivedRoleMultiError is an error wrapping multiple validation
// errors returned by RunnableDerivedRole.ValidateAll() if the designated
// constraints aren't met.
type RunnableDerivedRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableDerivedRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableDerivedRoleMultiError) AllErrors() []error { return m }

// RunnableDerivedRoleValidationError is the validation error returned by
// RunnableDerivedRole.Validate if the designated constraints aren't met.
type RunnableDerivedRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableDerivedRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableDerivedRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableDerivedRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableDerivedRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableDerivedRoleValidationError) ErrorName() string {
	return "RunnableDerivedRoleValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableDerivedRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableDerivedRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableDerivedRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableDerivedRoleValidationError{}

// Validate checks the field values on RunnableDerivedRolesSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnableDerivedRolesSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableDerivedRolesSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnableDerivedRolesSetMultiError, or nil if none found.
func (m *RunnableDerivedRolesSet) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableDerivedRolesSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableDerivedRolesSetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableDerivedRolesSetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableDerivedRolesSetValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetDerivedRoles()))
		i := 0
		for key := range m.GetDerivedRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDerivedRoles()[key]
			_ = val

			// no validation rules for DerivedRoles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableDerivedRolesSetValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableDerivedRolesSetValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableDerivedRolesSetValidationError{
						field:  fmt.Sprintf("DerivedRoles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RunnableDerivedRolesSetMultiError(errors)
	}
	return nil
}

// RunnableDerivedRolesSetMultiError is an error wrapping multiple validation
// errors returned by RunnableDerivedRolesSet.ValidateAll() if the designated
// constraints aren't met.
type RunnableDerivedRolesSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableDerivedRolesSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableDerivedRolesSetMultiError) AllErrors() []error { return m }

// RunnableDerivedRolesSetValidationError is the validation error returned by
// RunnableDerivedRolesSet.Validate if the designated constraints aren't met.
type RunnableDerivedRolesSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableDerivedRolesSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableDerivedRolesSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableDerivedRolesSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableDerivedRolesSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableDerivedRolesSetValidationError) ErrorName() string {
	return "RunnableDerivedRolesSetValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableDerivedRolesSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableDerivedRolesSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableDerivedRolesSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableDerivedRolesSetValidationError{}

// Validate checks the field values on RunnablePrincipalPolicySet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunnablePrincipalPolicySet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnablePrincipalPolicySet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunnablePrincipalPolicySetMultiError, or nil if none found.
func (m *RunnablePrincipalPolicySet) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePrincipalPolicySet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnablePrincipalPolicySetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnablePrincipalPolicySetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnablePrincipalPolicySetValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnablePrincipalPolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnablePrincipalPolicySetValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnablePrincipalPolicySetValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RunnablePrincipalPolicySetMultiError(errors)
	}
	return nil
}

// RunnablePrincipalPolicySetMultiError is an error wrapping multiple
// validation errors returned by RunnablePrincipalPolicySet.ValidateAll() if
// the designated constraints aren't met.
type RunnablePrincipalPolicySetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePrincipalPolicySetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePrincipalPolicySetMultiError) AllErrors() []error { return m }

// RunnablePrincipalPolicySetValidationError is the validation error returned
// by RunnablePrincipalPolicySet.Validate if the designated constraints aren't met.
type RunnablePrincipalPolicySetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePrincipalPolicySetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnablePrincipalPolicySetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnablePrincipalPolicySetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePrincipalPolicySetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePrincipalPolicySetValidationError) ErrorName() string {
	return "RunnablePrincipalPolicySetValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePrincipalPolicySetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePrincipalPolicySet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePrincipalPolicySetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePrincipalPolicySetValidationError{}

// Validate checks the field values on Expr with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Expr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExprMultiError, or nil if none found.
func (m *Expr) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Original

	if all {
		switch v := interface{}(m.GetChecked()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExprValidationError{
					field:  "Checked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExprValidationError{
					field:  "Checked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChecked()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExprValidationError{
				field:  "Checked",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExprMultiError(errors)
	}
	return nil
}

// ExprMultiError is an error wrapping multiple validation errors returned by
// Expr.ValidateAll() if the designated constraints aren't met.
type ExprMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExprMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExprMultiError) AllErrors() []error { return m }

// ExprValidationError is the validation error returned by Expr.Validate if the
// designated constraints aren't met.
type ExprValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExprValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExprValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExprValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExprValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExprValidationError) ErrorName() string { return "ExprValidationError" }

// Error satisfies the builtin error interface
func (e ExprValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExprValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExprValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Op.(type) {

	case *Condition_All:

		if all {
			switch v := interface{}(m.GetAll()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "All",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "All",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionValidationError{
					field:  "All",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Condition_Any:

		if all {
			switch v := interface{}(m.GetAny()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "Any",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "Any",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAny()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionValidationError{
					field:  "Any",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Condition_None:

		if all {
			switch v := interface{}(m.GetNone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "None",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "None",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionValidationError{
					field:  "None",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Condition_Expr:

		if all {
			switch v := interface{}(m.GetExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "Expr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionValidationError{
						field:  "Expr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}
	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on RunnableResourcePolicySet_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunnableResourcePolicySet_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableResourcePolicySet_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunnableResourcePolicySet_MetadataMultiError, or nil if none found.
func (m *RunnableResourcePolicySet_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableResourcePolicySet_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fqn

	// no validation rules for Resource

	// no validation rules for Version

	if len(errors) > 0 {
		return RunnableResourcePolicySet_MetadataMultiError(errors)
	}
	return nil
}

// RunnableResourcePolicySet_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// RunnableResourcePolicySet_Metadata.ValidateAll() if the designated
// constraints aren't met.
type RunnableResourcePolicySet_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableResourcePolicySet_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableResourcePolicySet_MetadataMultiError) AllErrors() []error { return m }

// RunnableResourcePolicySet_MetadataValidationError is the validation error
// returned by RunnableResourcePolicySet_Metadata.Validate if the designated
// constraints aren't met.
type RunnableResourcePolicySet_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableResourcePolicySet_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableResourcePolicySet_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableResourcePolicySet_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableResourcePolicySet_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableResourcePolicySet_MetadataValidationError) ErrorName() string {
	return "RunnableResourcePolicySet_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableResourcePolicySet_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableResourcePolicySet_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableResourcePolicySet_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableResourcePolicySet_MetadataValidationError{}

// Validate checks the field values on RunnableResourcePolicySet_Policy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunnableResourcePolicySet_Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableResourcePolicySet_Policy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RunnableResourcePolicySet_PolicyMultiError, or nil if none found.
func (m *RunnableResourcePolicySet_Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableResourcePolicySet_Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	{
		sorted_keys := make([]string, len(m.GetDerivedRoles()))
		i := 0
		for key := range m.GetDerivedRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDerivedRoles()[key]
			_ = val

			// no validation rules for DerivedRoles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableResourcePolicySet_PolicyValidationError{
						field:  fmt.Sprintf("DerivedRoles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetVariables()))
		i := 0
		for key := range m.GetVariables() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVariables()[key]
			_ = val

			// no validation rules for Variables[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableResourcePolicySet_PolicyValidationError{
						field:  fmt.Sprintf("Variables[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnableResourcePolicySet_PolicyValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchemas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableResourcePolicySet_PolicyValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableResourcePolicySet_PolicyValidationError{
				field:  "Schemas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunnableResourcePolicySet_PolicyMultiError(errors)
	}
	return nil
}

// RunnableResourcePolicySet_PolicyMultiError is an error wrapping multiple
// validation errors returned by
// RunnableResourcePolicySet_Policy.ValidateAll() if the designated
// constraints aren't met.
type RunnableResourcePolicySet_PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableResourcePolicySet_PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableResourcePolicySet_PolicyMultiError) AllErrors() []error { return m }

// RunnableResourcePolicySet_PolicyValidationError is the validation error
// returned by RunnableResourcePolicySet_Policy.Validate if the designated
// constraints aren't met.
type RunnableResourcePolicySet_PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableResourcePolicySet_PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableResourcePolicySet_PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableResourcePolicySet_PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableResourcePolicySet_PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableResourcePolicySet_PolicyValidationError) ErrorName() string {
	return "RunnableResourcePolicySet_PolicyValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableResourcePolicySet_PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableResourcePolicySet_Policy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableResourcePolicySet_PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableResourcePolicySet_PolicyValidationError{}

// Validate checks the field values on RunnableResourcePolicySet_Policy_Rule
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RunnableResourcePolicySet_Policy_Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableResourcePolicySet_Policy_Rule
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunnableResourcePolicySet_Policy_RuleMultiError, or nil if none found.
func (m *RunnableResourcePolicySet_Policy_Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableResourcePolicySet_Policy_Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableResourcePolicySet_Policy_RuleValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetDerivedRoles()))
		i := 0
		for key := range m.GetDerivedRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDerivedRoles()[key]
			_ = val

			// no validation rules for DerivedRoles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("DerivedRoles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableResourcePolicySet_Policy_RuleValidationError{
						field:  fmt.Sprintf("DerivedRoles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetRoles()))
		i := 0
		for key := range m.GetRoles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRoles()[key]
			_ = val

			// no validation rules for Roles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("Roles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
							field:  fmt.Sprintf("Roles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnableResourcePolicySet_Policy_RuleValidationError{
						field:  fmt.Sprintf("Roles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnableResourcePolicySet_Policy_RuleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnableResourcePolicySet_Policy_RuleValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Effect

	if len(errors) > 0 {
		return RunnableResourcePolicySet_Policy_RuleMultiError(errors)
	}
	return nil
}

// RunnableResourcePolicySet_Policy_RuleMultiError is an error wrapping
// multiple validation errors returned by
// RunnableResourcePolicySet_Policy_Rule.ValidateAll() if the designated
// constraints aren't met.
type RunnableResourcePolicySet_Policy_RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableResourcePolicySet_Policy_RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableResourcePolicySet_Policy_RuleMultiError) AllErrors() []error { return m }

// RunnableResourcePolicySet_Policy_RuleValidationError is the validation error
// returned by RunnableResourcePolicySet_Policy_Rule.Validate if the
// designated constraints aren't met.
type RunnableResourcePolicySet_Policy_RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableResourcePolicySet_Policy_RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableResourcePolicySet_Policy_RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableResourcePolicySet_Policy_RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableResourcePolicySet_Policy_RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableResourcePolicySet_Policy_RuleValidationError) ErrorName() string {
	return "RunnableResourcePolicySet_Policy_RuleValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableResourcePolicySet_Policy_RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableResourcePolicySet_Policy_Rule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableResourcePolicySet_Policy_RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableResourcePolicySet_Policy_RuleValidationError{}

// Validate checks the field values on RunnableDerivedRolesSet_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunnableDerivedRolesSet_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnableDerivedRolesSet_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RunnableDerivedRolesSet_MetadataMultiError, or nil if none found.
func (m *RunnableDerivedRolesSet_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnableDerivedRolesSet_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fqn

	if len(errors) > 0 {
		return RunnableDerivedRolesSet_MetadataMultiError(errors)
	}
	return nil
}

// RunnableDerivedRolesSet_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// RunnableDerivedRolesSet_Metadata.ValidateAll() if the designated
// constraints aren't met.
type RunnableDerivedRolesSet_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnableDerivedRolesSet_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnableDerivedRolesSet_MetadataMultiError) AllErrors() []error { return m }

// RunnableDerivedRolesSet_MetadataValidationError is the validation error
// returned by RunnableDerivedRolesSet_Metadata.Validate if the designated
// constraints aren't met.
type RunnableDerivedRolesSet_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnableDerivedRolesSet_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnableDerivedRolesSet_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnableDerivedRolesSet_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnableDerivedRolesSet_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnableDerivedRolesSet_MetadataValidationError) ErrorName() string {
	return "RunnableDerivedRolesSet_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e RunnableDerivedRolesSet_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnableDerivedRolesSet_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnableDerivedRolesSet_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnableDerivedRolesSet_MetadataValidationError{}

// Validate checks the field values on RunnablePrincipalPolicySet_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunnablePrincipalPolicySet_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnablePrincipalPolicySet_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunnablePrincipalPolicySet_MetadataMultiError, or nil if none found.
func (m *RunnablePrincipalPolicySet_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePrincipalPolicySet_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fqn

	// no validation rules for Principal

	// no validation rules for Version

	if len(errors) > 0 {
		return RunnablePrincipalPolicySet_MetadataMultiError(errors)
	}
	return nil
}

// RunnablePrincipalPolicySet_MetadataMultiError is an error wrapping multiple
// validation errors returned by
// RunnablePrincipalPolicySet_Metadata.ValidateAll() if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePrincipalPolicySet_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePrincipalPolicySet_MetadataMultiError) AllErrors() []error { return m }

// RunnablePrincipalPolicySet_MetadataValidationError is the validation error
// returned by RunnablePrincipalPolicySet_Metadata.Validate if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePrincipalPolicySet_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnablePrincipalPolicySet_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnablePrincipalPolicySet_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePrincipalPolicySet_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePrincipalPolicySet_MetadataValidationError) ErrorName() string {
	return "RunnablePrincipalPolicySet_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePrincipalPolicySet_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePrincipalPolicySet_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePrincipalPolicySet_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePrincipalPolicySet_MetadataValidationError{}

// Validate checks the field values on RunnablePrincipalPolicySet_Policy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RunnablePrincipalPolicySet_Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunnablePrincipalPolicySet_Policy
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RunnablePrincipalPolicySet_PolicyMultiError, or nil if none found.
func (m *RunnablePrincipalPolicySet_Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePrincipalPolicySet_Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	{
		sorted_keys := make([]string, len(m.GetVariables()))
		i := 0
		for key := range m.GetVariables() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVariables()[key]
			_ = val

			// no validation rules for Variables[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_PolicyValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_PolicyValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnablePrincipalPolicySet_PolicyValidationError{
						field:  fmt.Sprintf("Variables[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetResourceRules()))
		i := 0
		for key := range m.GetResourceRules() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResourceRules()[key]
			_ = val

			// no validation rules for ResourceRules[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_PolicyValidationError{
							field:  fmt.Sprintf("ResourceRules[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_PolicyValidationError{
							field:  fmt.Sprintf("ResourceRules[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnablePrincipalPolicySet_PolicyValidationError{
						field:  fmt.Sprintf("ResourceRules[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RunnablePrincipalPolicySet_PolicyMultiError(errors)
	}
	return nil
}

// RunnablePrincipalPolicySet_PolicyMultiError is an error wrapping multiple
// validation errors returned by
// RunnablePrincipalPolicySet_Policy.ValidateAll() if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePrincipalPolicySet_PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePrincipalPolicySet_PolicyMultiError) AllErrors() []error { return m }

// RunnablePrincipalPolicySet_PolicyValidationError is the validation error
// returned by RunnablePrincipalPolicySet_Policy.Validate if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePrincipalPolicySet_PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnablePrincipalPolicySet_PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnablePrincipalPolicySet_PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePrincipalPolicySet_PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePrincipalPolicySet_PolicyValidationError) ErrorName() string {
	return "RunnablePrincipalPolicySet_PolicyValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePrincipalPolicySet_PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePrincipalPolicySet_Policy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePrincipalPolicySet_PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePrincipalPolicySet_PolicyValidationError{}

// Validate checks the field values on
// RunnablePrincipalPolicySet_Policy_ActionRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunnablePrincipalPolicySet_Policy_ActionRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RunnablePrincipalPolicySet_Policy_ActionRule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RunnablePrincipalPolicySet_Policy_ActionRuleMultiError, or nil if none found.
func (m *RunnablePrincipalPolicySet_Policy_ActionRule) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePrincipalPolicySet_Policy_ActionRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunnablePrincipalPolicySet_Policy_ActionRuleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunnablePrincipalPolicySet_Policy_ActionRuleValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunnablePrincipalPolicySet_Policy_ActionRuleValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Effect

	if len(errors) > 0 {
		return RunnablePrincipalPolicySet_Policy_ActionRuleMultiError(errors)
	}
	return nil
}

// RunnablePrincipalPolicySet_Policy_ActionRuleMultiError is an error wrapping
// multiple validation errors returned by
// RunnablePrincipalPolicySet_Policy_ActionRule.ValidateAll() if the
// designated constraints aren't met.
type RunnablePrincipalPolicySet_Policy_ActionRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePrincipalPolicySet_Policy_ActionRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePrincipalPolicySet_Policy_ActionRuleMultiError) AllErrors() []error { return m }

// RunnablePrincipalPolicySet_Policy_ActionRuleValidationError is the
// validation error returned by
// RunnablePrincipalPolicySet_Policy_ActionRule.Validate if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_Policy_ActionRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) ErrorName() string {
	return "RunnablePrincipalPolicySet_Policy_ActionRuleValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePrincipalPolicySet_Policy_ActionRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePrincipalPolicySet_Policy_ActionRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePrincipalPolicySet_Policy_ActionRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePrincipalPolicySet_Policy_ActionRuleValidationError{}

// Validate checks the field values on
// RunnablePrincipalPolicySet_Policy_ResourceRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunnablePrincipalPolicySet_Policy_ResourceRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RunnablePrincipalPolicySet_Policy_ResourceRules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError, or nil if none found.
func (m *RunnablePrincipalPolicySet_Policy_ResourceRules) ValidateAll() error {
	return m.validate(true)
}

func (m *RunnablePrincipalPolicySet_Policy_ResourceRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActionRules()))
		i := 0
		for key := range m.GetActionRules() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActionRules()[key]
			_ = val

			// no validation rules for ActionRules[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError{
							field:  fmt.Sprintf("ActionRules[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError{
							field:  fmt.Sprintf("ActionRules[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError{
						field:  fmt.Sprintf("ActionRules[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError(errors)
	}
	return nil
}

// RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError is an error
// wrapping multiple validation errors returned by
// RunnablePrincipalPolicySet_Policy_ResourceRules.ValidateAll() if the
// designated constraints aren't met.
type RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunnablePrincipalPolicySet_Policy_ResourceRulesMultiError) AllErrors() []error { return m }

// RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError is the
// validation error returned by
// RunnablePrincipalPolicySet_Policy_ResourceRules.Validate if the designated
// constraints aren't met.
type RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) ErrorName() string {
	return "RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError"
}

// Error satisfies the builtin error interface
func (e RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnablePrincipalPolicySet_Policy_ResourceRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnablePrincipalPolicySet_Policy_ResourceRulesValidationError{}

// Validate checks the field values on Condition_ExprList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Condition_ExprList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition_ExprList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Condition_ExprListMultiError, or nil if none found.
func (m *Condition_ExprList) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition_ExprList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExpr() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Condition_ExprListValidationError{
						field:  fmt.Sprintf("Expr[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Condition_ExprListValidationError{
						field:  fmt.Sprintf("Expr[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Condition_ExprListValidationError{
					field:  fmt.Sprintf("Expr[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Condition_ExprListMultiError(errors)
	}
	return nil
}

// Condition_ExprListMultiError is an error wrapping multiple validation errors
// returned by Condition_ExprList.ValidateAll() if the designated constraints
// aren't met.
type Condition_ExprListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Condition_ExprListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Condition_ExprListMultiError) AllErrors() []error { return m }

// Condition_ExprListValidationError is the validation error returned by
// Condition_ExprList.Validate if the designated constraints aren't met.
type Condition_ExprListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Condition_ExprListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Condition_ExprListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Condition_ExprListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Condition_ExprListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Condition_ExprListValidationError) ErrorName() string {
	return "Condition_ExprListValidationError"
}

// Error satisfies the builtin error interface
func (e Condition_ExprListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition_ExprList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Condition_ExprListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Condition_ExprListValidationError{}
