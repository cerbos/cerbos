// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: cerbos/runtime/v1/runtime.proto

package runtimev1

import (
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	v12 "github.com/cerbos/cerbos/api/genpb/cerbos/source/v1"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunnablePolicySet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Fqn   string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	// Types that are valid to be assigned to PolicySet:
	//
	//	*RunnablePolicySet_ResourcePolicy
	//	*RunnablePolicySet_PrincipalPolicy
	//	*RunnablePolicySet_DerivedRoles
	//	*RunnablePolicySet_Variables
	//	*RunnablePolicySet_RolePolicy
	PolicySet       isRunnablePolicySet_PolicySet `protobuf_oneof:"policy_set"`
	CompilerVersion uint32                        `protobuf:"varint,6,opt,name=compiler_version,json=compilerVersion,proto3" json:"compiler_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RunnablePolicySet) Reset() {
	*x = RunnablePolicySet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePolicySet) ProtoMessage() {}

func (x *RunnablePolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePolicySet.ProtoReflect.Descriptor instead.
func (*RunnablePolicySet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{0}
}

func (x *RunnablePolicySet) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnablePolicySet) GetPolicySet() isRunnablePolicySet_PolicySet {
	if x != nil {
		return x.PolicySet
	}
	return nil
}

func (x *RunnablePolicySet) GetResourcePolicy() *RunnableResourcePolicySet {
	if x != nil {
		if x, ok := x.PolicySet.(*RunnablePolicySet_ResourcePolicy); ok {
			return x.ResourcePolicy
		}
	}
	return nil
}

func (x *RunnablePolicySet) GetPrincipalPolicy() *RunnablePrincipalPolicySet {
	if x != nil {
		if x, ok := x.PolicySet.(*RunnablePolicySet_PrincipalPolicy); ok {
			return x.PrincipalPolicy
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnablePolicySet) GetDerivedRoles() *RunnableDerivedRolesSet {
	if x != nil {
		if x, ok := x.PolicySet.(*RunnablePolicySet_DerivedRoles); ok {
			return x.DerivedRoles
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnablePolicySet) GetVariables() *RunnableVariablesSet {
	if x != nil {
		if x, ok := x.PolicySet.(*RunnablePolicySet_Variables); ok {
			return x.Variables
		}
	}
	return nil
}

func (x *RunnablePolicySet) GetRolePolicy() *RunnableRolePolicySet {
	if x != nil {
		if x, ok := x.PolicySet.(*RunnablePolicySet_RolePolicy); ok {
			return x.RolePolicy
		}
	}
	return nil
}

func (x *RunnablePolicySet) GetCompilerVersion() uint32 {
	if x != nil {
		return x.CompilerVersion
	}
	return 0
}

type isRunnablePolicySet_PolicySet interface {
	isRunnablePolicySet_PolicySet()
}

type RunnablePolicySet_ResourcePolicy struct {
	ResourcePolicy *RunnableResourcePolicySet `protobuf:"bytes,2,opt,name=resource_policy,json=resourcePolicy,proto3,oneof"`
}

type RunnablePolicySet_PrincipalPolicy struct {
	PrincipalPolicy *RunnablePrincipalPolicySet `protobuf:"bytes,3,opt,name=principal_policy,json=principalPolicy,proto3,oneof"`
}

type RunnablePolicySet_DerivedRoles struct {
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	DerivedRoles *RunnableDerivedRolesSet `protobuf:"bytes,4,opt,name=derived_roles,json=derivedRoles,proto3,oneof"`
}

type RunnablePolicySet_Variables struct {
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Variables *RunnableVariablesSet `protobuf:"bytes,5,opt,name=variables,proto3,oneof"`
}

type RunnablePolicySet_RolePolicy struct {
	RolePolicy *RunnableRolePolicySet `protobuf:"bytes,7,opt,name=role_policy,json=rolePolicy,proto3,oneof"`
}

func (*RunnablePolicySet_ResourcePolicy) isRunnablePolicySet_PolicySet() {}

func (*RunnablePolicySet_PrincipalPolicy) isRunnablePolicySet_PolicySet() {}

func (*RunnablePolicySet_DerivedRoles) isRunnablePolicySet_PolicySet() {}

func (*RunnablePolicySet_Variables) isRunnablePolicySet_PolicySet() {}

func (*RunnablePolicySet_RolePolicy) isRunnablePolicySet_PolicySet() {}

type RuleTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*RuleTable_RuleRow   `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleTable) Reset() {
	*x = RuleTable{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTable) ProtoMessage() {}

func (x *RuleTable) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTable.ProtoReflect.Descriptor instead.
func (*RuleTable) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{1}
}

func (x *RuleTable) GetRules() []*RuleTable_RuleRow {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RuleTableMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Fqn   string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	// Types that are valid to be assigned to Name:
	//
	//	*RuleTableMetadata_Resource
	//	*RuleTableMetadata_Role
	Name             isRuleTableMetadata_Name        `protobuf_oneof:"name"`
	Version          string                          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	SourceAttributes map[string]*v1.SourceAttributes `protobuf:"bytes,5,rep,name=source_attributes,json=sourceAttributes,proto3" json:"source_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations      map[string]string               `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RuleTableMetadata) Reset() {
	*x = RuleTableMetadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleTableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTableMetadata) ProtoMessage() {}

func (x *RuleTableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTableMetadata.ProtoReflect.Descriptor instead.
func (*RuleTableMetadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{2}
}

func (x *RuleTableMetadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RuleTableMetadata) GetName() isRuleTableMetadata_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RuleTableMetadata) GetResource() string {
	if x != nil {
		if x, ok := x.Name.(*RuleTableMetadata_Resource); ok {
			return x.Resource
		}
	}
	return ""
}

func (x *RuleTableMetadata) GetRole() string {
	if x != nil {
		if x, ok := x.Name.(*RuleTableMetadata_Role); ok {
			return x.Role
		}
	}
	return ""
}

func (x *RuleTableMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RuleTableMetadata) GetSourceAttributes() map[string]*v1.SourceAttributes {
	if x != nil {
		return x.SourceAttributes
	}
	return nil
}

func (x *RuleTableMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type isRuleTableMetadata_Name interface {
	isRuleTableMetadata_Name()
}

type RuleTableMetadata_Resource struct {
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3,oneof"`
}

type RuleTableMetadata_Role struct {
	Role string `protobuf:"bytes,3,opt,name=role,proto3,oneof"`
}

func (*RuleTableMetadata_Resource) isRuleTableMetadata_Name() {}

func (*RuleTableMetadata_Role) isRuleTableMetadata_Name() {}

type RunnableRolePolicySet struct {
	state            protoimpl.MessageState                     `protogen:"open.v1"`
	Meta             *RunnableRolePolicySet_Metadata            `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Role             string                                     `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Scope            string                                     `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopePermissions v1.ScopePermissions                        `protobuf:"varint,5,opt,name=scope_permissions,json=scopePermissions,proto3,enum=cerbos.policy.v1.ScopePermissions" json:"scope_permissions,omitempty"`
	ParentRoles      []string                                   `protobuf:"bytes,6,rep,name=parent_roles,json=parentRoles,proto3" json:"parent_roles,omitempty"`
	Resources        map[string]*RunnableRolePolicySet_RuleList `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnableRolePolicySet) Reset() {
	*x = RunnableRolePolicySet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableRolePolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableRolePolicySet) ProtoMessage() {}

func (x *RunnableRolePolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableRolePolicySet.ProtoReflect.Descriptor instead.
func (*RunnableRolePolicySet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{3}
}

func (x *RunnableRolePolicySet) GetMeta() *RunnableRolePolicySet_Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RunnableRolePolicySet) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RunnableRolePolicySet) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RunnableRolePolicySet) GetScopePermissions() v1.ScopePermissions {
	if x != nil {
		return x.ScopePermissions
	}
	return v1.ScopePermissions(0)
}

func (x *RunnableRolePolicySet) GetParentRoles() []string {
	if x != nil {
		return x.ParentRoles
	}
	return nil
}

func (x *RunnableRolePolicySet) GetResources() map[string]*RunnableRolePolicySet_RuleList {
	if x != nil {
		return x.Resources
	}
	return nil
}

// RunnableResourcePolicySet is a container for all "compiled" resource policies
// belonging to a particular scope hierarchy. For example, consider the
// following policy files:
//
// Resource       Version     Scope
// --------------------------------
// leave_request  default     foo.bar.baz
// leave_request  default     foo.bar
// leave_request  default     foo
// leave_request  staging     foo
//
// After "compiling", the above would result in two RunnableResourcePolicySet
// objects. One containing the three leave_request:default polcies and one
// containing the single leave_request:staging policy.
type RunnableResourcePolicySet struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Meta          *RunnableResourcePolicySet_Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Policies      []*RunnableResourcePolicySet_Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	Schemas       *v1.Schemas                         `protobuf:"bytes,3,opt,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableResourcePolicySet) Reset() {
	*x = RunnableResourcePolicySet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableResourcePolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableResourcePolicySet) ProtoMessage() {}

func (x *RunnableResourcePolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableResourcePolicySet.ProtoReflect.Descriptor instead.
func (*RunnableResourcePolicySet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{4}
}

func (x *RunnableResourcePolicySet) GetMeta() *RunnableResourcePolicySet_Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RunnableResourcePolicySet) GetPolicies() []*RunnableResourcePolicySet_Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *RunnableResourcePolicySet) GetSchemas() *v1.Schemas {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type RunnableDerivedRole struct {
	state       protoimpl.MessageState    `protogen:"open.v1"`
	Name        string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentRoles map[string]*emptypb.Empty `protobuf:"bytes,2,rep,name=parent_roles,json=parentRoles,proto3" json:"parent_roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Variables        map[string]*Expr           `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Condition        *Condition                 `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	OrderedVariables []*Variable                `protobuf:"bytes,5,rep,name=ordered_variables,json=orderedVariables,proto3" json:"ordered_variables,omitempty"`
	Constants        map[string]*structpb.Value `protobuf:"bytes,6,rep,name=constants,proto3" json:"constants,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnableDerivedRole) Reset() {
	*x = RunnableDerivedRole{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableDerivedRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableDerivedRole) ProtoMessage() {}

func (x *RunnableDerivedRole) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableDerivedRole.ProtoReflect.Descriptor instead.
func (*RunnableDerivedRole) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{5}
}

func (x *RunnableDerivedRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnableDerivedRole) GetParentRoles() map[string]*emptypb.Empty {
	if x != nil {
		return x.ParentRoles
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnableDerivedRole) GetVariables() map[string]*Expr {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RunnableDerivedRole) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *RunnableDerivedRole) GetOrderedVariables() []*Variable {
	if x != nil {
		return x.OrderedVariables
	}
	return nil
}

func (x *RunnableDerivedRole) GetConstants() map[string]*structpb.Value {
	if x != nil {
		return x.Constants
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
type RunnableDerivedRolesSet struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Meta          *RunnableDerivedRolesSet_Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	DerivedRoles  map[string]*RunnableDerivedRole   `protobuf:"bytes,2,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableDerivedRolesSet) Reset() {
	*x = RunnableDerivedRolesSet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableDerivedRolesSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableDerivedRolesSet) ProtoMessage() {}

func (x *RunnableDerivedRolesSet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableDerivedRolesSet.ProtoReflect.Descriptor instead.
func (*RunnableDerivedRolesSet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{6}
}

func (x *RunnableDerivedRolesSet) GetMeta() *RunnableDerivedRolesSet_Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RunnableDerivedRolesSet) GetDerivedRoles() map[string]*RunnableDerivedRole {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
type RunnableVariablesSet struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Meta          *RunnableVariablesSet_Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Variables     map[string]*Expr               `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableVariablesSet) Reset() {
	*x = RunnableVariablesSet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableVariablesSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableVariablesSet) ProtoMessage() {}

func (x *RunnableVariablesSet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableVariablesSet.ProtoReflect.Descriptor instead.
func (*RunnableVariablesSet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{7}
}

func (x *RunnableVariablesSet) GetMeta() *RunnableVariablesSet_Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RunnableVariablesSet) GetVariables() map[string]*Expr {
	if x != nil {
		return x.Variables
	}
	return nil
}

// RunnablePrincipalPolicySet is a container for all "compiled" principal
// policies belonging to a particular scope hierarchy. See the description of
// RunnableResourcePolicySet to get an idea about how this is constructed.
type RunnablePrincipalPolicySet struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Meta          *RunnablePrincipalPolicySet_Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Policies      []*RunnablePrincipalPolicySet_Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnablePrincipalPolicySet) Reset() {
	*x = RunnablePrincipalPolicySet{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePrincipalPolicySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePrincipalPolicySet) ProtoMessage() {}

func (x *RunnablePrincipalPolicySet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePrincipalPolicySet.ProtoReflect.Descriptor instead.
func (*RunnablePrincipalPolicySet) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{8}
}

func (x *RunnablePrincipalPolicySet) GetMeta() *RunnablePrincipalPolicySet_Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RunnablePrincipalPolicySet) GetPolicies() []*RunnablePrincipalPolicySet_Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Original      string                 `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	Checked       *v1alpha1.CheckedExpr  `protobuf:"bytes,2,opt,name=checked,proto3" json:"checked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expr) Reset() {
	*x = Expr{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{9}
}

func (x *Expr) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *Expr) GetChecked() *v1alpha1.CheckedExpr {
	if x != nil {
		return x.Checked
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	When          *Output_When           `protobuf:"bytes,1,opt,name=when,proto3" json:"when,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Output) Reset() {
	*x = Output{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{10}
}

func (x *Output) GetWhen() *Output_When {
	if x != nil {
		return x.When
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr          *Expr                  `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variable) Reset() {
	*x = Variable{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{11}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Op:
	//
	//	*Condition_All
	//	*Condition_Any
	//	*Condition_None
	//	*Condition_Expr
	Op            isCondition_Op `protobuf_oneof:"op"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{12}
}

func (x *Condition) GetOp() isCondition_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *Condition) GetAll() *Condition_ExprList {
	if x != nil {
		if x, ok := x.Op.(*Condition_All); ok {
			return x.All
		}
	}
	return nil
}

func (x *Condition) GetAny() *Condition_ExprList {
	if x != nil {
		if x, ok := x.Op.(*Condition_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *Condition) GetNone() *Condition_ExprList {
	if x != nil {
		if x, ok := x.Op.(*Condition_None); ok {
			return x.None
		}
	}
	return nil
}

func (x *Condition) GetExpr() *Expr {
	if x != nil {
		if x, ok := x.Op.(*Condition_Expr); ok {
			return x.Expr
		}
	}
	return nil
}

type isCondition_Op interface {
	isCondition_Op()
}

type Condition_All struct {
	All *Condition_ExprList `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Condition_Any struct {
	Any *Condition_ExprList `protobuf:"bytes,2,opt,name=any,proto3,oneof"`
}

type Condition_None struct {
	None *Condition_ExprList `protobuf:"bytes,3,opt,name=none,proto3,oneof"`
}

type Condition_Expr struct {
	Expr *Expr `protobuf:"bytes,4,opt,name=expr,proto3,oneof"`
}

func (*Condition_All) isCondition_Op() {}

func (*Condition_Any) isCondition_Op() {}

func (*Condition_None) isCondition_Op() {}

func (*Condition_Expr) isCondition_Op() {}

type CompileErrors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []*CompileErrors_Err   `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompileErrors) Reset() {
	*x = CompileErrors{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompileErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileErrors) ProtoMessage() {}

func (x *CompileErrors) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileErrors.ProtoReflect.Descriptor instead.
func (*CompileErrors) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{13}
}

func (x *CompileErrors) GetErrors() []*CompileErrors_Err {
	if x != nil {
		return x.Errors
	}
	return nil
}

type IndexBuildErrors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Disabled       []string                          `protobuf:"bytes,1,rep,name=disabled,proto3" json:"disabled,omitempty"`
	DuplicateDefs  []*IndexBuildErrors_DuplicateDef  `protobuf:"bytes,2,rep,name=duplicate_defs,json=duplicateDefs,proto3" json:"duplicate_defs,omitempty"`
	LoadFailures   []*IndexBuildErrors_LoadFailure   `protobuf:"bytes,3,rep,name=load_failures,json=loadFailures,proto3" json:"load_failures,omitempty"`
	MissingImports []*IndexBuildErrors_MissingImport `protobuf:"bytes,4,rep,name=missing_imports,json=missingImports,proto3" json:"missing_imports,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	MissingScopes             []string                                      `protobuf:"bytes,5,rep,name=missing_scopes,json=missingScopes,proto3" json:"missing_scopes,omitempty"`
	DisabledDefs              []*IndexBuildErrors_Disabled                  `protobuf:"bytes,6,rep,name=disabled_defs,json=disabledDefs,proto3" json:"disabled_defs,omitempty"`
	MissingScopeDetails       []*IndexBuildErrors_MissingScope              `protobuf:"bytes,7,rep,name=missing_scope_details,json=missingScopeDetails,proto3" json:"missing_scope_details,omitempty"`
	ScopePermissionsConflicts []*IndexBuildErrors_ScopePermissionsConflicts `protobuf:"bytes,8,rep,name=scope_permissions_conflicts,json=scopePermissionsConflicts,proto3" json:"scope_permissions_conflicts,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *IndexBuildErrors) Reset() {
	*x = IndexBuildErrors{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors) ProtoMessage() {}

func (x *IndexBuildErrors) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *IndexBuildErrors) GetDisabled() []string {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *IndexBuildErrors) GetDuplicateDefs() []*IndexBuildErrors_DuplicateDef {
	if x != nil {
		return x.DuplicateDefs
	}
	return nil
}

func (x *IndexBuildErrors) GetLoadFailures() []*IndexBuildErrors_LoadFailure {
	if x != nil {
		return x.LoadFailures
	}
	return nil
}

func (x *IndexBuildErrors) GetMissingImports() []*IndexBuildErrors_MissingImport {
	if x != nil {
		return x.MissingImports
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *IndexBuildErrors) GetMissingScopes() []string {
	if x != nil {
		return x.MissingScopes
	}
	return nil
}

func (x *IndexBuildErrors) GetDisabledDefs() []*IndexBuildErrors_Disabled {
	if x != nil {
		return x.DisabledDefs
	}
	return nil
}

func (x *IndexBuildErrors) GetMissingScopeDetails() []*IndexBuildErrors_MissingScope {
	if x != nil {
		return x.MissingScopeDetails
	}
	return nil
}

func (x *IndexBuildErrors) GetScopePermissionsConflicts() []*IndexBuildErrors_ScopePermissionsConflicts {
	if x != nil {
		return x.ScopePermissionsConflicts
	}
	return nil
}

type Errors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Errors_IndexBuildErrors
	//	*Errors_CompileErrors
	Kind          isErrors_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Errors) Reset() {
	*x = Errors{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Errors) ProtoMessage() {}

func (x *Errors) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Errors.ProtoReflect.Descriptor instead.
func (*Errors) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{15}
}

func (x *Errors) GetKind() isErrors_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Errors) GetIndexBuildErrors() *IndexBuildErrors {
	if x != nil {
		if x, ok := x.Kind.(*Errors_IndexBuildErrors); ok {
			return x.IndexBuildErrors
		}
	}
	return nil
}

func (x *Errors) GetCompileErrors() *CompileErrors {
	if x != nil {
		if x, ok := x.Kind.(*Errors_CompileErrors); ok {
			return x.CompileErrors
		}
	}
	return nil
}

type isErrors_Kind interface {
	isErrors_Kind()
}

type Errors_IndexBuildErrors struct {
	IndexBuildErrors *IndexBuildErrors `protobuf:"bytes,1,opt,name=index_build_errors,json=indexBuildErrors,proto3,oneof"`
}

type Errors_CompileErrors struct {
	CompileErrors *CompileErrors `protobuf:"bytes,2,opt,name=compile_errors,json=compileErrors,proto3,oneof"`
}

func (*Errors_IndexBuildErrors) isErrors_Kind() {}

func (*Errors_CompileErrors) isErrors_Kind() {}

type RuleTable_RuleRow struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OriginFqn         string                 `protobuf:"bytes,1,opt,name=origin_fqn,json=originFqn,proto3" json:"origin_fqn,omitempty"`
	Resource          string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Role              string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Action            string                 `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Condition         *Condition             `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
	Effect            v11.Effect             `protobuf:"varint,6,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Scope             string                 `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopePermissions  v1.ScopePermissions    `protobuf:"varint,8,opt,name=scope_permissions,json=scopePermissions,proto3,enum=cerbos.policy.v1.ScopePermissions" json:"scope_permissions,omitempty"`
	Version           string                 `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	OriginDerivedRole string                 `protobuf:"bytes,10,opt,name=origin_derived_role,json=originDerivedRole,proto3" json:"origin_derived_role,omitempty"`
	EmitOutput        *Output                `protobuf:"bytes,11,opt,name=emit_output,json=emitOutput,proto3" json:"emit_output,omitempty"`
	Name              string                 `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RuleTable_RuleRow) Reset() {
	*x = RuleTable_RuleRow{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleTable_RuleRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleTable_RuleRow) ProtoMessage() {}

func (x *RuleTable_RuleRow) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleTable_RuleRow.ProtoReflect.Descriptor instead.
func (*RuleTable_RuleRow) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RuleTable_RuleRow) GetOriginFqn() string {
	if x != nil {
		return x.OriginFqn
	}
	return ""
}

func (x *RuleTable_RuleRow) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RuleTable_RuleRow) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RuleTable_RuleRow) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RuleTable_RuleRow) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *RuleTable_RuleRow) GetEffect() v11.Effect {
	if x != nil {
		return x.Effect
	}
	return v11.Effect(0)
}

func (x *RuleTable_RuleRow) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RuleTable_RuleRow) GetScopePermissions() v1.ScopePermissions {
	if x != nil {
		return x.ScopePermissions
	}
	return v1.ScopePermissions(0)
}

func (x *RuleTable_RuleRow) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RuleTable_RuleRow) GetOriginDerivedRole() string {
	if x != nil {
		return x.OriginDerivedRole
	}
	return ""
}

func (x *RuleTable_RuleRow) GetEmitOutput() *Output {
	if x != nil {
		return x.EmitOutput
	}
	return nil
}

func (x *RuleTable_RuleRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RunnableRolePolicySet_Metadata struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	Fqn              string                          `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	SourceAttributes map[string]*v1.SourceAttributes `protobuf:"bytes,2,rep,name=source_attributes,json=sourceAttributes,proto3" json:"source_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations      map[string]string               `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnableRolePolicySet_Metadata) Reset() {
	*x = RunnableRolePolicySet_Metadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableRolePolicySet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableRolePolicySet_Metadata) ProtoMessage() {}

func (x *RunnableRolePolicySet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableRolePolicySet_Metadata.ProtoReflect.Descriptor instead.
func (*RunnableRolePolicySet_Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RunnableRolePolicySet_Metadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnableRolePolicySet_Metadata) GetSourceAttributes() map[string]*v1.SourceAttributes {
	if x != nil {
		return x.SourceAttributes
	}
	return nil
}

func (x *RunnableRolePolicySet_Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RunnableRolePolicySet_Rule struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Resource      string                    `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	AllowActions  map[string]*emptypb.Empty `protobuf:"bytes,2,rep,name=allow_actions,json=allowActions,proto3" json:"allow_actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Condition     *Condition                `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableRolePolicySet_Rule) Reset() {
	*x = RunnableRolePolicySet_Rule{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableRolePolicySet_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableRolePolicySet_Rule) ProtoMessage() {}

func (x *RunnableRolePolicySet_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableRolePolicySet_Rule.ProtoReflect.Descriptor instead.
func (*RunnableRolePolicySet_Rule) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{3, 1}
}

func (x *RunnableRolePolicySet_Rule) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RunnableRolePolicySet_Rule) GetAllowActions() map[string]*emptypb.Empty {
	if x != nil {
		return x.AllowActions
	}
	return nil
}

func (x *RunnableRolePolicySet_Rule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type RunnableRolePolicySet_RuleList struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Rules         []*RunnableRolePolicySet_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableRolePolicySet_RuleList) Reset() {
	*x = RunnableRolePolicySet_RuleList{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableRolePolicySet_RuleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableRolePolicySet_RuleList) ProtoMessage() {}

func (x *RunnableRolePolicySet_RuleList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableRolePolicySet_RuleList.ProtoReflect.Descriptor instead.
func (*RunnableRolePolicySet_RuleList) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{3, 2}
}

func (x *RunnableRolePolicySet_RuleList) GetRules() []*RunnableRolePolicySet_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RunnableResourcePolicySet_Metadata struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	Fqn              string                          `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Resource         string                          `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Version          string                          `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SourceAttributes map[string]*v1.SourceAttributes `protobuf:"bytes,4,rep,name=source_attributes,json=sourceAttributes,proto3" json:"source_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations      map[string]string               `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnableResourcePolicySet_Metadata) Reset() {
	*x = RunnableResourcePolicySet_Metadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableResourcePolicySet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableResourcePolicySet_Metadata) ProtoMessage() {}

func (x *RunnableResourcePolicySet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableResourcePolicySet_Metadata.ProtoReflect.Descriptor instead.
func (*RunnableResourcePolicySet_Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{4, 0}
}

func (x *RunnableResourcePolicySet_Metadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnableResourcePolicySet_Metadata) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RunnableResourcePolicySet_Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RunnableResourcePolicySet_Metadata) GetSourceAttributes() map[string]*v1.SourceAttributes {
	if x != nil {
		return x.SourceAttributes
	}
	return nil
}

func (x *RunnableResourcePolicySet_Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RunnableResourcePolicySet_Policy struct {
	state        protoimpl.MessageState          `protogen:"open.v1"`
	Scope        string                          `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	DerivedRoles map[string]*RunnableDerivedRole `protobuf:"bytes,2,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Variables        map[string]*Expr                         `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Rules            []*RunnableResourcePolicySet_Policy_Rule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	Schemas          *v1.Schemas                              `protobuf:"bytes,5,opt,name=schemas,proto3" json:"schemas,omitempty"`
	OrderedVariables []*Variable                              `protobuf:"bytes,6,rep,name=ordered_variables,json=orderedVariables,proto3" json:"ordered_variables,omitempty"`
	ScopePermissions v1.ScopePermissions                      `protobuf:"varint,7,opt,name=scope_permissions,json=scopePermissions,proto3,enum=cerbos.policy.v1.ScopePermissions" json:"scope_permissions,omitempty"`
	Constants        map[string]*structpb.Value               `protobuf:"bytes,8,rep,name=constants,proto3" json:"constants,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnableResourcePolicySet_Policy) Reset() {
	*x = RunnableResourcePolicySet_Policy{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableResourcePolicySet_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableResourcePolicySet_Policy) ProtoMessage() {}

func (x *RunnableResourcePolicySet_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableResourcePolicySet_Policy.ProtoReflect.Descriptor instead.
func (*RunnableResourcePolicySet_Policy) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{4, 1}
}

func (x *RunnableResourcePolicySet_Policy) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RunnableResourcePolicySet_Policy) GetDerivedRoles() map[string]*RunnableDerivedRole {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnableResourcePolicySet_Policy) GetVariables() map[string]*Expr {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy) GetRules() []*RunnableResourcePolicySet_Policy_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy) GetSchemas() *v1.Schemas {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy) GetOrderedVariables() []*Variable {
	if x != nil {
		return x.OrderedVariables
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy) GetScopePermissions() v1.ScopePermissions {
	if x != nil {
		return x.ScopePermissions
	}
	return v1.ScopePermissions(0)
}

func (x *RunnableResourcePolicySet_Policy) GetConstants() map[string]*structpb.Value {
	if x != nil {
		return x.Constants
	}
	return nil
}

type RunnableResourcePolicySet_Policy_Rule struct {
	state        protoimpl.MessageState    `protogen:"open.v1"`
	Name         string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Actions      map[string]*emptypb.Empty `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DerivedRoles map[string]*emptypb.Empty `protobuf:"bytes,3,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Roles        map[string]*emptypb.Empty `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Condition    *Condition                `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
	Effect       v11.Effect                `protobuf:"varint,6,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Output        *Expr   `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	EmitOutput    *Output `protobuf:"bytes,8,opt,name=emit_output,json=emitOutput,proto3" json:"emit_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableResourcePolicySet_Policy_Rule) Reset() {
	*x = RunnableResourcePolicySet_Policy_Rule{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableResourcePolicySet_Policy_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableResourcePolicySet_Policy_Rule) ProtoMessage() {}

func (x *RunnableResourcePolicySet_Policy_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableResourcePolicySet_Policy_Rule.ProtoReflect.Descriptor instead.
func (*RunnableResourcePolicySet_Policy_Rule) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetActions() map[string]*emptypb.Empty {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetDerivedRoles() map[string]*emptypb.Empty {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetRoles() map[string]*emptypb.Empty {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetEffect() v11.Effect {
	if x != nil {
		return x.Effect
	}
	return v11.Effect(0)
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnableResourcePolicySet_Policy_Rule) GetOutput() *Expr {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *RunnableResourcePolicySet_Policy_Rule) GetEmitOutput() *Output {
	if x != nil {
		return x.EmitOutput
	}
	return nil
}

type RunnableDerivedRolesSet_Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fqn           string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Annotations   map[string]string      `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableDerivedRolesSet_Metadata) Reset() {
	*x = RunnableDerivedRolesSet_Metadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableDerivedRolesSet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableDerivedRolesSet_Metadata) ProtoMessage() {}

func (x *RunnableDerivedRolesSet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableDerivedRolesSet_Metadata.ProtoReflect.Descriptor instead.
func (*RunnableDerivedRolesSet_Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RunnableDerivedRolesSet_Metadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnableDerivedRolesSet_Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RunnableVariablesSet_Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fqn           string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Annotations   map[string]string      `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnableVariablesSet_Metadata) Reset() {
	*x = RunnableVariablesSet_Metadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnableVariablesSet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableVariablesSet_Metadata) ProtoMessage() {}

func (x *RunnableVariablesSet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableVariablesSet_Metadata.ProtoReflect.Descriptor instead.
func (*RunnableVariablesSet_Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RunnableVariablesSet_Metadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnableVariablesSet_Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RunnablePrincipalPolicySet_Metadata struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	Fqn              string                          `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Principal        string                          `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	Version          string                          `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SourceAttributes map[string]*v1.SourceAttributes `protobuf:"bytes,4,rep,name=source_attributes,json=sourceAttributes,proto3" json:"source_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations      map[string]string               `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnablePrincipalPolicySet_Metadata) Reset() {
	*x = RunnablePrincipalPolicySet_Metadata{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePrincipalPolicySet_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePrincipalPolicySet_Metadata) ProtoMessage() {}

func (x *RunnablePrincipalPolicySet_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePrincipalPolicySet_Metadata.ProtoReflect.Descriptor instead.
func (*RunnablePrincipalPolicySet_Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{8, 0}
}

func (x *RunnablePrincipalPolicySet_Metadata) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *RunnablePrincipalPolicySet_Metadata) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *RunnablePrincipalPolicySet_Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RunnablePrincipalPolicySet_Metadata) GetSourceAttributes() map[string]*v1.SourceAttributes {
	if x != nil {
		return x.SourceAttributes
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type RunnablePrincipalPolicySet_Policy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Scope string                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Variables        map[string]*Expr                                            `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourceRules    map[string]*RunnablePrincipalPolicySet_Policy_ResourceRules `protobuf:"bytes,3,rep,name=resource_rules,json=resourceRules,proto3" json:"resource_rules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	OrderedVariables []*Variable                                                 `protobuf:"bytes,4,rep,name=ordered_variables,json=orderedVariables,proto3" json:"ordered_variables,omitempty"`
	ScopePermissions v1.ScopePermissions                                         `protobuf:"varint,5,opt,name=scope_permissions,json=scopePermissions,proto3,enum=cerbos.policy.v1.ScopePermissions" json:"scope_permissions,omitempty"`
	Constants        map[string]*structpb.Value                                  `protobuf:"bytes,6,rep,name=constants,proto3" json:"constants,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RunnablePrincipalPolicySet_Policy) Reset() {
	*x = RunnablePrincipalPolicySet_Policy{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePrincipalPolicySet_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePrincipalPolicySet_Policy) ProtoMessage() {}

func (x *RunnablePrincipalPolicySet_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePrincipalPolicySet_Policy.ProtoReflect.Descriptor instead.
func (*RunnablePrincipalPolicySet_Policy) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{8, 1}
}

func (x *RunnablePrincipalPolicySet_Policy) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnablePrincipalPolicySet_Policy) GetVariables() map[string]*Expr {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Policy) GetResourceRules() map[string]*RunnablePrincipalPolicySet_Policy_ResourceRules {
	if x != nil {
		return x.ResourceRules
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Policy) GetOrderedVariables() []*Variable {
	if x != nil {
		return x.OrderedVariables
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Policy) GetScopePermissions() v1.ScopePermissions {
	if x != nil {
		return x.ScopePermissions
	}
	return v1.ScopePermissions(0)
}

func (x *RunnablePrincipalPolicySet_Policy) GetConstants() map[string]*structpb.Value {
	if x != nil {
		return x.Constants
	}
	return nil
}

type RunnablePrincipalPolicySet_Policy_ActionRule struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Action    string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Condition *Condition             `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	Effect    v11.Effect             `protobuf:"varint,4,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Output        *Expr   `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	EmitOutput    *Output `protobuf:"bytes,6,opt,name=emit_output,json=emitOutput,proto3" json:"emit_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) Reset() {
	*x = RunnablePrincipalPolicySet_Policy_ActionRule{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePrincipalPolicySet_Policy_ActionRule) ProtoMessage() {}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePrincipalPolicySet_Policy_ActionRule.ProtoReflect.Descriptor instead.
func (*RunnablePrincipalPolicySet_Policy_ActionRule) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetEffect() v11.Effect {
	if x != nil {
		return x.Effect
	}
	return v11.Effect(0)
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetOutput() *Expr {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *RunnablePrincipalPolicySet_Policy_ActionRule) GetEmitOutput() *Output {
	if x != nil {
		return x.EmitOutput
	}
	return nil
}

type RunnablePrincipalPolicySet_Policy_ResourceRules struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	ActionRules   []*RunnablePrincipalPolicySet_Policy_ActionRule `protobuf:"bytes,1,rep,name=action_rules,json=actionRules,proto3" json:"action_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnablePrincipalPolicySet_Policy_ResourceRules) Reset() {
	*x = RunnablePrincipalPolicySet_Policy_ResourceRules{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnablePrincipalPolicySet_Policy_ResourceRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnablePrincipalPolicySet_Policy_ResourceRules) ProtoMessage() {}

func (x *RunnablePrincipalPolicySet_Policy_ResourceRules) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnablePrincipalPolicySet_Policy_ResourceRules.ProtoReflect.Descriptor instead.
func (*RunnablePrincipalPolicySet_Policy_ResourceRules) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{8, 1, 1}
}

func (x *RunnablePrincipalPolicySet_Policy_ResourceRules) GetActionRules() []*RunnablePrincipalPolicySet_Policy_ActionRule {
	if x != nil {
		return x.ActionRules
	}
	return nil
}

type Output_When struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RuleActivated   *Expr                  `protobuf:"bytes,1,opt,name=rule_activated,json=ruleActivated,proto3" json:"rule_activated,omitempty"`
	ConditionNotMet *Expr                  `protobuf:"bytes,2,opt,name=condition_not_met,json=conditionNotMet,proto3" json:"condition_not_met,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Output_When) Reset() {
	*x = Output_When{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Output_When) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_When) ProtoMessage() {}

func (x *Output_When) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_When.ProtoReflect.Descriptor instead.
func (*Output_When) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Output_When) GetRuleActivated() *Expr {
	if x != nil {
		return x.RuleActivated
	}
	return nil
}

func (x *Output_When) GetConditionNotMet() *Expr {
	if x != nil {
		return x.ConditionNotMet
	}
	return nil
}

type Condition_ExprList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expr          []*Condition           `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_ExprList) Reset() {
	*x = Condition_ExprList{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_ExprList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_ExprList) ProtoMessage() {}

func (x *Condition_ExprList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_ExprList.ProtoReflect.Descriptor instead.
func (*Condition_ExprList) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Condition_ExprList) GetExpr() []*Condition {
	if x != nil {
		return x.Expr
	}
	return nil
}

type CompileErrors_Err struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Position      *v12.Position          `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Context       string                 `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompileErrors_Err) Reset() {
	*x = CompileErrors_Err{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompileErrors_Err) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileErrors_Err) ProtoMessage() {}

func (x *CompileErrors_Err) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileErrors_Err.ProtoReflect.Descriptor instead.
func (*CompileErrors_Err) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CompileErrors_Err) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CompileErrors_Err) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CompileErrors_Err) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompileErrors_Err) GetPosition() *v12.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CompileErrors_Err) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type IndexBuildErrors_DuplicateDef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	OtherFile     string                 `protobuf:"bytes,2,opt,name=other_file,json=otherFile,proto3" json:"other_file,omitempty"`
	Policy        string                 `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	Position      *v12.Position          `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexBuildErrors_DuplicateDef) Reset() {
	*x = IndexBuildErrors_DuplicateDef{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_DuplicateDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_DuplicateDef) ProtoMessage() {}

func (x *IndexBuildErrors_DuplicateDef) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_DuplicateDef.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_DuplicateDef) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 0}
}

func (x *IndexBuildErrors_DuplicateDef) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *IndexBuildErrors_DuplicateDef) GetOtherFile() string {
	if x != nil {
		return x.OtherFile
	}
	return ""
}

func (x *IndexBuildErrors_DuplicateDef) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *IndexBuildErrors_DuplicateDef) GetPosition() *v12.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type IndexBuildErrors_MissingImport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ImportingFile   string                 `protobuf:"bytes,1,opt,name=importing_file,json=importingFile,proto3" json:"importing_file,omitempty"`
	Desc            string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	ImportingPolicy string                 `protobuf:"bytes,3,opt,name=importing_policy,json=importingPolicy,proto3" json:"importing_policy,omitempty"`
	ImportKind      string                 `protobuf:"bytes,4,opt,name=import_kind,json=importKind,proto3" json:"import_kind,omitempty"`
	ImportName      string                 `protobuf:"bytes,5,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	Position        *v12.Position          `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	Context         string                 `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IndexBuildErrors_MissingImport) Reset() {
	*x = IndexBuildErrors_MissingImport{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_MissingImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_MissingImport) ProtoMessage() {}

func (x *IndexBuildErrors_MissingImport) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_MissingImport.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_MissingImport) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 1}
}

func (x *IndexBuildErrors_MissingImport) GetImportingFile() string {
	if x != nil {
		return x.ImportingFile
	}
	return ""
}

func (x *IndexBuildErrors_MissingImport) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *IndexBuildErrors_MissingImport) GetImportingPolicy() string {
	if x != nil {
		return x.ImportingPolicy
	}
	return ""
}

func (x *IndexBuildErrors_MissingImport) GetImportKind() string {
	if x != nil {
		return x.ImportKind
	}
	return ""
}

func (x *IndexBuildErrors_MissingImport) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *IndexBuildErrors_MissingImport) GetPosition() *v12.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *IndexBuildErrors_MissingImport) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type IndexBuildErrors_MissingScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MissingPolicy string                 `protobuf:"bytes,1,opt,name=missing_policy,json=missingPolicy,proto3" json:"missing_policy,omitempty"`
	Descendants   []string               `protobuf:"bytes,2,rep,name=descendants,proto3" json:"descendants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexBuildErrors_MissingScope) Reset() {
	*x = IndexBuildErrors_MissingScope{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_MissingScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_MissingScope) ProtoMessage() {}

func (x *IndexBuildErrors_MissingScope) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_MissingScope.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_MissingScope) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 2}
}

func (x *IndexBuildErrors_MissingScope) GetMissingPolicy() string {
	if x != nil {
		return x.MissingPolicy
	}
	return ""
}

func (x *IndexBuildErrors_MissingScope) GetDescendants() []string {
	if x != nil {
		return x.Descendants
	}
	return nil
}

type IndexBuildErrors_ScopePermissionsConflicts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         string                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexBuildErrors_ScopePermissionsConflicts) Reset() {
	*x = IndexBuildErrors_ScopePermissionsConflicts{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_ScopePermissionsConflicts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_ScopePermissionsConflicts) ProtoMessage() {}

func (x *IndexBuildErrors_ScopePermissionsConflicts) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_ScopePermissionsConflicts.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_ScopePermissionsConflicts) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 3}
}

func (x *IndexBuildErrors_ScopePermissionsConflicts) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type IndexBuildErrors_LoadFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	File  string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
	Error         string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorDetails  *v12.Error `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexBuildErrors_LoadFailure) Reset() {
	*x = IndexBuildErrors_LoadFailure{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_LoadFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_LoadFailure) ProtoMessage() {}

func (x *IndexBuildErrors_LoadFailure) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_LoadFailure.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_LoadFailure) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 4}
}

func (x *IndexBuildErrors_LoadFailure) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

// Deprecated: Marked as deprecated in cerbos/runtime/v1/runtime.proto.
func (x *IndexBuildErrors_LoadFailure) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *IndexBuildErrors_LoadFailure) GetErrorDetails() *v12.Error {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type IndexBuildErrors_Disabled struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Policy        string                 `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Position      *v12.Position          `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexBuildErrors_Disabled) Reset() {
	*x = IndexBuildErrors_Disabled{}
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexBuildErrors_Disabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildErrors_Disabled) ProtoMessage() {}

func (x *IndexBuildErrors_Disabled) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_runtime_v1_runtime_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildErrors_Disabled.ProtoReflect.Descriptor instead.
func (*IndexBuildErrors_Disabled) Descriptor() ([]byte, []int) {
	return file_cerbos_runtime_v1_runtime_proto_rawDescGZIP(), []int{14, 5}
}

func (x *IndexBuildErrors_Disabled) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *IndexBuildErrors_Disabled) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *IndexBuildErrors_Disabled) GetPosition() *v12.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

var File_cerbos_runtime_v1_runtime_proto protoreflect.FileDescriptor

var file_cerbos_runtime_v1_runtime_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x57, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x22, 0xa9, 0x04, 0x0a, 0x09,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xdf, 0x03, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x71, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x46, 0x71, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x65, 0x6d, 0x69, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x03, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12,
	0x1c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x67, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd9, 0x09, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xa1, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x74, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x67, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9d, 0x02, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x57, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x08, 0x52, 0x75,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x6f, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x13, 0x0a,
	0x19, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x1a, 0xdf, 0x03, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x78, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x67, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb0, 0x0d,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x6a,
	0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x60, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0xa5, 0x06, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6f, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x59, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x0a, 0x65, 0x6d, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x52, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x57, 0x0a, 0x11, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x11, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbe, 0x05, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf9, 0x03, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x47, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x66, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x67, 0x0a, 0x11, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd1, 0x03,
	0x0a, 0x14, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x1a, 0xc1, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71,
	0x6e, 0x12, 0x63, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0xd9, 0x0e, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0xe3,
	0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x69, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x67, 0x0a, 0x15, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb6, 0x09, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x97, 0x02, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x65, 0x6d, 0x69, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x1a, 0x73, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x84, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a,
	0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65,
	0x6e, 0x1a, 0x8b, 0x01, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x22,
	0x4b, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xb1, 0x02, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79,
	0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x3c, 0x0a, 0x08,
	0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70,
	0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0xa3, 0x01, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb7, 0x0b, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x52, 0x0d, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x66, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x44, 0x65, 0x66, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7d, 0x0a, 0x1b, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x52, 0x19,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x0c, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x89, 0x02,
	0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x57, 0x0a, 0x0c, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0x31, 0x0a, 0x19, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x79, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x6e, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb0, 0x01, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_runtime_v1_runtime_proto_rawDescOnce sync.Once
	file_cerbos_runtime_v1_runtime_proto_rawDescData = file_cerbos_runtime_v1_runtime_proto_rawDesc
)

func file_cerbos_runtime_v1_runtime_proto_rawDescGZIP() []byte {
	file_cerbos_runtime_v1_runtime_proto_rawDescOnce.Do(func() {
		file_cerbos_runtime_v1_runtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_runtime_v1_runtime_proto_rawDescData)
	})
	return file_cerbos_runtime_v1_runtime_proto_rawDescData
}

var file_cerbos_runtime_v1_runtime_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_cerbos_runtime_v1_runtime_proto_goTypes = []any{
	(*RunnablePolicySet)(nil),              // 0: cerbos.runtime.v1.RunnablePolicySet
	(*RuleTable)(nil),                      // 1: cerbos.runtime.v1.RuleTable
	(*RuleTableMetadata)(nil),              // 2: cerbos.runtime.v1.RuleTableMetadata
	(*RunnableRolePolicySet)(nil),          // 3: cerbos.runtime.v1.RunnableRolePolicySet
	(*RunnableResourcePolicySet)(nil),      // 4: cerbos.runtime.v1.RunnableResourcePolicySet
	(*RunnableDerivedRole)(nil),            // 5: cerbos.runtime.v1.RunnableDerivedRole
	(*RunnableDerivedRolesSet)(nil),        // 6: cerbos.runtime.v1.RunnableDerivedRolesSet
	(*RunnableVariablesSet)(nil),           // 7: cerbos.runtime.v1.RunnableVariablesSet
	(*RunnablePrincipalPolicySet)(nil),     // 8: cerbos.runtime.v1.RunnablePrincipalPolicySet
	(*Expr)(nil),                           // 9: cerbos.runtime.v1.Expr
	(*Output)(nil),                         // 10: cerbos.runtime.v1.Output
	(*Variable)(nil),                       // 11: cerbos.runtime.v1.Variable
	(*Condition)(nil),                      // 12: cerbos.runtime.v1.Condition
	(*CompileErrors)(nil),                  // 13: cerbos.runtime.v1.CompileErrors
	(*IndexBuildErrors)(nil),               // 14: cerbos.runtime.v1.IndexBuildErrors
	(*Errors)(nil),                         // 15: cerbos.runtime.v1.Errors
	(*RuleTable_RuleRow)(nil),              // 16: cerbos.runtime.v1.RuleTable.RuleRow
	nil,                                    // 17: cerbos.runtime.v1.RuleTableMetadata.SourceAttributesEntry
	nil,                                    // 18: cerbos.runtime.v1.RuleTableMetadata.AnnotationsEntry
	(*RunnableRolePolicySet_Metadata)(nil), // 19: cerbos.runtime.v1.RunnableRolePolicySet.Metadata
	(*RunnableRolePolicySet_Rule)(nil),     // 20: cerbos.runtime.v1.RunnableRolePolicySet.Rule
	(*RunnableRolePolicySet_RuleList)(nil), // 21: cerbos.runtime.v1.RunnableRolePolicySet.RuleList
	nil,                                    // 22: cerbos.runtime.v1.RunnableRolePolicySet.ResourcesEntry
	nil,                                    // 23: cerbos.runtime.v1.RunnableRolePolicySet.Metadata.SourceAttributesEntry
	nil,                                    // 24: cerbos.runtime.v1.RunnableRolePolicySet.Metadata.AnnotationsEntry
	nil,                                    // 25: cerbos.runtime.v1.RunnableRolePolicySet.Rule.AllowActionsEntry
	(*RunnableResourcePolicySet_Metadata)(nil), // 26: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata
	(*RunnableResourcePolicySet_Policy)(nil),   // 27: cerbos.runtime.v1.RunnableResourcePolicySet.Policy
	nil,                                        // 28: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.SourceAttributesEntry
	nil,                                        // 29: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.AnnotationsEntry
	(*RunnableResourcePolicySet_Policy_Rule)(nil), // 30: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule
	nil,                                      // 31: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.DerivedRolesEntry
	nil,                                      // 32: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.VariablesEntry
	nil,                                      // 33: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.ConstantsEntry
	nil,                                      // 34: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.ActionsEntry
	nil,                                      // 35: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.DerivedRolesEntry
	nil,                                      // 36: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.RolesEntry
	nil,                                      // 37: cerbos.runtime.v1.RunnableDerivedRole.ParentRolesEntry
	nil,                                      // 38: cerbos.runtime.v1.RunnableDerivedRole.VariablesEntry
	nil,                                      // 39: cerbos.runtime.v1.RunnableDerivedRole.ConstantsEntry
	(*RunnableDerivedRolesSet_Metadata)(nil), // 40: cerbos.runtime.v1.RunnableDerivedRolesSet.Metadata
	nil,                                      // 41: cerbos.runtime.v1.RunnableDerivedRolesSet.DerivedRolesEntry
	nil,                                      // 42: cerbos.runtime.v1.RunnableDerivedRolesSet.Metadata.AnnotationsEntry
	(*RunnableVariablesSet_Metadata)(nil),    // 43: cerbos.runtime.v1.RunnableVariablesSet.Metadata
	nil,                                      // 44: cerbos.runtime.v1.RunnableVariablesSet.VariablesEntry
	nil,                                      // 45: cerbos.runtime.v1.RunnableVariablesSet.Metadata.AnnotationsEntry
	(*RunnablePrincipalPolicySet_Metadata)(nil), // 46: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata
	(*RunnablePrincipalPolicySet_Policy)(nil),   // 47: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy
	nil, // 48: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.SourceAttributesEntry
	nil, // 49: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.AnnotationsEntry
	(*RunnablePrincipalPolicySet_Policy_ActionRule)(nil),    // 50: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule
	(*RunnablePrincipalPolicySet_Policy_ResourceRules)(nil), // 51: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRules
	nil,                                    // 52: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.VariablesEntry
	nil,                                    // 53: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRulesEntry
	nil,                                    // 54: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ConstantsEntry
	(*Output_When)(nil),                    // 55: cerbos.runtime.v1.Output.When
	(*Condition_ExprList)(nil),             // 56: cerbos.runtime.v1.Condition.ExprList
	(*CompileErrors_Err)(nil),              // 57: cerbos.runtime.v1.CompileErrors.Err
	(*IndexBuildErrors_DuplicateDef)(nil),  // 58: cerbos.runtime.v1.IndexBuildErrors.DuplicateDef
	(*IndexBuildErrors_MissingImport)(nil), // 59: cerbos.runtime.v1.IndexBuildErrors.MissingImport
	(*IndexBuildErrors_MissingScope)(nil),  // 60: cerbos.runtime.v1.IndexBuildErrors.MissingScope
	(*IndexBuildErrors_ScopePermissionsConflicts)(nil), // 61: cerbos.runtime.v1.IndexBuildErrors.ScopePermissionsConflicts
	(*IndexBuildErrors_LoadFailure)(nil),               // 62: cerbos.runtime.v1.IndexBuildErrors.LoadFailure
	(*IndexBuildErrors_Disabled)(nil),                  // 63: cerbos.runtime.v1.IndexBuildErrors.Disabled
	(v1.ScopePermissions)(0),                           // 64: cerbos.policy.v1.ScopePermissions
	(*v1.Schemas)(nil),                                 // 65: cerbos.policy.v1.Schemas
	(*v1alpha1.CheckedExpr)(nil),                       // 66: google.api.expr.v1alpha1.CheckedExpr
	(v11.Effect)(0),                                    // 67: cerbos.effect.v1.Effect
	(*v1.SourceAttributes)(nil),                        // 68: cerbos.policy.v1.SourceAttributes
	(*emptypb.Empty)(nil),                              // 69: google.protobuf.Empty
	(*structpb.Value)(nil),                             // 70: google.protobuf.Value
	(*v12.Position)(nil),                               // 71: cerbos.source.v1.Position
	(*v12.Error)(nil),                                  // 72: cerbos.source.v1.Error
}
var file_cerbos_runtime_v1_runtime_proto_depIdxs = []int32{
	4,   // 0: cerbos.runtime.v1.RunnablePolicySet.resource_policy:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet
	8,   // 1: cerbos.runtime.v1.RunnablePolicySet.principal_policy:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet
	6,   // 2: cerbos.runtime.v1.RunnablePolicySet.derived_roles:type_name -> cerbos.runtime.v1.RunnableDerivedRolesSet
	7,   // 3: cerbos.runtime.v1.RunnablePolicySet.variables:type_name -> cerbos.runtime.v1.RunnableVariablesSet
	3,   // 4: cerbos.runtime.v1.RunnablePolicySet.role_policy:type_name -> cerbos.runtime.v1.RunnableRolePolicySet
	16,  // 5: cerbos.runtime.v1.RuleTable.rules:type_name -> cerbos.runtime.v1.RuleTable.RuleRow
	17,  // 6: cerbos.runtime.v1.RuleTableMetadata.source_attributes:type_name -> cerbos.runtime.v1.RuleTableMetadata.SourceAttributesEntry
	18,  // 7: cerbos.runtime.v1.RuleTableMetadata.annotations:type_name -> cerbos.runtime.v1.RuleTableMetadata.AnnotationsEntry
	19,  // 8: cerbos.runtime.v1.RunnableRolePolicySet.meta:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.Metadata
	64,  // 9: cerbos.runtime.v1.RunnableRolePolicySet.scope_permissions:type_name -> cerbos.policy.v1.ScopePermissions
	22,  // 10: cerbos.runtime.v1.RunnableRolePolicySet.resources:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.ResourcesEntry
	26,  // 11: cerbos.runtime.v1.RunnableResourcePolicySet.meta:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Metadata
	27,  // 12: cerbos.runtime.v1.RunnableResourcePolicySet.policies:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy
	65,  // 13: cerbos.runtime.v1.RunnableResourcePolicySet.schemas:type_name -> cerbos.policy.v1.Schemas
	37,  // 14: cerbos.runtime.v1.RunnableDerivedRole.parent_roles:type_name -> cerbos.runtime.v1.RunnableDerivedRole.ParentRolesEntry
	38,  // 15: cerbos.runtime.v1.RunnableDerivedRole.variables:type_name -> cerbos.runtime.v1.RunnableDerivedRole.VariablesEntry
	12,  // 16: cerbos.runtime.v1.RunnableDerivedRole.condition:type_name -> cerbos.runtime.v1.Condition
	11,  // 17: cerbos.runtime.v1.RunnableDerivedRole.ordered_variables:type_name -> cerbos.runtime.v1.Variable
	39,  // 18: cerbos.runtime.v1.RunnableDerivedRole.constants:type_name -> cerbos.runtime.v1.RunnableDerivedRole.ConstantsEntry
	40,  // 19: cerbos.runtime.v1.RunnableDerivedRolesSet.meta:type_name -> cerbos.runtime.v1.RunnableDerivedRolesSet.Metadata
	41,  // 20: cerbos.runtime.v1.RunnableDerivedRolesSet.derived_roles:type_name -> cerbos.runtime.v1.RunnableDerivedRolesSet.DerivedRolesEntry
	43,  // 21: cerbos.runtime.v1.RunnableVariablesSet.meta:type_name -> cerbos.runtime.v1.RunnableVariablesSet.Metadata
	44,  // 22: cerbos.runtime.v1.RunnableVariablesSet.variables:type_name -> cerbos.runtime.v1.RunnableVariablesSet.VariablesEntry
	46,  // 23: cerbos.runtime.v1.RunnablePrincipalPolicySet.meta:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata
	47,  // 24: cerbos.runtime.v1.RunnablePrincipalPolicySet.policies:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy
	66,  // 25: cerbos.runtime.v1.Expr.checked:type_name -> google.api.expr.v1alpha1.CheckedExpr
	55,  // 26: cerbos.runtime.v1.Output.when:type_name -> cerbos.runtime.v1.Output.When
	9,   // 27: cerbos.runtime.v1.Variable.expr:type_name -> cerbos.runtime.v1.Expr
	56,  // 28: cerbos.runtime.v1.Condition.all:type_name -> cerbos.runtime.v1.Condition.ExprList
	56,  // 29: cerbos.runtime.v1.Condition.any:type_name -> cerbos.runtime.v1.Condition.ExprList
	56,  // 30: cerbos.runtime.v1.Condition.none:type_name -> cerbos.runtime.v1.Condition.ExprList
	9,   // 31: cerbos.runtime.v1.Condition.expr:type_name -> cerbos.runtime.v1.Expr
	57,  // 32: cerbos.runtime.v1.CompileErrors.errors:type_name -> cerbos.runtime.v1.CompileErrors.Err
	58,  // 33: cerbos.runtime.v1.IndexBuildErrors.duplicate_defs:type_name -> cerbos.runtime.v1.IndexBuildErrors.DuplicateDef
	62,  // 34: cerbos.runtime.v1.IndexBuildErrors.load_failures:type_name -> cerbos.runtime.v1.IndexBuildErrors.LoadFailure
	59,  // 35: cerbos.runtime.v1.IndexBuildErrors.missing_imports:type_name -> cerbos.runtime.v1.IndexBuildErrors.MissingImport
	63,  // 36: cerbos.runtime.v1.IndexBuildErrors.disabled_defs:type_name -> cerbos.runtime.v1.IndexBuildErrors.Disabled
	60,  // 37: cerbos.runtime.v1.IndexBuildErrors.missing_scope_details:type_name -> cerbos.runtime.v1.IndexBuildErrors.MissingScope
	61,  // 38: cerbos.runtime.v1.IndexBuildErrors.scope_permissions_conflicts:type_name -> cerbos.runtime.v1.IndexBuildErrors.ScopePermissionsConflicts
	14,  // 39: cerbos.runtime.v1.Errors.index_build_errors:type_name -> cerbos.runtime.v1.IndexBuildErrors
	13,  // 40: cerbos.runtime.v1.Errors.compile_errors:type_name -> cerbos.runtime.v1.CompileErrors
	12,  // 41: cerbos.runtime.v1.RuleTable.RuleRow.condition:type_name -> cerbos.runtime.v1.Condition
	67,  // 42: cerbos.runtime.v1.RuleTable.RuleRow.effect:type_name -> cerbos.effect.v1.Effect
	64,  // 43: cerbos.runtime.v1.RuleTable.RuleRow.scope_permissions:type_name -> cerbos.policy.v1.ScopePermissions
	10,  // 44: cerbos.runtime.v1.RuleTable.RuleRow.emit_output:type_name -> cerbos.runtime.v1.Output
	68,  // 45: cerbos.runtime.v1.RuleTableMetadata.SourceAttributesEntry.value:type_name -> cerbos.policy.v1.SourceAttributes
	23,  // 46: cerbos.runtime.v1.RunnableRolePolicySet.Metadata.source_attributes:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.Metadata.SourceAttributesEntry
	24,  // 47: cerbos.runtime.v1.RunnableRolePolicySet.Metadata.annotations:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.Metadata.AnnotationsEntry
	25,  // 48: cerbos.runtime.v1.RunnableRolePolicySet.Rule.allow_actions:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.Rule.AllowActionsEntry
	12,  // 49: cerbos.runtime.v1.RunnableRolePolicySet.Rule.condition:type_name -> cerbos.runtime.v1.Condition
	20,  // 50: cerbos.runtime.v1.RunnableRolePolicySet.RuleList.rules:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.Rule
	21,  // 51: cerbos.runtime.v1.RunnableRolePolicySet.ResourcesEntry.value:type_name -> cerbos.runtime.v1.RunnableRolePolicySet.RuleList
	68,  // 52: cerbos.runtime.v1.RunnableRolePolicySet.Metadata.SourceAttributesEntry.value:type_name -> cerbos.policy.v1.SourceAttributes
	69,  // 53: cerbos.runtime.v1.RunnableRolePolicySet.Rule.AllowActionsEntry.value:type_name -> google.protobuf.Empty
	28,  // 54: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.source_attributes:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.SourceAttributesEntry
	29,  // 55: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.annotations:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.AnnotationsEntry
	31,  // 56: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.derived_roles:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.DerivedRolesEntry
	32,  // 57: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.variables:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.VariablesEntry
	30,  // 58: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.rules:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule
	65,  // 59: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.schemas:type_name -> cerbos.policy.v1.Schemas
	11,  // 60: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.ordered_variables:type_name -> cerbos.runtime.v1.Variable
	64,  // 61: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.scope_permissions:type_name -> cerbos.policy.v1.ScopePermissions
	33,  // 62: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.constants:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.ConstantsEntry
	68,  // 63: cerbos.runtime.v1.RunnableResourcePolicySet.Metadata.SourceAttributesEntry.value:type_name -> cerbos.policy.v1.SourceAttributes
	34,  // 64: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.actions:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.ActionsEntry
	35,  // 65: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.derived_roles:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.DerivedRolesEntry
	36,  // 66: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.roles:type_name -> cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.RolesEntry
	12,  // 67: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.condition:type_name -> cerbos.runtime.v1.Condition
	67,  // 68: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.effect:type_name -> cerbos.effect.v1.Effect
	9,   // 69: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.output:type_name -> cerbos.runtime.v1.Expr
	10,  // 70: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.emit_output:type_name -> cerbos.runtime.v1.Output
	5,   // 71: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.DerivedRolesEntry.value:type_name -> cerbos.runtime.v1.RunnableDerivedRole
	9,   // 72: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.VariablesEntry.value:type_name -> cerbos.runtime.v1.Expr
	70,  // 73: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.ConstantsEntry.value:type_name -> google.protobuf.Value
	69,  // 74: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.ActionsEntry.value:type_name -> google.protobuf.Empty
	69,  // 75: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.DerivedRolesEntry.value:type_name -> google.protobuf.Empty
	69,  // 76: cerbos.runtime.v1.RunnableResourcePolicySet.Policy.Rule.RolesEntry.value:type_name -> google.protobuf.Empty
	69,  // 77: cerbos.runtime.v1.RunnableDerivedRole.ParentRolesEntry.value:type_name -> google.protobuf.Empty
	9,   // 78: cerbos.runtime.v1.RunnableDerivedRole.VariablesEntry.value:type_name -> cerbos.runtime.v1.Expr
	70,  // 79: cerbos.runtime.v1.RunnableDerivedRole.ConstantsEntry.value:type_name -> google.protobuf.Value
	42,  // 80: cerbos.runtime.v1.RunnableDerivedRolesSet.Metadata.annotations:type_name -> cerbos.runtime.v1.RunnableDerivedRolesSet.Metadata.AnnotationsEntry
	5,   // 81: cerbos.runtime.v1.RunnableDerivedRolesSet.DerivedRolesEntry.value:type_name -> cerbos.runtime.v1.RunnableDerivedRole
	45,  // 82: cerbos.runtime.v1.RunnableVariablesSet.Metadata.annotations:type_name -> cerbos.runtime.v1.RunnableVariablesSet.Metadata.AnnotationsEntry
	9,   // 83: cerbos.runtime.v1.RunnableVariablesSet.VariablesEntry.value:type_name -> cerbos.runtime.v1.Expr
	48,  // 84: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.source_attributes:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.SourceAttributesEntry
	49,  // 85: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.annotations:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.AnnotationsEntry
	52,  // 86: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.variables:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.VariablesEntry
	53,  // 87: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.resource_rules:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRulesEntry
	11,  // 88: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ordered_variables:type_name -> cerbos.runtime.v1.Variable
	64,  // 89: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.scope_permissions:type_name -> cerbos.policy.v1.ScopePermissions
	54,  // 90: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.constants:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ConstantsEntry
	68,  // 91: cerbos.runtime.v1.RunnablePrincipalPolicySet.Metadata.SourceAttributesEntry.value:type_name -> cerbos.policy.v1.SourceAttributes
	12,  // 92: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule.condition:type_name -> cerbos.runtime.v1.Condition
	67,  // 93: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule.effect:type_name -> cerbos.effect.v1.Effect
	9,   // 94: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule.output:type_name -> cerbos.runtime.v1.Expr
	10,  // 95: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule.emit_output:type_name -> cerbos.runtime.v1.Output
	50,  // 96: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRules.action_rules:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ActionRule
	9,   // 97: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.VariablesEntry.value:type_name -> cerbos.runtime.v1.Expr
	51,  // 98: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRulesEntry.value:type_name -> cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ResourceRules
	70,  // 99: cerbos.runtime.v1.RunnablePrincipalPolicySet.Policy.ConstantsEntry.value:type_name -> google.protobuf.Value
	9,   // 100: cerbos.runtime.v1.Output.When.rule_activated:type_name -> cerbos.runtime.v1.Expr
	9,   // 101: cerbos.runtime.v1.Output.When.condition_not_met:type_name -> cerbos.runtime.v1.Expr
	12,  // 102: cerbos.runtime.v1.Condition.ExprList.expr:type_name -> cerbos.runtime.v1.Condition
	71,  // 103: cerbos.runtime.v1.CompileErrors.Err.position:type_name -> cerbos.source.v1.Position
	71,  // 104: cerbos.runtime.v1.IndexBuildErrors.DuplicateDef.position:type_name -> cerbos.source.v1.Position
	71,  // 105: cerbos.runtime.v1.IndexBuildErrors.MissingImport.position:type_name -> cerbos.source.v1.Position
	72,  // 106: cerbos.runtime.v1.IndexBuildErrors.LoadFailure.error_details:type_name -> cerbos.source.v1.Error
	71,  // 107: cerbos.runtime.v1.IndexBuildErrors.Disabled.position:type_name -> cerbos.source.v1.Position
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_cerbos_runtime_v1_runtime_proto_init() }
func file_cerbos_runtime_v1_runtime_proto_init() {
	if File_cerbos_runtime_v1_runtime_proto != nil {
		return
	}
	file_cerbos_runtime_v1_runtime_proto_msgTypes[0].OneofWrappers = []any{
		(*RunnablePolicySet_ResourcePolicy)(nil),
		(*RunnablePolicySet_PrincipalPolicy)(nil),
		(*RunnablePolicySet_DerivedRoles)(nil),
		(*RunnablePolicySet_Variables)(nil),
		(*RunnablePolicySet_RolePolicy)(nil),
	}
	file_cerbos_runtime_v1_runtime_proto_msgTypes[2].OneofWrappers = []any{
		(*RuleTableMetadata_Resource)(nil),
		(*RuleTableMetadata_Role)(nil),
	}
	file_cerbos_runtime_v1_runtime_proto_msgTypes[12].OneofWrappers = []any{
		(*Condition_All)(nil),
		(*Condition_Any)(nil),
		(*Condition_None)(nil),
		(*Condition_Expr)(nil),
	}
	file_cerbos_runtime_v1_runtime_proto_msgTypes[15].OneofWrappers = []any{
		(*Errors_IndexBuildErrors)(nil),
		(*Errors_CompileErrors)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_runtime_v1_runtime_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_runtime_v1_runtime_proto_goTypes,
		DependencyIndexes: file_cerbos_runtime_v1_runtime_proto_depIdxs,
		MessageInfos:      file_cerbos_runtime_v1_runtime_proto_msgTypes,
	}.Build()
	File_cerbos_runtime_v1_runtime_proto = out.File
	file_cerbos_runtime_v1_runtime_proto_rawDesc = nil
	file_cerbos_runtime_v1_runtime_proto_goTypes = nil
	file_cerbos_runtime_v1_runtime_proto_depIdxs = nil
}
