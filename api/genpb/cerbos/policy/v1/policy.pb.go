// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: cerbos/policy/v1/policy.proto

package policyv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/engine/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestResults_Result int32

const (
	TestResults_RESULT_UNSPECIFIED TestResults_Result = 0
	TestResults_RESULT_SKIPPED     TestResults_Result = 1
	TestResults_RESULT_PASSED      TestResults_Result = 2
	TestResults_RESULT_FAILED      TestResults_Result = 3
	TestResults_RESULT_ERRORED     TestResults_Result = 4
)

// Enum value maps for TestResults_Result.
var (
	TestResults_Result_name = map[int32]string{
		0: "RESULT_UNSPECIFIED",
		1: "RESULT_SKIPPED",
		2: "RESULT_PASSED",
		3: "RESULT_FAILED",
		4: "RESULT_ERRORED",
	}
	TestResults_Result_value = map[string]int32{
		"RESULT_UNSPECIFIED": 0,
		"RESULT_SKIPPED":     1,
		"RESULT_PASSED":      2,
		"RESULT_FAILED":      3,
		"RESULT_ERRORED":     4,
	}
)

func (x TestResults_Result) Enum() *TestResults_Result {
	p := new(TestResults_Result)
	*p = x
	return p
}

func (x TestResults_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResults_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_policy_v1_policy_proto_enumTypes[0].Descriptor()
}

func (TestResults_Result) Type() protoreflect.EnumType {
	return &file_cerbos_policy_v1_policy_proto_enumTypes[0]
}

func (x TestResults_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResults_Result.Descriptor instead.
func (TestResults_Result) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 0}
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion  string    `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Disabled    bool      `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    *Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to PolicyType:
	//
	//	*Policy_ResourcePolicy
	//	*Policy_PrincipalPolicy
	//	*Policy_DerivedRoles
	//	*Policy_ExportVariables
	PolicyType isPolicy_PolicyType `protobuf_oneof:"policy_type"`
	// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
	Variables  map[string]string `protobuf:"bytes,8,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JsonSchema string            `protobuf:"bytes,9,opt,name=json_schema,json=$schema,proto3" json:"json_schema,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Policy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Policy) GetPolicyType() isPolicy_PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return nil
}

func (x *Policy) GetResourcePolicy() *ResourcePolicy {
	if x, ok := x.GetPolicyType().(*Policy_ResourcePolicy); ok {
		return x.ResourcePolicy
	}
	return nil
}

func (x *Policy) GetPrincipalPolicy() *PrincipalPolicy {
	if x, ok := x.GetPolicyType().(*Policy_PrincipalPolicy); ok {
		return x.PrincipalPolicy
	}
	return nil
}

func (x *Policy) GetDerivedRoles() *DerivedRoles {
	if x, ok := x.GetPolicyType().(*Policy_DerivedRoles); ok {
		return x.DerivedRoles
	}
	return nil
}

func (x *Policy) GetExportVariables() *ExportVariables {
	if x, ok := x.GetPolicyType().(*Policy_ExportVariables); ok {
		return x.ExportVariables
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
func (x *Policy) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Policy) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

type isPolicy_PolicyType interface {
	isPolicy_PolicyType()
}

type Policy_ResourcePolicy struct {
	ResourcePolicy *ResourcePolicy `protobuf:"bytes,5,opt,name=resource_policy,json=resourcePolicy,proto3,oneof"`
}

type Policy_PrincipalPolicy struct {
	PrincipalPolicy *PrincipalPolicy `protobuf:"bytes,6,opt,name=principal_policy,json=principalPolicy,proto3,oneof"`
}

type Policy_DerivedRoles struct {
	DerivedRoles *DerivedRoles `protobuf:"bytes,7,opt,name=derived_roles,json=derivedRoles,proto3,oneof"`
}

type Policy_ExportVariables struct {
	ExportVariables *ExportVariables `protobuf:"bytes,10,opt,name=export_variables,json=exportVariables,proto3,oneof"`
}

func (*Policy_ResourcePolicy) isPolicy_PolicyType() {}

func (*Policy_PrincipalPolicy) isPolicy_PolicyType() {}

func (*Policy_DerivedRoles) isPolicy_PolicyType() {}

func (*Policy_ExportVariables) isPolicy_PolicyType() {}

type SourceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes map[string]*structpb.Value `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SourceAttributes) Reset() {
	*x = SourceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceAttributes) ProtoMessage() {}

func (x *SourceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceAttributes.ProtoReflect.Descriptor instead.
func (*SourceAttributes) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *SourceAttributes) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFile  string                  `protobuf:"bytes,1,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	Annotations map[string]string       `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hash        *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
	StoreIdentifer   string            `protobuf:"bytes,4,opt,name=store_identifer,json=storeIdentifer,proto3" json:"store_identifer,omitempty"`
	StoreIdentifier  string            `protobuf:"bytes,5,opt,name=store_identifier,json=storeIdentifier,proto3" json:"store_identifier,omitempty"`
	SourceAttributes *SourceAttributes `protobuf:"bytes,6,opt,name=source_attributes,json=sourceAttributes,proto3" json:"source_attributes,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetHash() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
func (x *Metadata) GetStoreIdentifer() string {
	if x != nil {
		return x.StoreIdentifer
	}
	return ""
}

func (x *Metadata) GetStoreIdentifier() string {
	if x != nil {
		return x.StoreIdentifier
	}
	return ""
}

func (x *Metadata) GetSourceAttributes() *SourceAttributes {
	if x != nil {
		return x.SourceAttributes
	}
	return nil
}

type ResourcePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource           string          `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Version            string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ImportDerivedRoles []string        `protobuf:"bytes,3,rep,name=import_derived_roles,json=importDerivedRoles,proto3" json:"import_derived_roles,omitempty"`
	Rules              []*ResourceRule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	Scope              string          `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	Schemas            *Schemas        `protobuf:"bytes,6,opt,name=schemas,proto3" json:"schemas,omitempty"`
	Variables          *Variables      `protobuf:"bytes,7,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *ResourcePolicy) Reset() {
	*x = ResourcePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePolicy) ProtoMessage() {}

func (x *ResourcePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePolicy.ProtoReflect.Descriptor instead.
func (*ResourcePolicy) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *ResourcePolicy) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ResourcePolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResourcePolicy) GetImportDerivedRoles() []string {
	if x != nil {
		return x.ImportDerivedRoles
	}
	return nil
}

func (x *ResourcePolicy) GetRules() []*ResourceRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ResourcePolicy) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ResourcePolicy) GetSchemas() *Schemas {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *ResourcePolicy) GetVariables() *Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ResourceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions      []string   `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	DerivedRoles []string   `protobuf:"bytes,2,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty"`
	Roles        []string   `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Condition    *Condition `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	Effect       v1.Effect  `protobuf:"varint,5,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Name         string     `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Output       *Output    `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ResourceRule) Reset() {
	*x = ResourceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRule) ProtoMessage() {}

func (x *ResourceRule) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRule.ProtoReflect.Descriptor instead.
func (*ResourceRule) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceRule) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ResourceRule) GetDerivedRoles() []string {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

func (x *ResourceRule) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ResourceRule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ResourceRule) GetEffect() v1.Effect {
	if x != nil {
		return x.Effect
	}
	return v1.Effect(0)
}

func (x *ResourceRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceRule) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type PrincipalPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal string           `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Version   string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Rules     []*PrincipalRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	Scope     string           `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	Variables *Variables       `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *PrincipalPolicy) Reset() {
	*x = PrincipalPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalPolicy) ProtoMessage() {}

func (x *PrincipalPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalPolicy.ProtoReflect.Descriptor instead.
func (*PrincipalPolicy) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (x *PrincipalPolicy) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *PrincipalPolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PrincipalPolicy) GetRules() []*PrincipalRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *PrincipalPolicy) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PrincipalPolicy) GetVariables() *Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

type PrincipalRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string                  `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Actions  []*PrincipalRule_Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PrincipalRule) Reset() {
	*x = PrincipalRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalRule) ProtoMessage() {}

func (x *PrincipalRule) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalRule.ProtoReflect.Descriptor instead.
func (*PrincipalRule) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{6}
}

func (x *PrincipalRule) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PrincipalRule) GetActions() []*PrincipalRule_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type DerivedRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Definitions []*RoleDef `protobuf:"bytes,2,rep,name=definitions,proto3" json:"definitions,omitempty"`
	Variables   *Variables `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *DerivedRoles) Reset() {
	*x = DerivedRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivedRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivedRoles) ProtoMessage() {}

func (x *DerivedRoles) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivedRoles.ProtoReflect.Descriptor instead.
func (*DerivedRoles) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{7}
}

func (x *DerivedRoles) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DerivedRoles) GetDefinitions() []*RoleDef {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *DerivedRoles) GetVariables() *Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

type RoleDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentRoles []string   `protobuf:"bytes,2,rep,name=parent_roles,json=parentRoles,proto3" json:"parent_roles,omitempty"`
	Condition   *Condition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *RoleDef) Reset() {
	*x = RoleDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDef) ProtoMessage() {}

func (x *RoleDef) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDef.ProtoReflect.Descriptor instead.
func (*RoleDef) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{8}
}

func (x *RoleDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleDef) GetParentRoles() []string {
	if x != nil {
		return x.ParentRoles
	}
	return nil
}

func (x *RoleDef) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ExportVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Definitions map[string]string `protobuf:"bytes,2,rep,name=definitions,proto3" json:"definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExportVariables) Reset() {
	*x = ExportVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportVariables) ProtoMessage() {}

func (x *ExportVariables) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportVariables.ProtoReflect.Descriptor instead.
func (*ExportVariables) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{9}
}

func (x *ExportVariables) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportVariables) GetDefinitions() map[string]string {
	if x != nil {
		return x.Definitions
	}
	return nil
}

type Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Import []string          `protobuf:"bytes,1,rep,name=import,proto3" json:"import,omitempty"`
	Local  map[string]string `protobuf:"bytes,2,rep,name=local,proto3" json:"local,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Variables) Reset() {
	*x = Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variables) ProtoMessage() {}

func (x *Variables) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variables.ProtoReflect.Descriptor instead.
func (*Variables) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{10}
}

func (x *Variables) GetImport() []string {
	if x != nil {
		return x.Import
	}
	return nil
}

func (x *Variables) GetLocal() map[string]string {
	if x != nil {
		return x.Local
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//
	//	*Condition_Match
	//	*Condition_Script
	Condition isCondition_Condition `protobuf_oneof:"condition"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{11}
}

func (m *Condition) GetCondition() isCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Condition) GetMatch() *Match {
	if x, ok := x.GetCondition().(*Condition_Match); ok {
		return x.Match
	}
	return nil
}

func (x *Condition) GetScript() string {
	if x, ok := x.GetCondition().(*Condition_Script); ok {
		return x.Script
	}
	return ""
}

type isCondition_Condition interface {
	isCondition_Condition()
}

type Condition_Match struct {
	Match *Match `protobuf:"bytes,1,opt,name=match,proto3,oneof"`
}

type Condition_Script struct {
	Script string `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*Condition_Match) isCondition_Condition() {}

func (*Condition_Script) isCondition_Condition() {}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*Match_All
	//	*Match_Any
	//	*Match_None
	//	*Match_Expr
	Op isMatch_Op `protobuf_oneof:"op"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{12}
}

func (m *Match) GetOp() isMatch_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *Match) GetAll() *Match_ExprList {
	if x, ok := x.GetOp().(*Match_All); ok {
		return x.All
	}
	return nil
}

func (x *Match) GetAny() *Match_ExprList {
	if x, ok := x.GetOp().(*Match_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Match) GetNone() *Match_ExprList {
	if x, ok := x.GetOp().(*Match_None); ok {
		return x.None
	}
	return nil
}

func (x *Match) GetExpr() string {
	if x, ok := x.GetOp().(*Match_Expr); ok {
		return x.Expr
	}
	return ""
}

type isMatch_Op interface {
	isMatch_Op()
}

type Match_All struct {
	All *Match_ExprList `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Match_Any struct {
	Any *Match_ExprList `protobuf:"bytes,2,opt,name=any,proto3,oneof"`
}

type Match_None struct {
	None *Match_ExprList `protobuf:"bytes,3,opt,name=none,proto3,oneof"`
}

type Match_Expr struct {
	Expr string `protobuf:"bytes,4,opt,name=expr,proto3,oneof"`
}

func (*Match_All) isMatch_Op() {}

func (*Match_Any) isMatch_Op() {}

func (*Match_None) isMatch_Op() {}

func (*Match_Expr) isMatch_Op() {}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{13}
}

func (x *Output) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

type Schemas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalSchema *Schemas_Schema `protobuf:"bytes,1,opt,name=principal_schema,json=principalSchema,proto3" json:"principal_schema,omitempty"`
	ResourceSchema  *Schemas_Schema `protobuf:"bytes,2,opt,name=resource_schema,json=resourceSchema,proto3" json:"resource_schema,omitempty"`
}

func (x *Schemas) Reset() {
	*x = Schemas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas) ProtoMessage() {}

func (x *Schemas) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas.ProtoReflect.Descriptor instead.
func (*Schemas) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{14}
}

func (x *Schemas) GetPrincipalSchema() *Schemas_Schema {
	if x != nil {
		return x.PrincipalSchema
	}
	return nil
}

func (x *Schemas) GetResourceSchema() *Schemas_Schema {
	if x != nil {
		return x.ResourceSchema
	}
	return nil
}

type TestFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestFixture) Reset() {
	*x = TestFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFixture) ProtoMessage() {}

func (x *TestFixture) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFixture.ProtoReflect.Descriptor instead.
func (*TestFixture) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{15}
}

type TestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now                *timestamppb.Timestamp     `protobuf:"bytes,1,opt,name=now,proto3" json:"now,omitempty"`
	LenientScopeSearch bool                       `protobuf:"varint,2,opt,name=lenient_scope_search,json=lenientScopeSearch,proto3" json:"lenient_scope_search,omitempty"`
	Globals            map[string]*structpb.Value `protobuf:"bytes,3,rep,name=globals,proto3" json:"globals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestOptions) Reset() {
	*x = TestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOptions) ProtoMessage() {}

func (x *TestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOptions.ProtoReflect.Descriptor instead.
func (*TestOptions) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{16}
}

func (x *TestOptions) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *TestOptions) GetLenientScopeSearch() bool {
	if x != nil {
		return x.LenientScopeSearch
	}
	return false
}

func (x *TestOptions) GetGlobals() map[string]*structpb.Value {
	if x != nil {
		return x.Globals
	}
	return nil
}

type TestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Skip        bool                      `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	SkipReason  string                    `protobuf:"bytes,4,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	Tests       []*TestTable              `protobuf:"bytes,5,rep,name=tests,proto3" json:"tests,omitempty"`
	Principals  map[string]*v11.Principal `protobuf:"bytes,6,rep,name=principals,proto3" json:"principals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources   map[string]*v11.Resource  `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AuxData     map[string]*v11.AuxData   `protobuf:"bytes,8,rep,name=aux_data,json=auxData,proto3" json:"aux_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Options     *TestOptions              `protobuf:"bytes,9,opt,name=options,proto3" json:"options,omitempty"`
	JsonSchema  string                    `protobuf:"bytes,10,opt,name=json_schema,json=$schema,proto3" json:"json_schema,omitempty"`
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{17}
}

func (x *TestSuite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSuite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestSuite) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *TestSuite) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *TestSuite) GetTests() []*TestTable {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *TestSuite) GetPrincipals() map[string]*v11.Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *TestSuite) GetResources() map[string]*v11.Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TestSuite) GetAuxData() map[string]*v11.AuxData {
	if x != nil {
		return x.AuxData
	}
	return nil
}

func (x *TestSuite) GetOptions() *TestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TestSuite) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

type TestTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Skip        bool                     `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	SkipReason  string                   `protobuf:"bytes,4,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	Input       *TestTable_Input         `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Expected    []*TestTable_Expectation `protobuf:"bytes,6,rep,name=expected,proto3" json:"expected,omitempty"`
	Options     *TestOptions             `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *TestTable) Reset() {
	*x = TestTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTable) ProtoMessage() {}

func (x *TestTable) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTable.ProtoReflect.Descriptor instead.
func (*TestTable) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{18}
}

func (x *TestTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestTable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestTable) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *TestTable) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *TestTable) GetInput() *TestTable_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *TestTable) GetExpected() []*TestTable_Expectation {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *TestTable) GetOptions() *TestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *Test_TestName                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Skip            bool                           `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	SkipReason      string                         `protobuf:"bytes,4,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	Input           *v11.CheckInput                `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Expected        map[string]v1.Effect           `protobuf:"bytes,6,rep,name=expected,proto3" json:"expected,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cerbos.effect.v1.Effect"`
	Options         *TestOptions                   `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	ExpectedOutputs map[string]*Test_OutputEntries `protobuf:"bytes,8,rep,name=expected_outputs,json=expectedOutputs,proto3" json:"expected_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{19}
}

func (x *Test) GetName() *Test_TestName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Test) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Test) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *Test) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *Test) GetInput() *v11.CheckInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Test) GetExpected() map[string]v1.Effect {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *Test) GetOptions() *TestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Test) GetExpectedOutputs() map[string]*Test_OutputEntries {
	if x != nil {
		return x.ExpectedOutputs
	}
	return nil
}

type TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suites  []*TestResults_Suite `protobuf:"bytes,1,rep,name=suites,proto3" json:"suites,omitempty"`
	Summary *TestResults_Summary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *TestResults) Reset() {
	*x = TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults) ProtoMessage() {}

func (x *TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults.ProtoReflect.Descriptor instead.
func (*TestResults) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20}
}

func (x *TestResults) GetSuites() []*TestResults_Suite {
	if x != nil {
		return x.Suites
	}
	return nil
}

func (x *TestResults) GetSummary() *TestResults_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type PrincipalRule_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    string     `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Condition *Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	Effect    v1.Effect  `protobuf:"varint,3,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Name      string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Output    *Output    `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PrincipalRule_Action) Reset() {
	*x = PrincipalRule_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalRule_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalRule_Action) ProtoMessage() {}

func (x *PrincipalRule_Action) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalRule_Action.ProtoReflect.Descriptor instead.
func (*PrincipalRule_Action) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PrincipalRule_Action) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PrincipalRule_Action) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *PrincipalRule_Action) GetEffect() v1.Effect {
	if x != nil {
		return x.Effect
	}
	return v1.Effect(0)
}

func (x *PrincipalRule_Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrincipalRule_Action) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type Match_ExprList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Of []*Match `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
}

func (x *Match_ExprList) Reset() {
	*x = Match_ExprList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_ExprList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_ExprList) ProtoMessage() {}

func (x *Match_ExprList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_ExprList.ProtoReflect.Descriptor instead.
func (*Match_ExprList) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Match_ExprList) GetOf() []*Match {
	if x != nil {
		return x.Of
	}
	return nil
}

type Schemas_IgnoreWhen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []string `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Schemas_IgnoreWhen) Reset() {
	*x = Schemas_IgnoreWhen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas_IgnoreWhen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas_IgnoreWhen) ProtoMessage() {}

func (x *Schemas_IgnoreWhen) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas_IgnoreWhen.ProtoReflect.Descriptor instead.
func (*Schemas_IgnoreWhen) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Schemas_IgnoreWhen) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type Schemas_Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref        string              `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	IgnoreWhen *Schemas_IgnoreWhen `protobuf:"bytes,2,opt,name=ignore_when,json=ignoreWhen,proto3" json:"ignore_when,omitempty"`
}

func (x *Schemas_Schema) Reset() {
	*x = Schemas_Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas_Schema) ProtoMessage() {}

func (x *Schemas_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas_Schema.ProtoReflect.Descriptor instead.
func (*Schemas_Schema) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Schemas_Schema) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Schemas_Schema) GetIgnoreWhen() *Schemas_IgnoreWhen {
	if x != nil {
		return x.IgnoreWhen
	}
	return nil
}

type TestFixture_Principals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principals map[string]*v11.Principal `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JsonSchema string                    `protobuf:"bytes,2,opt,name=json_schema,json=$schema,proto3" json:"json_schema,omitempty"`
}

func (x *TestFixture_Principals) Reset() {
	*x = TestFixture_Principals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFixture_Principals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFixture_Principals) ProtoMessage() {}

func (x *TestFixture_Principals) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFixture_Principals.ProtoReflect.Descriptor instead.
func (*TestFixture_Principals) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TestFixture_Principals) GetPrincipals() map[string]*v11.Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *TestFixture_Principals) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

type TestFixture_Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources  map[string]*v11.Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JsonSchema string                   `protobuf:"bytes,2,opt,name=json_schema,json=$schema,proto3" json:"json_schema,omitempty"`
}

func (x *TestFixture_Resources) Reset() {
	*x = TestFixture_Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFixture_Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFixture_Resources) ProtoMessage() {}

func (x *TestFixture_Resources) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFixture_Resources.ProtoReflect.Descriptor instead.
func (*TestFixture_Resources) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{15, 1}
}

func (x *TestFixture_Resources) GetResources() map[string]*v11.Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TestFixture_Resources) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

type TestFixture_AuxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxData    map[string]*v11.AuxData `protobuf:"bytes,1,rep,name=aux_data,json=auxData,proto3" json:"aux_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JsonSchema string                  `protobuf:"bytes,2,opt,name=json_schema,json=$schema,proto3" json:"json_schema,omitempty"`
}

func (x *TestFixture_AuxData) Reset() {
	*x = TestFixture_AuxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFixture_AuxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFixture_AuxData) ProtoMessage() {}

func (x *TestFixture_AuxData) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFixture_AuxData.ProtoReflect.Descriptor instead.
func (*TestFixture_AuxData) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{15, 2}
}

func (x *TestFixture_AuxData) GetAuxData() map[string]*v11.AuxData {
	if x != nil {
		return x.AuxData
	}
	return nil
}

func (x *TestFixture_AuxData) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

type TestTable_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principals []string `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	Resources  []string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	Actions    []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	AuxData    string   `protobuf:"bytes,4,opt,name=aux_data,json=auxData,proto3" json:"aux_data,omitempty"`
}

func (x *TestTable_Input) Reset() {
	*x = TestTable_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTable_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTable_Input) ProtoMessage() {}

func (x *TestTable_Input) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTable_Input.ProtoReflect.Descriptor instead.
func (*TestTable_Input) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TestTable_Input) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *TestTable_Input) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TestTable_Input) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TestTable_Input) GetAuxData() string {
	if x != nil {
		return x.AuxData
	}
	return ""
}

type TestTable_OutputExpectations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   string             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Expected []*v11.OutputEntry `protobuf:"bytes,2,rep,name=expected,proto3" json:"expected,omitempty"`
}

func (x *TestTable_OutputExpectations) Reset() {
	*x = TestTable_OutputExpectations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTable_OutputExpectations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTable_OutputExpectations) ProtoMessage() {}

func (x *TestTable_OutputExpectations) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTable_OutputExpectations.ProtoReflect.Descriptor instead.
func (*TestTable_OutputExpectations) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TestTable_OutputExpectations) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TestTable_OutputExpectations) GetExpected() []*v11.OutputEntry {
	if x != nil {
		return x.Expected
	}
	return nil
}

type TestTable_Expectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal string                          `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	Resource  string                          `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Actions   map[string]v1.Effect            `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cerbos.effect.v1.Effect"`
	Outputs   []*TestTable_OutputExpectations `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *TestTable_Expectation) Reset() {
	*x = TestTable_Expectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTable_Expectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTable_Expectation) ProtoMessage() {}

func (x *TestTable_Expectation) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTable_Expectation.ProtoReflect.Descriptor instead.
func (*TestTable_Expectation) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{18, 2}
}

func (x *TestTable_Expectation) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *TestTable_Expectation) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *TestTable_Expectation) GetActions() map[string]v1.Effect {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TestTable_Expectation) GetOutputs() []*TestTable_OutputExpectations {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type Test_TestName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestTableName string `protobuf:"bytes,1,opt,name=test_table_name,json=testTableName,proto3" json:"test_table_name,omitempty"`
	PrincipalKey  string `protobuf:"bytes,2,opt,name=principal_key,json=principalKey,proto3" json:"principal_key,omitempty"`
	ResourceKey   string `protobuf:"bytes,3,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
}

func (x *Test_TestName) Reset() {
	*x = Test_TestName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_TestName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_TestName) ProtoMessage() {}

func (x *Test_TestName) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_TestName.ProtoReflect.Descriptor instead.
func (*Test_TestName) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Test_TestName) GetTestTableName() string {
	if x != nil {
		return x.TestTableName
	}
	return ""
}

func (x *Test_TestName) GetPrincipalKey() string {
	if x != nil {
		return x.PrincipalKey
	}
	return ""
}

func (x *Test_TestName) GetResourceKey() string {
	if x != nil {
		return x.ResourceKey
	}
	return ""
}

type Test_OutputEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries map[string]*structpb.Value `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Test_OutputEntries) Reset() {
	*x = Test_OutputEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test_OutputEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_OutputEntries) ProtoMessage() {}

func (x *Test_OutputEntries) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_OutputEntries.ProtoReflect.Descriptor instead.
func (*Test_OutputEntries) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Test_OutputEntries) GetEntries() map[string]*structpb.Value {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TestResults_Tally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TestResults_Result `protobuf:"varint,1,opt,name=result,proto3,enum=cerbos.policy.v1.TestResults_Result" json:"result,omitempty"`
	Count  uint32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TestResults_Tally) Reset() {
	*x = TestResults_Tally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Tally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Tally) ProtoMessage() {}

func (x *TestResults_Tally) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Tally.ProtoReflect.Descriptor instead.
func (*TestResults_Tally) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TestResults_Tally) GetResult() TestResults_Result {
	if x != nil {
		return x.Result
	}
	return TestResults_RESULT_UNSPECIFIED
}

func (x *TestResults_Tally) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TestResults_Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallResult TestResults_Result   `protobuf:"varint,1,opt,name=overall_result,json=overallResult,proto3,enum=cerbos.policy.v1.TestResults_Result" json:"overall_result,omitempty"`
	TestsCount    uint32               `protobuf:"varint,2,opt,name=tests_count,json=testsCount,proto3" json:"tests_count,omitempty"`
	ResultCounts  []*TestResults_Tally `protobuf:"bytes,3,rep,name=result_counts,json=resultCounts,proto3" json:"result_counts,omitempty"`
}

func (x *TestResults_Summary) Reset() {
	*x = TestResults_Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Summary) ProtoMessage() {}

func (x *TestResults_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Summary.ProtoReflect.Descriptor instead.
func (*TestResults_Summary) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TestResults_Summary) GetOverallResult() TestResults_Result {
	if x != nil {
		return x.OverallResult
	}
	return TestResults_RESULT_UNSPECIFIED
}

func (x *TestResults_Summary) GetTestsCount() uint32 {
	if x != nil {
		return x.TestsCount
	}
	return 0
}

func (x *TestResults_Summary) GetResultCounts() []*TestResults_Tally {
	if x != nil {
		return x.ResultCounts
	}
	return nil
}

type TestResults_Suite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
	Principals  []*TestResults_Principal `protobuf:"bytes,3,rep,name=principals,proto3" json:"principals,omitempty"`
	Summary     *TestResults_Summary     `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Error       string                   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	TestCases   []*TestResults_TestCase  `protobuf:"bytes,6,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
	Description string                   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TestResults_Suite) Reset() {
	*x = TestResults_Suite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Suite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Suite) ProtoMessage() {}

func (x *TestResults_Suite) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Suite.ProtoReflect.Descriptor instead.
func (*TestResults_Suite) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 2}
}

func (x *TestResults_Suite) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *TestResults_Suite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in cerbos/policy/v1/policy.proto.
func (x *TestResults_Suite) GetPrincipals() []*TestResults_Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *TestResults_Suite) GetSummary() *TestResults_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *TestResults_Suite) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TestResults_Suite) GetTestCases() []*TestResults_TestCase {
	if x != nil {
		return x.TestCases
	}
	return nil
}

func (x *TestResults_Suite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TestResults_TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Principals []*TestResults_Principal `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
}

func (x *TestResults_TestCase) Reset() {
	*x = TestResults_TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_TestCase) ProtoMessage() {}

func (x *TestResults_TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_TestCase.ProtoReflect.Descriptor instead.
func (*TestResults_TestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 3}
}

func (x *TestResults_TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResults_TestCase) GetPrincipals() []*TestResults_Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

type TestResults_Principal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Resources []*TestResults_Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *TestResults_Principal) Reset() {
	*x = TestResults_Principal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Principal) ProtoMessage() {}

func (x *TestResults_Principal) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Principal.ProtoReflect.Descriptor instead.
func (*TestResults_Principal) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 4}
}

func (x *TestResults_Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResults_Principal) GetResources() []*TestResults_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type TestResults_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Actions []*TestResults_Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *TestResults_Resource) Reset() {
	*x = TestResults_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Resource) ProtoMessage() {}

func (x *TestResults_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Resource.ProtoReflect.Descriptor instead.
func (*TestResults_Resource) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 5}
}

func (x *TestResults_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResults_Resource) GetActions() []*TestResults_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type TestResults_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Details *TestResults_Details `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *TestResults_Action) Reset() {
	*x = TestResults_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Action) ProtoMessage() {}

func (x *TestResults_Action) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Action.ProtoReflect.Descriptor instead.
func (*TestResults_Action) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 6}
}

func (x *TestResults_Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResults_Action) GetDetails() *TestResults_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type TestResults_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TestResults_Result `protobuf:"varint,1,opt,name=result,proto3,enum=cerbos.policy.v1.TestResults_Result" json:"result,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*TestResults_Details_Failure
	//	*TestResults_Details_Error
	//	*TestResults_Details_Success
	Outcome     isTestResults_Details_Outcome `protobuf_oneof:"outcome"`
	EngineTrace []*v11.Trace                  `protobuf:"bytes,4,rep,name=engine_trace,json=engineTrace,proto3" json:"engine_trace,omitempty"`
}

func (x *TestResults_Details) Reset() {
	*x = TestResults_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Details) ProtoMessage() {}

func (x *TestResults_Details) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Details.ProtoReflect.Descriptor instead.
func (*TestResults_Details) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 7}
}

func (x *TestResults_Details) GetResult() TestResults_Result {
	if x != nil {
		return x.Result
	}
	return TestResults_RESULT_UNSPECIFIED
}

func (m *TestResults_Details) GetOutcome() isTestResults_Details_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *TestResults_Details) GetFailure() *TestResults_Failure {
	if x, ok := x.GetOutcome().(*TestResults_Details_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *TestResults_Details) GetError() string {
	if x, ok := x.GetOutcome().(*TestResults_Details_Error); ok {
		return x.Error
	}
	return ""
}

func (x *TestResults_Details) GetSuccess() *TestResults_Success {
	if x, ok := x.GetOutcome().(*TestResults_Details_Success); ok {
		return x.Success
	}
	return nil
}

func (x *TestResults_Details) GetEngineTrace() []*v11.Trace {
	if x != nil {
		return x.EngineTrace
	}
	return nil
}

type isTestResults_Details_Outcome interface {
	isTestResults_Details_Outcome()
}

type TestResults_Details_Failure struct {
	Failure *TestResults_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type TestResults_Details_Error struct {
	Error string `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type TestResults_Details_Success struct {
	Success *TestResults_Success `protobuf:"bytes,5,opt,name=success,proto3,oneof"`
}

func (*TestResults_Details_Failure) isTestResults_Details_Outcome() {}

func (*TestResults_Details_Error) isTestResults_Details_Outcome() {}

func (*TestResults_Details_Success) isTestResults_Details_Outcome() {}

type TestResults_OutputFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*TestResults_OutputFailure_Mismatched
	//	*TestResults_OutputFailure_Missing
	Outcome isTestResults_OutputFailure_Outcome `protobuf_oneof:"outcome"`
}

func (x *TestResults_OutputFailure) Reset() {
	*x = TestResults_OutputFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_OutputFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_OutputFailure) ProtoMessage() {}

func (x *TestResults_OutputFailure) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_OutputFailure.ProtoReflect.Descriptor instead.
func (*TestResults_OutputFailure) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 8}
}

func (x *TestResults_OutputFailure) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (m *TestResults_OutputFailure) GetOutcome() isTestResults_OutputFailure_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *TestResults_OutputFailure) GetMismatched() *TestResults_OutputFailure_MismatchedValue {
	if x, ok := x.GetOutcome().(*TestResults_OutputFailure_Mismatched); ok {
		return x.Mismatched
	}
	return nil
}

func (x *TestResults_OutputFailure) GetMissing() *TestResults_OutputFailure_MissingValue {
	if x, ok := x.GetOutcome().(*TestResults_OutputFailure_Missing); ok {
		return x.Missing
	}
	return nil
}

type isTestResults_OutputFailure_Outcome interface {
	isTestResults_OutputFailure_Outcome()
}

type TestResults_OutputFailure_Mismatched struct {
	Mismatched *TestResults_OutputFailure_MismatchedValue `protobuf:"bytes,2,opt,name=mismatched,proto3,oneof"`
}

type TestResults_OutputFailure_Missing struct {
	Missing *TestResults_OutputFailure_MissingValue `protobuf:"bytes,3,opt,name=missing,proto3,oneof"`
}

func (*TestResults_OutputFailure_Mismatched) isTestResults_OutputFailure_Outcome() {}

func (*TestResults_OutputFailure_Missing) isTestResults_OutputFailure_Outcome() {}

type TestResults_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expected v1.Effect                    `protobuf:"varint,1,opt,name=expected,proto3,enum=cerbos.effect.v1.Effect" json:"expected,omitempty"`
	Actual   v1.Effect                    `protobuf:"varint,2,opt,name=actual,proto3,enum=cerbos.effect.v1.Effect" json:"actual,omitempty"`
	Outputs  []*TestResults_OutputFailure `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *TestResults_Failure) Reset() {
	*x = TestResults_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Failure) ProtoMessage() {}

func (x *TestResults_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Failure.ProtoReflect.Descriptor instead.
func (*TestResults_Failure) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 9}
}

func (x *TestResults_Failure) GetExpected() v1.Effect {
	if x != nil {
		return x.Expected
	}
	return v1.Effect(0)
}

func (x *TestResults_Failure) GetActual() v1.Effect {
	if x != nil {
		return x.Actual
	}
	return v1.Effect(0)
}

func (x *TestResults_Failure) GetOutputs() []*TestResults_OutputFailure {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TestResults_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Effect  v1.Effect          `protobuf:"varint,1,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Outputs []*v11.OutputEntry `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *TestResults_Success) Reset() {
	*x = TestResults_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_Success) ProtoMessage() {}

func (x *TestResults_Success) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_Success.ProtoReflect.Descriptor instead.
func (*TestResults_Success) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 10}
}

func (x *TestResults_Success) GetEffect() v1.Effect {
	if x != nil {
		return x.Effect
	}
	return v1.Effect(0)
}

func (x *TestResults_Success) GetOutputs() []*v11.OutputEntry {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TestResults_OutputFailure_MismatchedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expected *structpb.Value `protobuf:"bytes,1,opt,name=expected,proto3" json:"expected,omitempty"`
	Actual   *structpb.Value `protobuf:"bytes,2,opt,name=actual,proto3" json:"actual,omitempty"`
}

func (x *TestResults_OutputFailure_MismatchedValue) Reset() {
	*x = TestResults_OutputFailure_MismatchedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_OutputFailure_MismatchedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_OutputFailure_MismatchedValue) ProtoMessage() {}

func (x *TestResults_OutputFailure_MismatchedValue) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_OutputFailure_MismatchedValue.ProtoReflect.Descriptor instead.
func (*TestResults_OutputFailure_MismatchedValue) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 8, 0}
}

func (x *TestResults_OutputFailure_MismatchedValue) GetExpected() *structpb.Value {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *TestResults_OutputFailure_MismatchedValue) GetActual() *structpb.Value {
	if x != nil {
		return x.Actual
	}
	return nil
}

type TestResults_OutputFailure_MissingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expected *structpb.Value `protobuf:"bytes,1,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *TestResults_OutputFailure_MissingValue) Reset() {
	*x = TestResults_OutputFailure_MissingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_policy_v1_policy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResults_OutputFailure_MissingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResults_OutputFailure_MissingValue) ProtoMessage() {}

func (x *TestResults_OutputFailure_MissingValue) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_policy_v1_policy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResults_OutputFailure_MissingValue.ProtoReflect.Descriptor instead.
func (*TestResults_OutputFailure_MissingValue) Descriptor() ([]byte, []int) {
	return file_cerbos_policy_v1_policy_proto_rawDescGZIP(), []int{20, 8, 1}
}

func (x *TestResults_OutputFailure_MissingValue) GetExpected() *structpb.Value {
	if x != nil {
		return x.Expected
	}
	return nil
}

var File_cerbos_policy_v1_policy_proto protoreflect.FileDescriptor

var file_cerbos_policy_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x05, 0x0a, 0x06,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18,
	0xc8, 0x01, 0x01, 0x72, 0x13, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x76, 0x31, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x10,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x03, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb2, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xba, 0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0x48, 0x1c, 0x92, 0x01, 0x19, 0x18, 0x01, 0x22, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e,
	0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b, 0x24,
	0x52, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba, 0x48, 0x33, 0x72, 0x31,
	0x32, 0x2f, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a,
	0x24, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x39, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8,
	0x01, 0x01, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0x48, 0x1c, 0x92, 0x01, 0x19, 0x18, 0x01, 0x22, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e,
	0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b, 0x24,
	0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba,
	0x48, 0x0b, 0x92, 0x01, 0x08, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01,
	0x01, 0x82, 0x01, 0x04, 0x1a, 0x02, 0x01, 0x02, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xba, 0x48, 0x25, 0x72, 0x23, 0x32, 0x21, 0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c,
	0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xae, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xba, 0x48, 0x14, 0xc8, 0x01, 0x01, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba, 0x48, 0x33, 0x72, 0x31, 0x32, 0x2f,
	0x5e, 0x28, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a,
	0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x5b, 0x3a,
	0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a, 0x24, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0xa1, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98, 0x02, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x0d,
	0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x1a, 0x02, 0x01, 0x02, 0x52, 0x06, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xba, 0x48, 0x25, 0x72, 0x23, 0x32, 0x21, 0x5e, 0x28, 0x5b, 0x5b,
	0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0xc8, 0x01, 0x01, 0x72, 0x15, 0x10, 0x01,
	0x32, 0x11, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e,
	0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18, 0xc8, 0x01, 0x01,
	0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d,
	0x5c, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01,
	0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda,
	0x01, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xba, 0x48, 0x1a, 0xc8, 0x01, 0x01, 0x72, 0x15, 0x10, 0x01, 0x32, 0x11, 0x5e, 0x5b,
	0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x09,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x1c, 0x92, 0x01,
	0x19, 0x18, 0x01, 0x22, 0x15, 0x72, 0x13, 0x32, 0x11, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72,
	0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x12, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x34, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x36, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x40, 0x0a, 0x08, 0x45, 0x78,
	0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x6f, 0x66, 0x42, 0x0b, 0x0a, 0x02,
	0x6f, 0x70, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x1c, 0x0a, 0x06, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x49, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x3b, 0x0a, 0x0a, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8,
	0x01, 0x01, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6d, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x45, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x0a, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x22, 0x9c, 0x05, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xe0, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x5a,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd9, 0x01, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x58, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcd, 0x01, 0x0a, 0x07, 0x41, 0x75, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x75, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a,
	0x55, 0x0a, 0x0c, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x6e, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x07, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x1a, 0x52, 0x0a, 0x0c,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x82, 0x06, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08,
	0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x75, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x5a, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55,
	0x0a, 0x0c, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x07, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x0a, 0x08,
	0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01, 0x01,
	0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0xc8, 0x01,
	0x01, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x80, 0x01, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01,
	0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xeb, 0x02, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a,
	0xba, 0x48, 0x17, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x11, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x2a, 0x07, 0x82, 0x01, 0x04, 0x1a, 0x02, 0x01, 0x02, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x54, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xda, 0x07, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0xba, 0x48, 0x17, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x11, 0x08,
	0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x2a, 0x07, 0x82, 0x01, 0x04, 0x1a, 0x02, 0x01, 0x02,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0xb0, 0x01, 0x0a,
	0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe9, 0x11, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x06, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x5b,
	0x0a, 0x05, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc1, 0x01, 0x0a, 0x07,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x6c, 0x6c,
	0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a,
	0xbc, 0x02, 0x0a, 0x05, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x3f,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x67,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x1a, 0x65, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x5e,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5d,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xac, 0x02,
	0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x1a, 0x9c, 0x03, 0x0a,
	0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x5d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0x75, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x1a, 0x42, 0x0a, 0x0c,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12,
	0x45, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x74, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x42, 0x6f, 0x0a, 0x18,
	0x64, 0x65, 0x76, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x76, 0x31, 0xaa, 0x02, 0x14, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_policy_v1_policy_proto_rawDescOnce sync.Once
	file_cerbos_policy_v1_policy_proto_rawDescData = file_cerbos_policy_v1_policy_proto_rawDesc
)

func file_cerbos_policy_v1_policy_proto_rawDescGZIP() []byte {
	file_cerbos_policy_v1_policy_proto_rawDescOnce.Do(func() {
		file_cerbos_policy_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_policy_v1_policy_proto_rawDescData)
	})
	return file_cerbos_policy_v1_policy_proto_rawDescData
}

var file_cerbos_policy_v1_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cerbos_policy_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_cerbos_policy_v1_policy_proto_goTypes = []interface{}{
	(TestResults_Result)(0),              // 0: cerbos.policy.v1.TestResults.Result
	(*Policy)(nil),                       // 1: cerbos.policy.v1.Policy
	(*SourceAttributes)(nil),             // 2: cerbos.policy.v1.SourceAttributes
	(*Metadata)(nil),                     // 3: cerbos.policy.v1.Metadata
	(*ResourcePolicy)(nil),               // 4: cerbos.policy.v1.ResourcePolicy
	(*ResourceRule)(nil),                 // 5: cerbos.policy.v1.ResourceRule
	(*PrincipalPolicy)(nil),              // 6: cerbos.policy.v1.PrincipalPolicy
	(*PrincipalRule)(nil),                // 7: cerbos.policy.v1.PrincipalRule
	(*DerivedRoles)(nil),                 // 8: cerbos.policy.v1.DerivedRoles
	(*RoleDef)(nil),                      // 9: cerbos.policy.v1.RoleDef
	(*ExportVariables)(nil),              // 10: cerbos.policy.v1.ExportVariables
	(*Variables)(nil),                    // 11: cerbos.policy.v1.Variables
	(*Condition)(nil),                    // 12: cerbos.policy.v1.Condition
	(*Match)(nil),                        // 13: cerbos.policy.v1.Match
	(*Output)(nil),                       // 14: cerbos.policy.v1.Output
	(*Schemas)(nil),                      // 15: cerbos.policy.v1.Schemas
	(*TestFixture)(nil),                  // 16: cerbos.policy.v1.TestFixture
	(*TestOptions)(nil),                  // 17: cerbos.policy.v1.TestOptions
	(*TestSuite)(nil),                    // 18: cerbos.policy.v1.TestSuite
	(*TestTable)(nil),                    // 19: cerbos.policy.v1.TestTable
	(*Test)(nil),                         // 20: cerbos.policy.v1.Test
	(*TestResults)(nil),                  // 21: cerbos.policy.v1.TestResults
	nil,                                  // 22: cerbos.policy.v1.Policy.VariablesEntry
	nil,                                  // 23: cerbos.policy.v1.SourceAttributes.AttributesEntry
	nil,                                  // 24: cerbos.policy.v1.Metadata.AnnotationsEntry
	(*PrincipalRule_Action)(nil),         // 25: cerbos.policy.v1.PrincipalRule.Action
	nil,                                  // 26: cerbos.policy.v1.ExportVariables.DefinitionsEntry
	nil,                                  // 27: cerbos.policy.v1.Variables.LocalEntry
	(*Match_ExprList)(nil),               // 28: cerbos.policy.v1.Match.ExprList
	(*Schemas_IgnoreWhen)(nil),           // 29: cerbos.policy.v1.Schemas.IgnoreWhen
	(*Schemas_Schema)(nil),               // 30: cerbos.policy.v1.Schemas.Schema
	(*TestFixture_Principals)(nil),       // 31: cerbos.policy.v1.TestFixture.Principals
	(*TestFixture_Resources)(nil),        // 32: cerbos.policy.v1.TestFixture.Resources
	(*TestFixture_AuxData)(nil),          // 33: cerbos.policy.v1.TestFixture.AuxData
	nil,                                  // 34: cerbos.policy.v1.TestFixture.Principals.PrincipalsEntry
	nil,                                  // 35: cerbos.policy.v1.TestFixture.Resources.ResourcesEntry
	nil,                                  // 36: cerbos.policy.v1.TestFixture.AuxData.AuxDataEntry
	nil,                                  // 37: cerbos.policy.v1.TestOptions.GlobalsEntry
	nil,                                  // 38: cerbos.policy.v1.TestSuite.PrincipalsEntry
	nil,                                  // 39: cerbos.policy.v1.TestSuite.ResourcesEntry
	nil,                                  // 40: cerbos.policy.v1.TestSuite.AuxDataEntry
	(*TestTable_Input)(nil),              // 41: cerbos.policy.v1.TestTable.Input
	(*TestTable_OutputExpectations)(nil), // 42: cerbos.policy.v1.TestTable.OutputExpectations
	(*TestTable_Expectation)(nil),        // 43: cerbos.policy.v1.TestTable.Expectation
	nil,                                  // 44: cerbos.policy.v1.TestTable.Expectation.ActionsEntry
	(*Test_TestName)(nil),                // 45: cerbos.policy.v1.Test.TestName
	(*Test_OutputEntries)(nil),           // 46: cerbos.policy.v1.Test.OutputEntries
	nil,                                  // 47: cerbos.policy.v1.Test.ExpectedEntry
	nil,                                  // 48: cerbos.policy.v1.Test.ExpectedOutputsEntry
	nil,                                  // 49: cerbos.policy.v1.Test.OutputEntries.EntriesEntry
	(*TestResults_Tally)(nil),            // 50: cerbos.policy.v1.TestResults.Tally
	(*TestResults_Summary)(nil),          // 51: cerbos.policy.v1.TestResults.Summary
	(*TestResults_Suite)(nil),            // 52: cerbos.policy.v1.TestResults.Suite
	(*TestResults_TestCase)(nil),         // 53: cerbos.policy.v1.TestResults.TestCase
	(*TestResults_Principal)(nil),        // 54: cerbos.policy.v1.TestResults.Principal
	(*TestResults_Resource)(nil),         // 55: cerbos.policy.v1.TestResults.Resource
	(*TestResults_Action)(nil),           // 56: cerbos.policy.v1.TestResults.Action
	(*TestResults_Details)(nil),          // 57: cerbos.policy.v1.TestResults.Details
	(*TestResults_OutputFailure)(nil),    // 58: cerbos.policy.v1.TestResults.OutputFailure
	(*TestResults_Failure)(nil),          // 59: cerbos.policy.v1.TestResults.Failure
	(*TestResults_Success)(nil),          // 60: cerbos.policy.v1.TestResults.Success
	(*TestResults_OutputFailure_MismatchedValue)(nil), // 61: cerbos.policy.v1.TestResults.OutputFailure.MismatchedValue
	(*TestResults_OutputFailure_MissingValue)(nil),    // 62: cerbos.policy.v1.TestResults.OutputFailure.MissingValue
	(*wrapperspb.UInt64Value)(nil),                    // 63: google.protobuf.UInt64Value
	(v1.Effect)(0),                                    // 64: cerbos.effect.v1.Effect
	(*timestamppb.Timestamp)(nil),                     // 65: google.protobuf.Timestamp
	(*v11.CheckInput)(nil),                            // 66: cerbos.engine.v1.CheckInput
	(*structpb.Value)(nil),                            // 67: google.protobuf.Value
	(*v11.Principal)(nil),                             // 68: cerbos.engine.v1.Principal
	(*v11.Resource)(nil),                              // 69: cerbos.engine.v1.Resource
	(*v11.AuxData)(nil),                               // 70: cerbos.engine.v1.AuxData
	(*v11.OutputEntry)(nil),                           // 71: cerbos.engine.v1.OutputEntry
	(*v11.Trace)(nil),                                 // 72: cerbos.engine.v1.Trace
}
var file_cerbos_policy_v1_policy_proto_depIdxs = []int32{
	3,  // 0: cerbos.policy.v1.Policy.metadata:type_name -> cerbos.policy.v1.Metadata
	4,  // 1: cerbos.policy.v1.Policy.resource_policy:type_name -> cerbos.policy.v1.ResourcePolicy
	6,  // 2: cerbos.policy.v1.Policy.principal_policy:type_name -> cerbos.policy.v1.PrincipalPolicy
	8,  // 3: cerbos.policy.v1.Policy.derived_roles:type_name -> cerbos.policy.v1.DerivedRoles
	10, // 4: cerbos.policy.v1.Policy.export_variables:type_name -> cerbos.policy.v1.ExportVariables
	22, // 5: cerbos.policy.v1.Policy.variables:type_name -> cerbos.policy.v1.Policy.VariablesEntry
	23, // 6: cerbos.policy.v1.SourceAttributes.attributes:type_name -> cerbos.policy.v1.SourceAttributes.AttributesEntry
	24, // 7: cerbos.policy.v1.Metadata.annotations:type_name -> cerbos.policy.v1.Metadata.AnnotationsEntry
	63, // 8: cerbos.policy.v1.Metadata.hash:type_name -> google.protobuf.UInt64Value
	2,  // 9: cerbos.policy.v1.Metadata.source_attributes:type_name -> cerbos.policy.v1.SourceAttributes
	5,  // 10: cerbos.policy.v1.ResourcePolicy.rules:type_name -> cerbos.policy.v1.ResourceRule
	15, // 11: cerbos.policy.v1.ResourcePolicy.schemas:type_name -> cerbos.policy.v1.Schemas
	11, // 12: cerbos.policy.v1.ResourcePolicy.variables:type_name -> cerbos.policy.v1.Variables
	12, // 13: cerbos.policy.v1.ResourceRule.condition:type_name -> cerbos.policy.v1.Condition
	64, // 14: cerbos.policy.v1.ResourceRule.effect:type_name -> cerbos.effect.v1.Effect
	14, // 15: cerbos.policy.v1.ResourceRule.output:type_name -> cerbos.policy.v1.Output
	7,  // 16: cerbos.policy.v1.PrincipalPolicy.rules:type_name -> cerbos.policy.v1.PrincipalRule
	11, // 17: cerbos.policy.v1.PrincipalPolicy.variables:type_name -> cerbos.policy.v1.Variables
	25, // 18: cerbos.policy.v1.PrincipalRule.actions:type_name -> cerbos.policy.v1.PrincipalRule.Action
	9,  // 19: cerbos.policy.v1.DerivedRoles.definitions:type_name -> cerbos.policy.v1.RoleDef
	11, // 20: cerbos.policy.v1.DerivedRoles.variables:type_name -> cerbos.policy.v1.Variables
	12, // 21: cerbos.policy.v1.RoleDef.condition:type_name -> cerbos.policy.v1.Condition
	26, // 22: cerbos.policy.v1.ExportVariables.definitions:type_name -> cerbos.policy.v1.ExportVariables.DefinitionsEntry
	27, // 23: cerbos.policy.v1.Variables.local:type_name -> cerbos.policy.v1.Variables.LocalEntry
	13, // 24: cerbos.policy.v1.Condition.match:type_name -> cerbos.policy.v1.Match
	28, // 25: cerbos.policy.v1.Match.all:type_name -> cerbos.policy.v1.Match.ExprList
	28, // 26: cerbos.policy.v1.Match.any:type_name -> cerbos.policy.v1.Match.ExprList
	28, // 27: cerbos.policy.v1.Match.none:type_name -> cerbos.policy.v1.Match.ExprList
	30, // 28: cerbos.policy.v1.Schemas.principal_schema:type_name -> cerbos.policy.v1.Schemas.Schema
	30, // 29: cerbos.policy.v1.Schemas.resource_schema:type_name -> cerbos.policy.v1.Schemas.Schema
	65, // 30: cerbos.policy.v1.TestOptions.now:type_name -> google.protobuf.Timestamp
	37, // 31: cerbos.policy.v1.TestOptions.globals:type_name -> cerbos.policy.v1.TestOptions.GlobalsEntry
	19, // 32: cerbos.policy.v1.TestSuite.tests:type_name -> cerbos.policy.v1.TestTable
	38, // 33: cerbos.policy.v1.TestSuite.principals:type_name -> cerbos.policy.v1.TestSuite.PrincipalsEntry
	39, // 34: cerbos.policy.v1.TestSuite.resources:type_name -> cerbos.policy.v1.TestSuite.ResourcesEntry
	40, // 35: cerbos.policy.v1.TestSuite.aux_data:type_name -> cerbos.policy.v1.TestSuite.AuxDataEntry
	17, // 36: cerbos.policy.v1.TestSuite.options:type_name -> cerbos.policy.v1.TestOptions
	41, // 37: cerbos.policy.v1.TestTable.input:type_name -> cerbos.policy.v1.TestTable.Input
	43, // 38: cerbos.policy.v1.TestTable.expected:type_name -> cerbos.policy.v1.TestTable.Expectation
	17, // 39: cerbos.policy.v1.TestTable.options:type_name -> cerbos.policy.v1.TestOptions
	45, // 40: cerbos.policy.v1.Test.name:type_name -> cerbos.policy.v1.Test.TestName
	66, // 41: cerbos.policy.v1.Test.input:type_name -> cerbos.engine.v1.CheckInput
	47, // 42: cerbos.policy.v1.Test.expected:type_name -> cerbos.policy.v1.Test.ExpectedEntry
	17, // 43: cerbos.policy.v1.Test.options:type_name -> cerbos.policy.v1.TestOptions
	48, // 44: cerbos.policy.v1.Test.expected_outputs:type_name -> cerbos.policy.v1.Test.ExpectedOutputsEntry
	52, // 45: cerbos.policy.v1.TestResults.suites:type_name -> cerbos.policy.v1.TestResults.Suite
	51, // 46: cerbos.policy.v1.TestResults.summary:type_name -> cerbos.policy.v1.TestResults.Summary
	67, // 47: cerbos.policy.v1.SourceAttributes.AttributesEntry.value:type_name -> google.protobuf.Value
	12, // 48: cerbos.policy.v1.PrincipalRule.Action.condition:type_name -> cerbos.policy.v1.Condition
	64, // 49: cerbos.policy.v1.PrincipalRule.Action.effect:type_name -> cerbos.effect.v1.Effect
	14, // 50: cerbos.policy.v1.PrincipalRule.Action.output:type_name -> cerbos.policy.v1.Output
	13, // 51: cerbos.policy.v1.Match.ExprList.of:type_name -> cerbos.policy.v1.Match
	29, // 52: cerbos.policy.v1.Schemas.Schema.ignore_when:type_name -> cerbos.policy.v1.Schemas.IgnoreWhen
	34, // 53: cerbos.policy.v1.TestFixture.Principals.principals:type_name -> cerbos.policy.v1.TestFixture.Principals.PrincipalsEntry
	35, // 54: cerbos.policy.v1.TestFixture.Resources.resources:type_name -> cerbos.policy.v1.TestFixture.Resources.ResourcesEntry
	36, // 55: cerbos.policy.v1.TestFixture.AuxData.aux_data:type_name -> cerbos.policy.v1.TestFixture.AuxData.AuxDataEntry
	68, // 56: cerbos.policy.v1.TestFixture.Principals.PrincipalsEntry.value:type_name -> cerbos.engine.v1.Principal
	69, // 57: cerbos.policy.v1.TestFixture.Resources.ResourcesEntry.value:type_name -> cerbos.engine.v1.Resource
	70, // 58: cerbos.policy.v1.TestFixture.AuxData.AuxDataEntry.value:type_name -> cerbos.engine.v1.AuxData
	67, // 59: cerbos.policy.v1.TestOptions.GlobalsEntry.value:type_name -> google.protobuf.Value
	68, // 60: cerbos.policy.v1.TestSuite.PrincipalsEntry.value:type_name -> cerbos.engine.v1.Principal
	69, // 61: cerbos.policy.v1.TestSuite.ResourcesEntry.value:type_name -> cerbos.engine.v1.Resource
	70, // 62: cerbos.policy.v1.TestSuite.AuxDataEntry.value:type_name -> cerbos.engine.v1.AuxData
	71, // 63: cerbos.policy.v1.TestTable.OutputExpectations.expected:type_name -> cerbos.engine.v1.OutputEntry
	44, // 64: cerbos.policy.v1.TestTable.Expectation.actions:type_name -> cerbos.policy.v1.TestTable.Expectation.ActionsEntry
	42, // 65: cerbos.policy.v1.TestTable.Expectation.outputs:type_name -> cerbos.policy.v1.TestTable.OutputExpectations
	64, // 66: cerbos.policy.v1.TestTable.Expectation.ActionsEntry.value:type_name -> cerbos.effect.v1.Effect
	49, // 67: cerbos.policy.v1.Test.OutputEntries.entries:type_name -> cerbos.policy.v1.Test.OutputEntries.EntriesEntry
	64, // 68: cerbos.policy.v1.Test.ExpectedEntry.value:type_name -> cerbos.effect.v1.Effect
	46, // 69: cerbos.policy.v1.Test.ExpectedOutputsEntry.value:type_name -> cerbos.policy.v1.Test.OutputEntries
	67, // 70: cerbos.policy.v1.Test.OutputEntries.EntriesEntry.value:type_name -> google.protobuf.Value
	0,  // 71: cerbos.policy.v1.TestResults.Tally.result:type_name -> cerbos.policy.v1.TestResults.Result
	0,  // 72: cerbos.policy.v1.TestResults.Summary.overall_result:type_name -> cerbos.policy.v1.TestResults.Result
	50, // 73: cerbos.policy.v1.TestResults.Summary.result_counts:type_name -> cerbos.policy.v1.TestResults.Tally
	54, // 74: cerbos.policy.v1.TestResults.Suite.principals:type_name -> cerbos.policy.v1.TestResults.Principal
	51, // 75: cerbos.policy.v1.TestResults.Suite.summary:type_name -> cerbos.policy.v1.TestResults.Summary
	53, // 76: cerbos.policy.v1.TestResults.Suite.test_cases:type_name -> cerbos.policy.v1.TestResults.TestCase
	54, // 77: cerbos.policy.v1.TestResults.TestCase.principals:type_name -> cerbos.policy.v1.TestResults.Principal
	55, // 78: cerbos.policy.v1.TestResults.Principal.resources:type_name -> cerbos.policy.v1.TestResults.Resource
	56, // 79: cerbos.policy.v1.TestResults.Resource.actions:type_name -> cerbos.policy.v1.TestResults.Action
	57, // 80: cerbos.policy.v1.TestResults.Action.details:type_name -> cerbos.policy.v1.TestResults.Details
	0,  // 81: cerbos.policy.v1.TestResults.Details.result:type_name -> cerbos.policy.v1.TestResults.Result
	59, // 82: cerbos.policy.v1.TestResults.Details.failure:type_name -> cerbos.policy.v1.TestResults.Failure
	60, // 83: cerbos.policy.v1.TestResults.Details.success:type_name -> cerbos.policy.v1.TestResults.Success
	72, // 84: cerbos.policy.v1.TestResults.Details.engine_trace:type_name -> cerbos.engine.v1.Trace
	61, // 85: cerbos.policy.v1.TestResults.OutputFailure.mismatched:type_name -> cerbos.policy.v1.TestResults.OutputFailure.MismatchedValue
	62, // 86: cerbos.policy.v1.TestResults.OutputFailure.missing:type_name -> cerbos.policy.v1.TestResults.OutputFailure.MissingValue
	64, // 87: cerbos.policy.v1.TestResults.Failure.expected:type_name -> cerbos.effect.v1.Effect
	64, // 88: cerbos.policy.v1.TestResults.Failure.actual:type_name -> cerbos.effect.v1.Effect
	58, // 89: cerbos.policy.v1.TestResults.Failure.outputs:type_name -> cerbos.policy.v1.TestResults.OutputFailure
	64, // 90: cerbos.policy.v1.TestResults.Success.effect:type_name -> cerbos.effect.v1.Effect
	71, // 91: cerbos.policy.v1.TestResults.Success.outputs:type_name -> cerbos.engine.v1.OutputEntry
	67, // 92: cerbos.policy.v1.TestResults.OutputFailure.MismatchedValue.expected:type_name -> google.protobuf.Value
	67, // 93: cerbos.policy.v1.TestResults.OutputFailure.MismatchedValue.actual:type_name -> google.protobuf.Value
	67, // 94: cerbos.policy.v1.TestResults.OutputFailure.MissingValue.expected:type_name -> google.protobuf.Value
	95, // [95:95] is the sub-list for method output_type
	95, // [95:95] is the sub-list for method input_type
	95, // [95:95] is the sub-list for extension type_name
	95, // [95:95] is the sub-list for extension extendee
	0,  // [0:95] is the sub-list for field type_name
}

func init() { file_cerbos_policy_v1_policy_proto_init() }
func file_cerbos_policy_v1_policy_proto_init() {
	if File_cerbos_policy_v1_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_policy_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivedRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalRule_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match_ExprList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemas_IgnoreWhen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemas_Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFixture_Principals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFixture_Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFixture_AuxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTable_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTable_OutputExpectations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTable_Expectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test_TestName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test_OutputEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Tally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Suite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Principal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_OutputFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_OutputFailure_MismatchedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_policy_v1_policy_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResults_OutputFailure_MissingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_policy_v1_policy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Policy_ResourcePolicy)(nil),
		(*Policy_PrincipalPolicy)(nil),
		(*Policy_DerivedRoles)(nil),
		(*Policy_ExportVariables)(nil),
	}
	file_cerbos_policy_v1_policy_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Condition_Match)(nil),
		(*Condition_Script)(nil),
	}
	file_cerbos_policy_v1_policy_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Match_All)(nil),
		(*Match_Any)(nil),
		(*Match_None)(nil),
		(*Match_Expr)(nil),
	}
	file_cerbos_policy_v1_policy_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*TestResults_Details_Failure)(nil),
		(*TestResults_Details_Error)(nil),
		(*TestResults_Details_Success)(nil),
	}
	file_cerbos_policy_v1_policy_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*TestResults_OutputFailure_Mismatched)(nil),
		(*TestResults_OutputFailure_Missing)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_policy_v1_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_policy_v1_policy_proto_goTypes,
		DependencyIndexes: file_cerbos_policy_v1_policy_proto_depIdxs,
		EnumInfos:         file_cerbos_policy_v1_policy_proto_enumTypes,
		MessageInfos:      file_cerbos_policy_v1_policy_proto_msgTypes,
	}.Build()
	File_cerbos_policy_v1_policy_proto = out.File
	file_cerbos_policy_v1_policy_proto_rawDesc = nil
	file_cerbos_policy_v1_policy_proto_goTypes = nil
	file_cerbos_policy_v1_policy_proto_depIdxs = nil
}
