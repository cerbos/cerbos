// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cerbos/private/v1/test.proto

package privatev1

import (
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/audit/v1"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/engine/v1"
	v13 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	v16 "github.com/cerbos/cerbos/api/genpb/cerbos/request/v1"
	v17 "github.com/cerbos/cerbos/api/genpb/cerbos/response/v1"
	v12 "github.com/cerbos/cerbos/api/genpb/cerbos/runtime/v1"
	v14 "github.com/cerbos/cerbos/api/genpb/cerbos/schema/v1"
	v15 "github.com/cerbos/cerbos/api/genpb/cerbos/source/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EngineTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description      string                  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Inputs           []*v1.CheckInput        `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	WantOutputs      []*v1.CheckOutput       `protobuf:"bytes,3,rep,name=want_outputs,json=wantOutputs,proto3" json:"want_outputs,omitempty"`
	WantError        bool                    `protobuf:"varint,4,opt,name=want_error,json=wantError,proto3" json:"want_error,omitempty"`
	WantDecisionLogs []*v11.DecisionLogEntry `protobuf:"bytes,5,rep,name=want_decision_logs,json=wantDecisionLogs,proto3" json:"want_decision_logs,omitempty"`
}

func (x *EngineTestCase) Reset() {
	*x = EngineTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineTestCase) ProtoMessage() {}

func (x *EngineTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineTestCase.ProtoReflect.Descriptor instead.
func (*EngineTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *EngineTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EngineTestCase) GetInputs() []*v1.CheckInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *EngineTestCase) GetWantOutputs() []*v1.CheckOutput {
	if x != nil {
		return x.WantOutputs
	}
	return nil
}

func (x *EngineTestCase) GetWantError() bool {
	if x != nil {
		return x.WantError
	}
	return false
}

func (x *EngineTestCase) GetWantDecisionLogs() []*v11.DecisionLogEntry {
	if x != nil {
		return x.WantDecisionLogs
	}
	return nil
}

type ServerTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	WantError   bool                   `protobuf:"varint,3,opt,name=want_error,json=wantError,proto3" json:"want_error,omitempty"`
	WantStatus  *ServerTestCase_Status `protobuf:"bytes,4,opt,name=want_status,json=wantStatus,proto3" json:"want_status,omitempty"`
	// Types that are assignable to CallKind:
	//
	//	*ServerTestCase_CheckResourceSet
	//	*ServerTestCase_CheckResourceBatch
	//	*ServerTestCase_PlaygroundValidate
	//	*ServerTestCase_PlaygroundEvaluate
	//	*ServerTestCase_AdminAddOrUpdatePolicy
	//	*ServerTestCase_PlaygroundProxy
	//	*ServerTestCase_PlanResources
	//	*ServerTestCase_AdminAddOrUpdateSchema
	//	*ServerTestCase_PlaygroundTest
	//	*ServerTestCase_CheckResources
	CallKind isServerTestCase_CallKind `protobuf_oneof:"call_kind"`
}

func (x *ServerTestCase) Reset() {
	*x = ServerTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase) ProtoMessage() {}

func (x *ServerTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase.ProtoReflect.Descriptor instead.
func (*ServerTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *ServerTestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServerTestCase) GetWantError() bool {
	if x != nil {
		return x.WantError
	}
	return false
}

func (x *ServerTestCase) GetWantStatus() *ServerTestCase_Status {
	if x != nil {
		return x.WantStatus
	}
	return nil
}

func (m *ServerTestCase) GetCallKind() isServerTestCase_CallKind {
	if m != nil {
		return m.CallKind
	}
	return nil
}

func (x *ServerTestCase) GetCheckResourceSet() *ServerTestCase_CheckResourceSetCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_CheckResourceSet); ok {
		return x.CheckResourceSet
	}
	return nil
}

func (x *ServerTestCase) GetCheckResourceBatch() *ServerTestCase_CheckResourceBatchCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_CheckResourceBatch); ok {
		return x.CheckResourceBatch
	}
	return nil
}

func (x *ServerTestCase) GetPlaygroundValidate() *ServerTestCase_PlaygroundValidateCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_PlaygroundValidate); ok {
		return x.PlaygroundValidate
	}
	return nil
}

func (x *ServerTestCase) GetPlaygroundEvaluate() *ServerTestCase_PlaygroundEvaluateCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_PlaygroundEvaluate); ok {
		return x.PlaygroundEvaluate
	}
	return nil
}

func (x *ServerTestCase) GetAdminAddOrUpdatePolicy() *ServerTestCase_AdminAddOrUpdatePolicyCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_AdminAddOrUpdatePolicy); ok {
		return x.AdminAddOrUpdatePolicy
	}
	return nil
}

func (x *ServerTestCase) GetPlaygroundProxy() *ServerTestCase_PlaygroundProxyCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_PlaygroundProxy); ok {
		return x.PlaygroundProxy
	}
	return nil
}

func (x *ServerTestCase) GetPlanResources() *ServerTestCase_PlanResourcesCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_PlanResources); ok {
		return x.PlanResources
	}
	return nil
}

func (x *ServerTestCase) GetAdminAddOrUpdateSchema() *ServerTestCase_AdminAddOrUpdateSchemaCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_AdminAddOrUpdateSchema); ok {
		return x.AdminAddOrUpdateSchema
	}
	return nil
}

func (x *ServerTestCase) GetPlaygroundTest() *ServerTestCase_PlaygroundTestCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_PlaygroundTest); ok {
		return x.PlaygroundTest
	}
	return nil
}

func (x *ServerTestCase) GetCheckResources() *ServerTestCase_CheckResourcesCall {
	if x, ok := x.GetCallKind().(*ServerTestCase_CheckResources); ok {
		return x.CheckResources
	}
	return nil
}

type isServerTestCase_CallKind interface {
	isServerTestCase_CallKind()
}

type ServerTestCase_CheckResourceSet struct {
	CheckResourceSet *ServerTestCase_CheckResourceSetCall `protobuf:"bytes,5,opt,name=check_resource_set,json=checkResourceSet,proto3,oneof"`
}

type ServerTestCase_CheckResourceBatch struct {
	CheckResourceBatch *ServerTestCase_CheckResourceBatchCall `protobuf:"bytes,6,opt,name=check_resource_batch,json=checkResourceBatch,proto3,oneof"`
}

type ServerTestCase_PlaygroundValidate struct {
	PlaygroundValidate *ServerTestCase_PlaygroundValidateCall `protobuf:"bytes,7,opt,name=playground_validate,json=playgroundValidate,proto3,oneof"`
}

type ServerTestCase_PlaygroundEvaluate struct {
	PlaygroundEvaluate *ServerTestCase_PlaygroundEvaluateCall `protobuf:"bytes,8,opt,name=playground_evaluate,json=playgroundEvaluate,proto3,oneof"`
}

type ServerTestCase_AdminAddOrUpdatePolicy struct {
	AdminAddOrUpdatePolicy *ServerTestCase_AdminAddOrUpdatePolicyCall `protobuf:"bytes,9,opt,name=admin_add_or_update_policy,json=adminAddOrUpdatePolicy,proto3,oneof"`
}

type ServerTestCase_PlaygroundProxy struct {
	PlaygroundProxy *ServerTestCase_PlaygroundProxyCall `protobuf:"bytes,10,opt,name=playground_proxy,json=playgroundProxy,proto3,oneof"`
}

type ServerTestCase_PlanResources struct {
	PlanResources *ServerTestCase_PlanResourcesCall `protobuf:"bytes,11,opt,name=plan_resources,json=planResources,proto3,oneof"`
}

type ServerTestCase_AdminAddOrUpdateSchema struct {
	AdminAddOrUpdateSchema *ServerTestCase_AdminAddOrUpdateSchemaCall `protobuf:"bytes,12,opt,name=admin_add_or_update_schema,json=adminAddOrUpdateSchema,proto3,oneof"`
}

type ServerTestCase_PlaygroundTest struct {
	PlaygroundTest *ServerTestCase_PlaygroundTestCall `protobuf:"bytes,13,opt,name=playground_test,json=playgroundTest,proto3,oneof"`
}

type ServerTestCase_CheckResources struct {
	CheckResources *ServerTestCase_CheckResourcesCall `protobuf:"bytes,14,opt,name=check_resources,json=checkResources,proto3,oneof"`
}

func (*ServerTestCase_CheckResourceSet) isServerTestCase_CallKind() {}

func (*ServerTestCase_CheckResourceBatch) isServerTestCase_CallKind() {}

func (*ServerTestCase_PlaygroundValidate) isServerTestCase_CallKind() {}

func (*ServerTestCase_PlaygroundEvaluate) isServerTestCase_CallKind() {}

func (*ServerTestCase_AdminAddOrUpdatePolicy) isServerTestCase_CallKind() {}

func (*ServerTestCase_PlaygroundProxy) isServerTestCase_CallKind() {}

func (*ServerTestCase_PlanResources) isServerTestCase_CallKind() {}

func (*ServerTestCase_AdminAddOrUpdateSchema) isServerTestCase_CallKind() {}

func (*ServerTestCase_PlaygroundTest) isServerTestCase_CallKind() {}

func (*ServerTestCase_CheckResources) isServerTestCase_CallKind() {}

type IndexBuilderTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files                map[string]string                       `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WantErrList          *v12.IndexBuildErrors                   `protobuf:"bytes,2,opt,name=want_err_list,json=wantErrList,proto3" json:"want_err_list,omitempty"`
	WantErr              string                                  `protobuf:"bytes,3,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
	WantCompilationUnits []*IndexBuilderTestCase_CompilationUnit `protobuf:"bytes,4,rep,name=want_compilation_units,json=wantCompilationUnits,proto3" json:"want_compilation_units,omitempty"`
}

func (x *IndexBuilderTestCase) Reset() {
	*x = IndexBuilderTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuilderTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuilderTestCase) ProtoMessage() {}

func (x *IndexBuilderTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuilderTestCase.ProtoReflect.Descriptor instead.
func (*IndexBuilderTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{2}
}

func (x *IndexBuilderTestCase) GetFiles() map[string]string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *IndexBuilderTestCase) GetWantErrList() *v12.IndexBuildErrors {
	if x != nil {
		return x.WantErrList
	}
	return nil
}

func (x *IndexBuilderTestCase) GetWantErr() string {
	if x != nil {
		return x.WantErr
	}
	return ""
}

func (x *IndexBuilderTestCase) GetWantCompilationUnits() []*IndexBuilderTestCase_CompilationUnit {
	if x != nil {
		return x.WantCompilationUnits
	}
	return nil
}

type CompileTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainDef       string                       `protobuf:"bytes,1,opt,name=main_def,json=mainDef,proto3" json:"main_def,omitempty"`
	WantErrors    []*v12.CompileErrors_Err     `protobuf:"bytes,2,rep,name=want_errors,json=wantErrors,proto3" json:"want_errors,omitempty"`
	WantVariables []*CompileTestCase_Variables `protobuf:"bytes,3,rep,name=want_variables,json=wantVariables,proto3" json:"want_variables,omitempty"`
}

func (x *CompileTestCase) Reset() {
	*x = CompileTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileTestCase) ProtoMessage() {}

func (x *CompileTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileTestCase.ProtoReflect.Descriptor instead.
func (*CompileTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{3}
}

func (x *CompileTestCase) GetMainDef() string {
	if x != nil {
		return x.MainDef
	}
	return ""
}

func (x *CompileTestCase) GetWantErrors() []*v12.CompileErrors_Err {
	if x != nil {
		return x.WantErrors
	}
	return nil
}

func (x *CompileTestCase) GetWantVariables() []*CompileTestCase_Variables {
	if x != nil {
		return x.WantVariables
	}
	return nil
}

type CelTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *v13.Match  `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Request   *v1.Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Want      bool        `protobuf:"varint,3,opt,name=want,proto3" json:"want,omitempty"`
	WantError bool        `protobuf:"varint,4,opt,name=want_error,json=wantError,proto3" json:"want_error,omitempty"`
}

func (x *CelTestCase) Reset() {
	*x = CelTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CelTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CelTestCase) ProtoMessage() {}

func (x *CelTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CelTestCase.ProtoReflect.Descriptor instead.
func (*CelTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{4}
}

func (x *CelTestCase) GetCondition() *v13.Match {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CelTestCase) GetRequest() *v1.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CelTestCase) GetWant() bool {
	if x != nil {
		return x.Want
	}
	return false
}

func (x *CelTestCase) GetWantError() bool {
	if x != nil {
		return x.WantError
	}
	return false
}

type SchemaTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string       `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	SchemaRefs  *v13.Schemas `protobuf:"bytes,2,opt,name=schema_refs,json=schemaRefs,proto3" json:"schema_refs,omitempty"`
	// Types that are assignable to Input:
	//
	//	*SchemaTestCase_CheckInput
	//	*SchemaTestCase_PlanResourcesInput
	Input                isSchemaTestCase_Input `protobuf_oneof:"input"`
	WantError            bool                   `protobuf:"varint,5,opt,name=want_error,json=wantError,proto3" json:"want_error,omitempty"`
	WantValidationErrors []*v14.ValidationError `protobuf:"bytes,6,rep,name=want_validation_errors,json=wantValidationErrors,proto3" json:"want_validation_errors,omitempty"`
}

func (x *SchemaTestCase) Reset() {
	*x = SchemaTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTestCase) ProtoMessage() {}

func (x *SchemaTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTestCase.ProtoReflect.Descriptor instead.
func (*SchemaTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaTestCase) GetSchemaRefs() *v13.Schemas {
	if x != nil {
		return x.SchemaRefs
	}
	return nil
}

func (m *SchemaTestCase) GetInput() isSchemaTestCase_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *SchemaTestCase) GetCheckInput() *v1.CheckInput {
	if x, ok := x.GetInput().(*SchemaTestCase_CheckInput); ok {
		return x.CheckInput
	}
	return nil
}

func (x *SchemaTestCase) GetPlanResourcesInput() *v1.PlanResourcesInput {
	if x, ok := x.GetInput().(*SchemaTestCase_PlanResourcesInput); ok {
		return x.PlanResourcesInput
	}
	return nil
}

func (x *SchemaTestCase) GetWantError() bool {
	if x != nil {
		return x.WantError
	}
	return false
}

func (x *SchemaTestCase) GetWantValidationErrors() []*v14.ValidationError {
	if x != nil {
		return x.WantValidationErrors
	}
	return nil
}

type isSchemaTestCase_Input interface {
	isSchemaTestCase_Input()
}

type SchemaTestCase_CheckInput struct {
	CheckInput *v1.CheckInput `protobuf:"bytes,3,opt,name=check_input,json=checkInput,proto3,oneof"`
}

type SchemaTestCase_PlanResourcesInput struct {
	PlanResourcesInput *v1.PlanResourcesInput `protobuf:"bytes,4,opt,name=plan_resources_input,json=planResourcesInput,proto3,oneof"`
}

func (*SchemaTestCase_CheckInput) isSchemaTestCase_Input() {}

func (*SchemaTestCase_PlanResourcesInput) isSchemaTestCase_Input() {}

type ValidationErrContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*v14.ValidationError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ValidationErrContainer) Reset() {
	*x = ValidationErrContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrContainer) ProtoMessage() {}

func (x *ValidationErrContainer) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrContainer.ProtoReflect.Descriptor instead.
func (*ValidationErrContainer) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{6}
}

func (x *ValidationErrContainer) GetErrors() []*v14.ValidationError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type AttrWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr map[string]*structpb.Value `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AttrWrapper) Reset() {
	*x = AttrWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrWrapper) ProtoMessage() {}

func (x *AttrWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrWrapper.ProtoReflect.Descriptor instead.
func (*AttrWrapper) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{7}
}

func (x *AttrWrapper) GetAttr() map[string]*structpb.Value {
	if x != nil {
		return x.Attr
	}
	return nil
}

type QueryPlannerTestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                        `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Principal   *v1.Principal                 `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	Tests       []*QueryPlannerTestSuite_Test `protobuf:"bytes,3,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *QueryPlannerTestSuite) Reset() {
	*x = QueryPlannerTestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlannerTestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlannerTestSuite) ProtoMessage() {}

func (x *QueryPlannerTestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlannerTestSuite.ProtoReflect.Descriptor instead.
func (*QueryPlannerTestSuite) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{8}
}

func (x *QueryPlannerTestSuite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryPlannerTestSuite) GetPrincipal() *v1.Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *QueryPlannerTestSuite) GetTests() []*QueryPlannerTestSuite_Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

type VerifyTestFixtureGetTestsTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table     *v13.TestTable `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	WantTests []*v13.Test    `protobuf:"bytes,2,rep,name=want_tests,json=wantTests,proto3" json:"want_tests,omitempty"`
	WantErr   string         `protobuf:"bytes,3,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
}

func (x *VerifyTestFixtureGetTestsTestCase) Reset() {
	*x = VerifyTestFixtureGetTestsTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTestFixtureGetTestsTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTestFixtureGetTestsTestCase) ProtoMessage() {}

func (x *VerifyTestFixtureGetTestsTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTestFixtureGetTestsTestCase.ProtoReflect.Descriptor instead.
func (*VerifyTestFixtureGetTestsTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyTestFixtureGetTestsTestCase) GetTable() *v13.TestTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *VerifyTestFixtureGetTestsTestCase) GetWantTests() []*v13.Test {
	if x != nil {
		return x.WantTests
	}
	return nil
}

func (x *VerifyTestFixtureGetTestsTestCase) GetWantErr() string {
	if x != nil {
		return x.WantErr
	}
	return ""
}

type QueryPlannerFilterTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Input       *v1.PlanResourcesFilter `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	WantFilter  *v1.PlanResourcesFilter `protobuf:"bytes,3,opt,name=want_filter,json=wantFilter,proto3" json:"want_filter,omitempty"`
	WantString  string                  `protobuf:"bytes,4,opt,name=want_string,json=wantString,proto3" json:"want_string,omitempty"`
}

func (x *QueryPlannerFilterTestCase) Reset() {
	*x = QueryPlannerFilterTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlannerFilterTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlannerFilterTestCase) ProtoMessage() {}

func (x *QueryPlannerFilterTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlannerFilterTestCase.ProtoReflect.Descriptor instead.
func (*QueryPlannerFilterTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{10}
}

func (x *QueryPlannerFilterTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryPlannerFilterTestCase) GetInput() *v1.PlanResourcesFilter {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *QueryPlannerFilterTestCase) GetWantFilter() *v1.PlanResourcesFilter {
	if x != nil {
		return x.WantFilter
	}
	return nil
}

func (x *QueryPlannerFilterTestCase) GetWantString() string {
	if x != nil {
		return x.WantString
	}
	return ""
}

type VerifyTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string           `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	WantErr     bool             `protobuf:"varint,2,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
	Want        *v13.TestResults `protobuf:"bytes,3,opt,name=want,proto3" json:"want,omitempty"`
}

func (x *VerifyTestCase) Reset() {
	*x = VerifyTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTestCase) ProtoMessage() {}

func (x *VerifyTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTestCase.ProtoReflect.Descriptor instead.
func (*VerifyTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VerifyTestCase) GetWantErr() bool {
	if x != nil {
		return x.WantErr
	}
	return false
}

func (x *VerifyTestCase) GetWant() *v13.TestResults {
	if x != nil {
		return x.Want
	}
	return nil
}

type ProtoYamlTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Want        []*ProtoYamlTestCase_Want `protobuf:"bytes,2,rep,name=want,proto3" json:"want,omitempty"`
	WantErrors  []*v15.Error              `protobuf:"bytes,3,rep,name=want_errors,json=wantErrors,proto3" json:"want_errors,omitempty"`
}

func (x *ProtoYamlTestCase) Reset() {
	*x = ProtoYamlTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoYamlTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoYamlTestCase) ProtoMessage() {}

func (x *ProtoYamlTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoYamlTestCase.ProtoReflect.Descriptor instead.
func (*ProtoYamlTestCase) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{12}
}

func (x *ProtoYamlTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProtoYamlTestCase) GetWant() []*ProtoYamlTestCase_Want {
	if x != nil {
		return x.Want
	}
	return nil
}

func (x *ProtoYamlTestCase) GetWantErrors() []*v15.Error {
	if x != nil {
		return x.WantErrors
	}
	return nil
}

// Taken from
// https://github.com/bufbuild/protobuf-conformance/blob/main/proto/google/protobuf/test_messages_proto3.proto
type WellKnownTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolWrapper           *wrapperspb.BoolValue     `protobuf:"bytes,1,opt,name=bool_wrapper,json=boolWrapper,proto3" json:"bool_wrapper,omitempty"`
	Int32Wrapper          *wrapperspb.Int32Value    `protobuf:"bytes,2,opt,name=int32_wrapper,json=int32Wrapper,proto3" json:"int32_wrapper,omitempty"`
	Int64Wrapper          *wrapperspb.Int64Value    `protobuf:"bytes,3,opt,name=int64_wrapper,json=int64Wrapper,proto3" json:"int64_wrapper,omitempty"`
	Uint32Wrapper         *wrapperspb.UInt32Value   `protobuf:"bytes,4,opt,name=uint32_wrapper,json=uint32Wrapper,proto3" json:"uint32_wrapper,omitempty"`
	Uint64Wrapper         *wrapperspb.UInt64Value   `protobuf:"bytes,5,opt,name=uint64_wrapper,json=uint64Wrapper,proto3" json:"uint64_wrapper,omitempty"`
	FloatWrapper          *wrapperspb.FloatValue    `protobuf:"bytes,6,opt,name=float_wrapper,json=floatWrapper,proto3" json:"float_wrapper,omitempty"`
	DoubleWrapper         *wrapperspb.DoubleValue   `protobuf:"bytes,7,opt,name=double_wrapper,json=doubleWrapper,proto3" json:"double_wrapper,omitempty"`
	StringWrapper         *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=string_wrapper,json=stringWrapper,proto3" json:"string_wrapper,omitempty"`
	BytesWrapper          *wrapperspb.BytesValue    `protobuf:"bytes,9,opt,name=bytes_wrapper,json=bytesWrapper,proto3" json:"bytes_wrapper,omitempty"`
	RepeatedBoolWrapper   []*wrapperspb.BoolValue   `protobuf:"bytes,10,rep,name=repeated_bool_wrapper,json=repeatedBoolWrapper,proto3" json:"repeated_bool_wrapper,omitempty"`
	RepeatedInt32Wrapper  []*wrapperspb.Int32Value  `protobuf:"bytes,11,rep,name=repeated_int32_wrapper,json=repeatedInt32Wrapper,proto3" json:"repeated_int32_wrapper,omitempty"`
	RepeatedInt64Wrapper  []*wrapperspb.Int64Value  `protobuf:"bytes,12,rep,name=repeated_int64_wrapper,json=repeatedInt64Wrapper,proto3" json:"repeated_int64_wrapper,omitempty"`
	RepeatedUint32Wrapper []*wrapperspb.UInt32Value `protobuf:"bytes,13,rep,name=repeated_uint32_wrapper,json=repeatedUint32Wrapper,proto3" json:"repeated_uint32_wrapper,omitempty"`
	RepeatedUint64Wrapper []*wrapperspb.UInt64Value `protobuf:"bytes,14,rep,name=repeated_uint64_wrapper,json=repeatedUint64Wrapper,proto3" json:"repeated_uint64_wrapper,omitempty"`
	RepeatedFloatWrapper  []*wrapperspb.FloatValue  `protobuf:"bytes,15,rep,name=repeated_float_wrapper,json=repeatedFloatWrapper,proto3" json:"repeated_float_wrapper,omitempty"`
	RepeatedDoubleWrapper []*wrapperspb.DoubleValue `protobuf:"bytes,16,rep,name=repeated_double_wrapper,json=repeatedDoubleWrapper,proto3" json:"repeated_double_wrapper,omitempty"`
	RepeatedStringWrapper []*wrapperspb.StringValue `protobuf:"bytes,17,rep,name=repeated_string_wrapper,json=repeatedStringWrapper,proto3" json:"repeated_string_wrapper,omitempty"`
	RepeatedBytesWrapper  []*wrapperspb.BytesValue  `protobuf:"bytes,18,rep,name=repeated_bytes_wrapper,json=repeatedBytesWrapper,proto3" json:"repeated_bytes_wrapper,omitempty"`
	Duration              *durationpb.Duration      `protobuf:"bytes,19,opt,name=duration,proto3" json:"duration,omitempty"`
	Timestamp             *timestamppb.Timestamp    `protobuf:"bytes,20,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Struct                *structpb.Struct          `protobuf:"bytes,21,opt,name=struct,proto3" json:"struct,omitempty"`
	Any                   *anypb.Any                `protobuf:"bytes,22,opt,name=any,proto3" json:"any,omitempty"`
	Value                 *structpb.Value           `protobuf:"bytes,23,opt,name=value,proto3" json:"value,omitempty"`
	NullValue             structpb.NullValue        `protobuf:"varint,24,opt,name=null_value,json=nullValue,proto3,enum=google.protobuf.NullValue" json:"null_value,omitempty"`
	RepeatedDuration      []*durationpb.Duration    `protobuf:"bytes,25,rep,name=repeated_duration,json=repeatedDuration,proto3" json:"repeated_duration,omitempty"`
	RepeatedTimestamp     []*timestamppb.Timestamp  `protobuf:"bytes,26,rep,name=repeated_timestamp,json=repeatedTimestamp,proto3" json:"repeated_timestamp,omitempty"`
	RepeatedStruct        []*structpb.Struct        `protobuf:"bytes,27,rep,name=repeated_struct,json=repeatedStruct,proto3" json:"repeated_struct,omitempty"`
	RepeatedAny           []*anypb.Any              `protobuf:"bytes,28,rep,name=repeated_any,json=repeatedAny,proto3" json:"repeated_any,omitempty"`
	RepeatedValue         []*structpb.Value         `protobuf:"bytes,29,rep,name=repeated_value,json=repeatedValue,proto3" json:"repeated_value,omitempty"`
	RepeatedListValue     []*structpb.ListValue     `protobuf:"bytes,30,rep,name=repeated_list_value,json=repeatedListValue,proto3" json:"repeated_list_value,omitempty"`
	OptionalNestedMsg     *WellKnownTypes_Nested    `protobuf:"bytes,31,opt,name=optional_nested_msg,json=optionalNestedMsg,proto3" json:"optional_nested_msg,omitempty"`
}

func (x *WellKnownTypes) Reset() {
	*x = WellKnownTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownTypes) ProtoMessage() {}

func (x *WellKnownTypes) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownTypes.ProtoReflect.Descriptor instead.
func (*WellKnownTypes) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{13}
}

func (x *WellKnownTypes) GetBoolWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetInt32Wrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetInt64Wrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetUint32Wrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetUint64Wrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetFloatWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetDoubleWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetStringWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.StringWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetBytesWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedBoolWrapper() []*wrapperspb.BoolValue {
	if x != nil {
		return x.RepeatedBoolWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedInt32Wrapper() []*wrapperspb.Int32Value {
	if x != nil {
		return x.RepeatedInt32Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedInt64Wrapper() []*wrapperspb.Int64Value {
	if x != nil {
		return x.RepeatedInt64Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedUint32Wrapper() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.RepeatedUint32Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedUint64Wrapper() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.RepeatedUint64Wrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedFloatWrapper() []*wrapperspb.FloatValue {
	if x != nil {
		return x.RepeatedFloatWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedDoubleWrapper() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.RepeatedDoubleWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedStringWrapper() []*wrapperspb.StringValue {
	if x != nil {
		return x.RepeatedStringWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedBytesWrapper() []*wrapperspb.BytesValue {
	if x != nil {
		return x.RepeatedBytesWrapper
	}
	return nil
}

func (x *WellKnownTypes) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WellKnownTypes) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WellKnownTypes) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *WellKnownTypes) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *WellKnownTypes) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WellKnownTypes) GetNullValue() structpb.NullValue {
	if x != nil {
		return x.NullValue
	}
	return structpb.NullValue(0)
}

func (x *WellKnownTypes) GetRepeatedDuration() []*durationpb.Duration {
	if x != nil {
		return x.RepeatedDuration
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.RepeatedTimestamp
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedStruct() []*structpb.Struct {
	if x != nil {
		return x.RepeatedStruct
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedAny() []*anypb.Any {
	if x != nil {
		return x.RepeatedAny
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedValue() []*structpb.Value {
	if x != nil {
		return x.RepeatedValue
	}
	return nil
}

func (x *WellKnownTypes) GetRepeatedListValue() []*structpb.ListValue {
	if x != nil {
		return x.RepeatedListValue
	}
	return nil
}

func (x *WellKnownTypes) GetOptionalNestedMsg() *WellKnownTypes_Nested {
	if x != nil {
		return x.OptionalNestedMsg
	}
	return nil
}

type ServerTestCase_PlanResourcesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.PlanResourcesRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.PlanResourcesResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_PlanResourcesCall) Reset() {
	*x = ServerTestCase_PlanResourcesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_PlanResourcesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_PlanResourcesCall) ProtoMessage() {}

func (x *ServerTestCase_PlanResourcesCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_PlanResourcesCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_PlanResourcesCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ServerTestCase_PlanResourcesCall) GetInput() *v16.PlanResourcesRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_PlanResourcesCall) GetWantResponse() *v17.PlanResourcesResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_CheckResourceSetCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.CheckResourceSetRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.CheckResourceSetResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_CheckResourceSetCall) Reset() {
	*x = ServerTestCase_CheckResourceSetCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_CheckResourceSetCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_CheckResourceSetCall) ProtoMessage() {}

func (x *ServerTestCase_CheckResourceSetCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_CheckResourceSetCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_CheckResourceSetCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ServerTestCase_CheckResourceSetCall) GetInput() *v16.CheckResourceSetRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_CheckResourceSetCall) GetWantResponse() *v17.CheckResourceSetResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_CheckResourceBatchCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.CheckResourceBatchRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.CheckResourceBatchResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_CheckResourceBatchCall) Reset() {
	*x = ServerTestCase_CheckResourceBatchCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_CheckResourceBatchCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_CheckResourceBatchCall) ProtoMessage() {}

func (x *ServerTestCase_CheckResourceBatchCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_CheckResourceBatchCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_CheckResourceBatchCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ServerTestCase_CheckResourceBatchCall) GetInput() *v16.CheckResourceBatchRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_CheckResourceBatchCall) GetWantResponse() *v17.CheckResourceBatchResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_CheckResourcesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.CheckResourcesRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.CheckResourcesResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_CheckResourcesCall) Reset() {
	*x = ServerTestCase_CheckResourcesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_CheckResourcesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_CheckResourcesCall) ProtoMessage() {}

func (x *ServerTestCase_CheckResourcesCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_CheckResourcesCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_CheckResourcesCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ServerTestCase_CheckResourcesCall) GetInput() *v16.CheckResourcesRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_CheckResourcesCall) GetWantResponse() *v17.CheckResourcesResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_PlaygroundValidateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.PlaygroundValidateRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.PlaygroundValidateResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_PlaygroundValidateCall) Reset() {
	*x = ServerTestCase_PlaygroundValidateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_PlaygroundValidateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_PlaygroundValidateCall) ProtoMessage() {}

func (x *ServerTestCase_PlaygroundValidateCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_PlaygroundValidateCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_PlaygroundValidateCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 4}
}

func (x *ServerTestCase_PlaygroundValidateCall) GetInput() *v16.PlaygroundValidateRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_PlaygroundValidateCall) GetWantResponse() *v17.PlaygroundValidateResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_PlaygroundTestCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.PlaygroundTestRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.PlaygroundTestResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_PlaygroundTestCall) Reset() {
	*x = ServerTestCase_PlaygroundTestCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_PlaygroundTestCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_PlaygroundTestCall) ProtoMessage() {}

func (x *ServerTestCase_PlaygroundTestCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_PlaygroundTestCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_PlaygroundTestCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 5}
}

func (x *ServerTestCase_PlaygroundTestCall) GetInput() *v16.PlaygroundTestRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_PlaygroundTestCall) GetWantResponse() *v17.PlaygroundTestResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_PlaygroundEvaluateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.PlaygroundEvaluateRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.PlaygroundEvaluateResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_PlaygroundEvaluateCall) Reset() {
	*x = ServerTestCase_PlaygroundEvaluateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_PlaygroundEvaluateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_PlaygroundEvaluateCall) ProtoMessage() {}

func (x *ServerTestCase_PlaygroundEvaluateCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_PlaygroundEvaluateCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_PlaygroundEvaluateCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 6}
}

func (x *ServerTestCase_PlaygroundEvaluateCall) GetInput() *v16.PlaygroundEvaluateRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_PlaygroundEvaluateCall) GetWantResponse() *v17.PlaygroundEvaluateResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_PlaygroundProxyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.PlaygroundProxyRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.PlaygroundProxyResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_PlaygroundProxyCall) Reset() {
	*x = ServerTestCase_PlaygroundProxyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_PlaygroundProxyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_PlaygroundProxyCall) ProtoMessage() {}

func (x *ServerTestCase_PlaygroundProxyCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_PlaygroundProxyCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_PlaygroundProxyCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 7}
}

func (x *ServerTestCase_PlaygroundProxyCall) GetInput() *v16.PlaygroundProxyRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_PlaygroundProxyCall) GetWantResponse() *v17.PlaygroundProxyResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_AdminAddOrUpdatePolicyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.AddOrUpdatePolicyRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.AddOrUpdatePolicyResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_AdminAddOrUpdatePolicyCall) Reset() {
	*x = ServerTestCase_AdminAddOrUpdatePolicyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_AdminAddOrUpdatePolicyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_AdminAddOrUpdatePolicyCall) ProtoMessage() {}

func (x *ServerTestCase_AdminAddOrUpdatePolicyCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_AdminAddOrUpdatePolicyCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_AdminAddOrUpdatePolicyCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 8}
}

func (x *ServerTestCase_AdminAddOrUpdatePolicyCall) GetInput() *v16.AddOrUpdatePolicyRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_AdminAddOrUpdatePolicyCall) GetWantResponse() *v17.AddOrUpdatePolicyResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_AdminAddOrUpdateSchemaCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        *v16.AddOrUpdateSchemaRequest  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	WantResponse *v17.AddOrUpdateSchemaResponse `protobuf:"bytes,2,opt,name=want_response,json=wantResponse,proto3" json:"want_response,omitempty"`
}

func (x *ServerTestCase_AdminAddOrUpdateSchemaCall) Reset() {
	*x = ServerTestCase_AdminAddOrUpdateSchemaCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_AdminAddOrUpdateSchemaCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_AdminAddOrUpdateSchemaCall) ProtoMessage() {}

func (x *ServerTestCase_AdminAddOrUpdateSchemaCall) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_AdminAddOrUpdateSchemaCall.ProtoReflect.Descriptor instead.
func (*ServerTestCase_AdminAddOrUpdateSchemaCall) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 9}
}

func (x *ServerTestCase_AdminAddOrUpdateSchemaCall) GetInput() *v16.AddOrUpdateSchemaRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ServerTestCase_AdminAddOrUpdateSchemaCall) GetWantResponse() *v17.AddOrUpdateSchemaResponse {
	if x != nil {
		return x.WantResponse
	}
	return nil
}

type ServerTestCase_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpStatusCode uint32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	GrpcStatusCode uint32 `protobuf:"varint,2,opt,name=grpc_status_code,json=grpcStatusCode,proto3" json:"grpc_status_code,omitempty"`
}

func (x *ServerTestCase_Status) Reset() {
	*x = ServerTestCase_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTestCase_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTestCase_Status) ProtoMessage() {}

func (x *ServerTestCase_Status) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTestCase_Status.ProtoReflect.Descriptor instead.
func (*ServerTestCase_Status) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{1, 10}
}

func (x *ServerTestCase_Status) GetHttpStatusCode() uint32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *ServerTestCase_Status) GetGrpcStatusCode() uint32 {
	if x != nil {
		return x.GrpcStatusCode
	}
	return 0
}

type IndexBuilderTestCase_CompilationUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainFqn        string   `protobuf:"bytes,1,opt,name=main_fqn,json=mainFqn,proto3" json:"main_fqn,omitempty"`
	DefinitionFqns []string `protobuf:"bytes,2,rep,name=definition_fqns,json=definitionFqns,proto3" json:"definition_fqns,omitempty"`
	AncestorFqns   []string `protobuf:"bytes,3,rep,name=ancestor_fqns,json=ancestorFqns,proto3" json:"ancestor_fqns,omitempty"`
}

func (x *IndexBuilderTestCase_CompilationUnit) Reset() {
	*x = IndexBuilderTestCase_CompilationUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuilderTestCase_CompilationUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuilderTestCase_CompilationUnit) ProtoMessage() {}

func (x *IndexBuilderTestCase_CompilationUnit) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuilderTestCase_CompilationUnit.ProtoReflect.Descriptor instead.
func (*IndexBuilderTestCase_CompilationUnit) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IndexBuilderTestCase_CompilationUnit) GetMainFqn() string {
	if x != nil {
		return x.MainFqn
	}
	return ""
}

func (x *IndexBuilderTestCase_CompilationUnit) GetDefinitionFqns() []string {
	if x != nil {
		return x.DefinitionFqns
	}
	return nil
}

func (x *IndexBuilderTestCase_CompilationUnit) GetAncestorFqns() []string {
	if x != nil {
		return x.AncestorFqns
	}
	return nil
}

type CompileTestCase_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope        string                                   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Variables    []string                                 `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
	DerivedRoles []*CompileTestCase_Variables_DerivedRole `protobuf:"bytes,3,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty"`
}

func (x *CompileTestCase_Variables) Reset() {
	*x = CompileTestCase_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileTestCase_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileTestCase_Variables) ProtoMessage() {}

func (x *CompileTestCase_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileTestCase_Variables.ProtoReflect.Descriptor instead.
func (*CompileTestCase_Variables) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CompileTestCase_Variables) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CompileTestCase_Variables) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CompileTestCase_Variables) GetDerivedRoles() []*CompileTestCase_Variables_DerivedRole {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

type CompileTestCase_Variables_DerivedRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables []string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *CompileTestCase_Variables_DerivedRole) Reset() {
	*x = CompileTestCase_Variables_DerivedRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileTestCase_Variables_DerivedRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileTestCase_Variables_DerivedRole) ProtoMessage() {}

func (x *CompileTestCase_Variables_DerivedRole) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileTestCase_Variables_DerivedRole.ProtoReflect.Descriptor instead.
func (*CompileTestCase_Variables_DerivedRole) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *CompileTestCase_Variables_DerivedRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompileTestCase_Variables_DerivedRole) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type QueryPlannerTestSuite_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   string                          `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Want     *v1.PlanResourcesFilter         `protobuf:"bytes,2,opt,name=want,proto3" json:"want,omitempty"`
	Resource *v1.PlanResourcesInput_Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	WantErr  bool                            `protobuf:"varint,4,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
}

func (x *QueryPlannerTestSuite_Test) Reset() {
	*x = QueryPlannerTestSuite_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlannerTestSuite_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlannerTestSuite_Test) ProtoMessage() {}

func (x *QueryPlannerTestSuite_Test) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlannerTestSuite_Test.ProtoReflect.Descriptor instead.
func (*QueryPlannerTestSuite_Test) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{8, 0}
}

func (x *QueryPlannerTestSuite_Test) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *QueryPlannerTestSuite_Test) GetWant() *v1.PlanResourcesFilter {
	if x != nil {
		return x.Want
	}
	return nil
}

func (x *QueryPlannerTestSuite_Test) GetResource() *v1.PlanResourcesInput_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *QueryPlannerTestSuite_Test) GetWantErr() bool {
	if x != nil {
		return x.WantErr
	}
	return false
}

type ProtoYamlTestCase_Want struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *v13.Policy  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Errors  []*v15.Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ProtoYamlTestCase_Want) Reset() {
	*x = ProtoYamlTestCase_Want{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoYamlTestCase_Want) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoYamlTestCase_Want) ProtoMessage() {}

func (x *ProtoYamlTestCase_Want) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoYamlTestCase_Want.ProtoReflect.Descriptor instead.
func (*ProtoYamlTestCase_Want) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ProtoYamlTestCase_Want) GetMessage() *v13.Policy {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProtoYamlTestCase_Want) GetErrors() []*v15.Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type WellKnownTypes_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringField string          `protobuf:"bytes,1,opt,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	ValueField  *structpb.Value `protobuf:"bytes,2,opt,name=value_field,json=valueField,proto3" json:"value_field,omitempty"`
}

func (x *WellKnownTypes_Nested) Reset() {
	*x = WellKnownTypes_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_private_v1_test_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownTypes_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownTypes_Nested) ProtoMessage() {}

func (x *WellKnownTypes_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_private_v1_test_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownTypes_Nested.ProtoReflect.Descriptor instead.
func (*WellKnownTypes_Nested) Descriptor() ([]byte, []int) {
	return file_cerbos_private_v1_test_proto_rawDescGZIP(), []int{13, 0}
}

func (x *WellKnownTypes_Nested) GetStringField() string {
	if x != nil {
		return x.StringField
	}
	return ""
}

func (x *WellKnownTypes_Nested) GetValueField() *structpb.Value {
	if x != nil {
		return x.ValueField
	}
	return nil
}

var File_cerbos_private_v1_test_proto protoreflect.FileDescriptor

var file_cerbos_private_v1_test_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x9d, 0x18, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49,
	0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x77,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x12, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x6b, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x1a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x62, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x5c, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x5f, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x14, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xb1, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xa5, 0x01, 0x0a,
	0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xb1, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x4f, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0xb1, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x53, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a,
	0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0xb3, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x41,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x5c, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xe9, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x12, 0x6d, 0x0a,
	0x16, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x14, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0x7a, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x71, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x71, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x71, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x71, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x46, 0x71, 0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xaa, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x66, 0x12, 0x45, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x52, 0x0a, 0x77, 0x61,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x77, 0x61, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0d,
	0x77, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xdf, 0x01,
	0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3f,
	0x0a, 0x0b, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22,
	0xac, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a,
	0x03, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x58, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x16, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x14, 0x77, 0x61,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x1a, 0x4f,
	0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfb, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x04,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04,
	0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x04, 0x77, 0x61, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x22, 0xa8, 0x01,
	0x0a, 0x21, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x12,
	0x31, 0x0a, 0x04, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x04, 0x77, 0x61,
	0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x59, 0x61, 0x6d, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x77, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x59, 0x61, 0x6d, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x57,
	0x61, 0x6e, 0x74, 0x52, 0x04, 0x77, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x1a, 0x6b, 0x0a, 0x04, 0x57, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0xeb, 0x11, 0x0a, 0x0e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x51, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x75,
	0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x6e, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x64, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x40,
	0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_private_v1_test_proto_rawDescOnce sync.Once
	file_cerbos_private_v1_test_proto_rawDescData = file_cerbos_private_v1_test_proto_rawDesc
)

func file_cerbos_private_v1_test_proto_rawDescGZIP() []byte {
	file_cerbos_private_v1_test_proto_rawDescOnce.Do(func() {
		file_cerbos_private_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_private_v1_test_proto_rawDescData)
	})
	return file_cerbos_private_v1_test_proto_rawDescData
}

var file_cerbos_private_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_cerbos_private_v1_test_proto_goTypes = []any{
	(*EngineTestCase)(nil),                            // 0: cerbos.private.v1.EngineTestCase
	(*ServerTestCase)(nil),                            // 1: cerbos.private.v1.ServerTestCase
	(*IndexBuilderTestCase)(nil),                      // 2: cerbos.private.v1.IndexBuilderTestCase
	(*CompileTestCase)(nil),                           // 3: cerbos.private.v1.CompileTestCase
	(*CelTestCase)(nil),                               // 4: cerbos.private.v1.CelTestCase
	(*SchemaTestCase)(nil),                            // 5: cerbos.private.v1.SchemaTestCase
	(*ValidationErrContainer)(nil),                    // 6: cerbos.private.v1.ValidationErrContainer
	(*AttrWrapper)(nil),                               // 7: cerbos.private.v1.AttrWrapper
	(*QueryPlannerTestSuite)(nil),                     // 8: cerbos.private.v1.QueryPlannerTestSuite
	(*VerifyTestFixtureGetTestsTestCase)(nil),         // 9: cerbos.private.v1.VerifyTestFixtureGetTestsTestCase
	(*QueryPlannerFilterTestCase)(nil),                // 10: cerbos.private.v1.QueryPlannerFilterTestCase
	(*VerifyTestCase)(nil),                            // 11: cerbos.private.v1.VerifyTestCase
	(*ProtoYamlTestCase)(nil),                         // 12: cerbos.private.v1.ProtoYamlTestCase
	(*WellKnownTypes)(nil),                            // 13: cerbos.private.v1.WellKnownTypes
	(*ServerTestCase_PlanResourcesCall)(nil),          // 14: cerbos.private.v1.ServerTestCase.PlanResourcesCall
	(*ServerTestCase_CheckResourceSetCall)(nil),       // 15: cerbos.private.v1.ServerTestCase.CheckResourceSetCall
	(*ServerTestCase_CheckResourceBatchCall)(nil),     // 16: cerbos.private.v1.ServerTestCase.CheckResourceBatchCall
	(*ServerTestCase_CheckResourcesCall)(nil),         // 17: cerbos.private.v1.ServerTestCase.CheckResourcesCall
	(*ServerTestCase_PlaygroundValidateCall)(nil),     // 18: cerbos.private.v1.ServerTestCase.PlaygroundValidateCall
	(*ServerTestCase_PlaygroundTestCall)(nil),         // 19: cerbos.private.v1.ServerTestCase.PlaygroundTestCall
	(*ServerTestCase_PlaygroundEvaluateCall)(nil),     // 20: cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall
	(*ServerTestCase_PlaygroundProxyCall)(nil),        // 21: cerbos.private.v1.ServerTestCase.PlaygroundProxyCall
	(*ServerTestCase_AdminAddOrUpdatePolicyCall)(nil), // 22: cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall
	(*ServerTestCase_AdminAddOrUpdateSchemaCall)(nil), // 23: cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall
	(*ServerTestCase_Status)(nil),                     // 24: cerbos.private.v1.ServerTestCase.Status
	(*IndexBuilderTestCase_CompilationUnit)(nil),      // 25: cerbos.private.v1.IndexBuilderTestCase.CompilationUnit
	nil,                               // 26: cerbos.private.v1.IndexBuilderTestCase.FilesEntry
	(*CompileTestCase_Variables)(nil), // 27: cerbos.private.v1.CompileTestCase.Variables
	(*CompileTestCase_Variables_DerivedRole)(nil), // 28: cerbos.private.v1.CompileTestCase.Variables.DerivedRole
	nil,                                    // 29: cerbos.private.v1.AttrWrapper.AttrEntry
	(*QueryPlannerTestSuite_Test)(nil),     // 30: cerbos.private.v1.QueryPlannerTestSuite.Test
	(*ProtoYamlTestCase_Want)(nil),         // 31: cerbos.private.v1.ProtoYamlTestCase.Want
	(*WellKnownTypes_Nested)(nil),          // 32: cerbos.private.v1.WellKnownTypes.Nested
	(*v1.CheckInput)(nil),                  // 33: cerbos.engine.v1.CheckInput
	(*v1.CheckOutput)(nil),                 // 34: cerbos.engine.v1.CheckOutput
	(*v11.DecisionLogEntry)(nil),           // 35: cerbos.audit.v1.DecisionLogEntry
	(*v12.IndexBuildErrors)(nil),           // 36: cerbos.runtime.v1.IndexBuildErrors
	(*v12.CompileErrors_Err)(nil),          // 37: cerbos.runtime.v1.CompileErrors.Err
	(*v13.Match)(nil),                      // 38: cerbos.policy.v1.Match
	(*v1.Request)(nil),                     // 39: cerbos.engine.v1.Request
	(*v13.Schemas)(nil),                    // 40: cerbos.policy.v1.Schemas
	(*v1.PlanResourcesInput)(nil),          // 41: cerbos.engine.v1.PlanResourcesInput
	(*v14.ValidationError)(nil),            // 42: cerbos.schema.v1.ValidationError
	(*v1.Principal)(nil),                   // 43: cerbos.engine.v1.Principal
	(*v13.TestTable)(nil),                  // 44: cerbos.policy.v1.TestTable
	(*v13.Test)(nil),                       // 45: cerbos.policy.v1.Test
	(*v1.PlanResourcesFilter)(nil),         // 46: cerbos.engine.v1.PlanResourcesFilter
	(*v13.TestResults)(nil),                // 47: cerbos.policy.v1.TestResults
	(*v15.Error)(nil),                      // 48: cerbos.source.v1.Error
	(*wrapperspb.BoolValue)(nil),           // 49: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),          // 50: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),          // 51: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),         // 52: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),         // 53: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),          // 54: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),         // 55: google.protobuf.DoubleValue
	(*wrapperspb.StringValue)(nil),         // 56: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),          // 57: google.protobuf.BytesValue
	(*durationpb.Duration)(nil),            // 58: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),          // 59: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                // 60: google.protobuf.Struct
	(*anypb.Any)(nil),                      // 61: google.protobuf.Any
	(*structpb.Value)(nil),                 // 62: google.protobuf.Value
	(structpb.NullValue)(0),                // 63: google.protobuf.NullValue
	(*structpb.ListValue)(nil),             // 64: google.protobuf.ListValue
	(*v16.PlanResourcesRequest)(nil),       // 65: cerbos.request.v1.PlanResourcesRequest
	(*v17.PlanResourcesResponse)(nil),      // 66: cerbos.response.v1.PlanResourcesResponse
	(*v16.CheckResourceSetRequest)(nil),    // 67: cerbos.request.v1.CheckResourceSetRequest
	(*v17.CheckResourceSetResponse)(nil),   // 68: cerbos.response.v1.CheckResourceSetResponse
	(*v16.CheckResourceBatchRequest)(nil),  // 69: cerbos.request.v1.CheckResourceBatchRequest
	(*v17.CheckResourceBatchResponse)(nil), // 70: cerbos.response.v1.CheckResourceBatchResponse
	(*v16.CheckResourcesRequest)(nil),      // 71: cerbos.request.v1.CheckResourcesRequest
	(*v17.CheckResourcesResponse)(nil),     // 72: cerbos.response.v1.CheckResourcesResponse
	(*v16.PlaygroundValidateRequest)(nil),  // 73: cerbos.request.v1.PlaygroundValidateRequest
	(*v17.PlaygroundValidateResponse)(nil), // 74: cerbos.response.v1.PlaygroundValidateResponse
	(*v16.PlaygroundTestRequest)(nil),      // 75: cerbos.request.v1.PlaygroundTestRequest
	(*v17.PlaygroundTestResponse)(nil),     // 76: cerbos.response.v1.PlaygroundTestResponse
	(*v16.PlaygroundEvaluateRequest)(nil),  // 77: cerbos.request.v1.PlaygroundEvaluateRequest
	(*v17.PlaygroundEvaluateResponse)(nil), // 78: cerbos.response.v1.PlaygroundEvaluateResponse
	(*v16.PlaygroundProxyRequest)(nil),     // 79: cerbos.request.v1.PlaygroundProxyRequest
	(*v17.PlaygroundProxyResponse)(nil),    // 80: cerbos.response.v1.PlaygroundProxyResponse
	(*v16.AddOrUpdatePolicyRequest)(nil),   // 81: cerbos.request.v1.AddOrUpdatePolicyRequest
	(*v17.AddOrUpdatePolicyResponse)(nil),  // 82: cerbos.response.v1.AddOrUpdatePolicyResponse
	(*v16.AddOrUpdateSchemaRequest)(nil),   // 83: cerbos.request.v1.AddOrUpdateSchemaRequest
	(*v17.AddOrUpdateSchemaResponse)(nil),  // 84: cerbos.response.v1.AddOrUpdateSchemaResponse
	(*v1.PlanResourcesInput_Resource)(nil), // 85: cerbos.engine.v1.PlanResourcesInput.Resource
	(*v13.Policy)(nil),                     // 86: cerbos.policy.v1.Policy
}
var file_cerbos_private_v1_test_proto_depIdxs = []int32{
	33, // 0: cerbos.private.v1.EngineTestCase.inputs:type_name -> cerbos.engine.v1.CheckInput
	34, // 1: cerbos.private.v1.EngineTestCase.want_outputs:type_name -> cerbos.engine.v1.CheckOutput
	35, // 2: cerbos.private.v1.EngineTestCase.want_decision_logs:type_name -> cerbos.audit.v1.DecisionLogEntry
	24, // 3: cerbos.private.v1.ServerTestCase.want_status:type_name -> cerbos.private.v1.ServerTestCase.Status
	15, // 4: cerbos.private.v1.ServerTestCase.check_resource_set:type_name -> cerbos.private.v1.ServerTestCase.CheckResourceSetCall
	16, // 5: cerbos.private.v1.ServerTestCase.check_resource_batch:type_name -> cerbos.private.v1.ServerTestCase.CheckResourceBatchCall
	18, // 6: cerbos.private.v1.ServerTestCase.playground_validate:type_name -> cerbos.private.v1.ServerTestCase.PlaygroundValidateCall
	20, // 7: cerbos.private.v1.ServerTestCase.playground_evaluate:type_name -> cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall
	22, // 8: cerbos.private.v1.ServerTestCase.admin_add_or_update_policy:type_name -> cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall
	21, // 9: cerbos.private.v1.ServerTestCase.playground_proxy:type_name -> cerbos.private.v1.ServerTestCase.PlaygroundProxyCall
	14, // 10: cerbos.private.v1.ServerTestCase.plan_resources:type_name -> cerbos.private.v1.ServerTestCase.PlanResourcesCall
	23, // 11: cerbos.private.v1.ServerTestCase.admin_add_or_update_schema:type_name -> cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall
	19, // 12: cerbos.private.v1.ServerTestCase.playground_test:type_name -> cerbos.private.v1.ServerTestCase.PlaygroundTestCall
	17, // 13: cerbos.private.v1.ServerTestCase.check_resources:type_name -> cerbos.private.v1.ServerTestCase.CheckResourcesCall
	26, // 14: cerbos.private.v1.IndexBuilderTestCase.files:type_name -> cerbos.private.v1.IndexBuilderTestCase.FilesEntry
	36, // 15: cerbos.private.v1.IndexBuilderTestCase.want_err_list:type_name -> cerbos.runtime.v1.IndexBuildErrors
	25, // 16: cerbos.private.v1.IndexBuilderTestCase.want_compilation_units:type_name -> cerbos.private.v1.IndexBuilderTestCase.CompilationUnit
	37, // 17: cerbos.private.v1.CompileTestCase.want_errors:type_name -> cerbos.runtime.v1.CompileErrors.Err
	27, // 18: cerbos.private.v1.CompileTestCase.want_variables:type_name -> cerbos.private.v1.CompileTestCase.Variables
	38, // 19: cerbos.private.v1.CelTestCase.condition:type_name -> cerbos.policy.v1.Match
	39, // 20: cerbos.private.v1.CelTestCase.request:type_name -> cerbos.engine.v1.Request
	40, // 21: cerbos.private.v1.SchemaTestCase.schema_refs:type_name -> cerbos.policy.v1.Schemas
	33, // 22: cerbos.private.v1.SchemaTestCase.check_input:type_name -> cerbos.engine.v1.CheckInput
	41, // 23: cerbos.private.v1.SchemaTestCase.plan_resources_input:type_name -> cerbos.engine.v1.PlanResourcesInput
	42, // 24: cerbos.private.v1.SchemaTestCase.want_validation_errors:type_name -> cerbos.schema.v1.ValidationError
	42, // 25: cerbos.private.v1.ValidationErrContainer.errors:type_name -> cerbos.schema.v1.ValidationError
	29, // 26: cerbos.private.v1.AttrWrapper.attr:type_name -> cerbos.private.v1.AttrWrapper.AttrEntry
	43, // 27: cerbos.private.v1.QueryPlannerTestSuite.principal:type_name -> cerbos.engine.v1.Principal
	30, // 28: cerbos.private.v1.QueryPlannerTestSuite.tests:type_name -> cerbos.private.v1.QueryPlannerTestSuite.Test
	44, // 29: cerbos.private.v1.VerifyTestFixtureGetTestsTestCase.table:type_name -> cerbos.policy.v1.TestTable
	45, // 30: cerbos.private.v1.VerifyTestFixtureGetTestsTestCase.want_tests:type_name -> cerbos.policy.v1.Test
	46, // 31: cerbos.private.v1.QueryPlannerFilterTestCase.input:type_name -> cerbos.engine.v1.PlanResourcesFilter
	46, // 32: cerbos.private.v1.QueryPlannerFilterTestCase.want_filter:type_name -> cerbos.engine.v1.PlanResourcesFilter
	47, // 33: cerbos.private.v1.VerifyTestCase.want:type_name -> cerbos.policy.v1.TestResults
	31, // 34: cerbos.private.v1.ProtoYamlTestCase.want:type_name -> cerbos.private.v1.ProtoYamlTestCase.Want
	48, // 35: cerbos.private.v1.ProtoYamlTestCase.want_errors:type_name -> cerbos.source.v1.Error
	49, // 36: cerbos.private.v1.WellKnownTypes.bool_wrapper:type_name -> google.protobuf.BoolValue
	50, // 37: cerbos.private.v1.WellKnownTypes.int32_wrapper:type_name -> google.protobuf.Int32Value
	51, // 38: cerbos.private.v1.WellKnownTypes.int64_wrapper:type_name -> google.protobuf.Int64Value
	52, // 39: cerbos.private.v1.WellKnownTypes.uint32_wrapper:type_name -> google.protobuf.UInt32Value
	53, // 40: cerbos.private.v1.WellKnownTypes.uint64_wrapper:type_name -> google.protobuf.UInt64Value
	54, // 41: cerbos.private.v1.WellKnownTypes.float_wrapper:type_name -> google.protobuf.FloatValue
	55, // 42: cerbos.private.v1.WellKnownTypes.double_wrapper:type_name -> google.protobuf.DoubleValue
	56, // 43: cerbos.private.v1.WellKnownTypes.string_wrapper:type_name -> google.protobuf.StringValue
	57, // 44: cerbos.private.v1.WellKnownTypes.bytes_wrapper:type_name -> google.protobuf.BytesValue
	49, // 45: cerbos.private.v1.WellKnownTypes.repeated_bool_wrapper:type_name -> google.protobuf.BoolValue
	50, // 46: cerbos.private.v1.WellKnownTypes.repeated_int32_wrapper:type_name -> google.protobuf.Int32Value
	51, // 47: cerbos.private.v1.WellKnownTypes.repeated_int64_wrapper:type_name -> google.protobuf.Int64Value
	52, // 48: cerbos.private.v1.WellKnownTypes.repeated_uint32_wrapper:type_name -> google.protobuf.UInt32Value
	53, // 49: cerbos.private.v1.WellKnownTypes.repeated_uint64_wrapper:type_name -> google.protobuf.UInt64Value
	54, // 50: cerbos.private.v1.WellKnownTypes.repeated_float_wrapper:type_name -> google.protobuf.FloatValue
	55, // 51: cerbos.private.v1.WellKnownTypes.repeated_double_wrapper:type_name -> google.protobuf.DoubleValue
	56, // 52: cerbos.private.v1.WellKnownTypes.repeated_string_wrapper:type_name -> google.protobuf.StringValue
	57, // 53: cerbos.private.v1.WellKnownTypes.repeated_bytes_wrapper:type_name -> google.protobuf.BytesValue
	58, // 54: cerbos.private.v1.WellKnownTypes.duration:type_name -> google.protobuf.Duration
	59, // 55: cerbos.private.v1.WellKnownTypes.timestamp:type_name -> google.protobuf.Timestamp
	60, // 56: cerbos.private.v1.WellKnownTypes.struct:type_name -> google.protobuf.Struct
	61, // 57: cerbos.private.v1.WellKnownTypes.any:type_name -> google.protobuf.Any
	62, // 58: cerbos.private.v1.WellKnownTypes.value:type_name -> google.protobuf.Value
	63, // 59: cerbos.private.v1.WellKnownTypes.null_value:type_name -> google.protobuf.NullValue
	58, // 60: cerbos.private.v1.WellKnownTypes.repeated_duration:type_name -> google.protobuf.Duration
	59, // 61: cerbos.private.v1.WellKnownTypes.repeated_timestamp:type_name -> google.protobuf.Timestamp
	60, // 62: cerbos.private.v1.WellKnownTypes.repeated_struct:type_name -> google.protobuf.Struct
	61, // 63: cerbos.private.v1.WellKnownTypes.repeated_any:type_name -> google.protobuf.Any
	62, // 64: cerbos.private.v1.WellKnownTypes.repeated_value:type_name -> google.protobuf.Value
	64, // 65: cerbos.private.v1.WellKnownTypes.repeated_list_value:type_name -> google.protobuf.ListValue
	32, // 66: cerbos.private.v1.WellKnownTypes.optional_nested_msg:type_name -> cerbos.private.v1.WellKnownTypes.Nested
	65, // 67: cerbos.private.v1.ServerTestCase.PlanResourcesCall.input:type_name -> cerbos.request.v1.PlanResourcesRequest
	66, // 68: cerbos.private.v1.ServerTestCase.PlanResourcesCall.want_response:type_name -> cerbos.response.v1.PlanResourcesResponse
	67, // 69: cerbos.private.v1.ServerTestCase.CheckResourceSetCall.input:type_name -> cerbos.request.v1.CheckResourceSetRequest
	68, // 70: cerbos.private.v1.ServerTestCase.CheckResourceSetCall.want_response:type_name -> cerbos.response.v1.CheckResourceSetResponse
	69, // 71: cerbos.private.v1.ServerTestCase.CheckResourceBatchCall.input:type_name -> cerbos.request.v1.CheckResourceBatchRequest
	70, // 72: cerbos.private.v1.ServerTestCase.CheckResourceBatchCall.want_response:type_name -> cerbos.response.v1.CheckResourceBatchResponse
	71, // 73: cerbos.private.v1.ServerTestCase.CheckResourcesCall.input:type_name -> cerbos.request.v1.CheckResourcesRequest
	72, // 74: cerbos.private.v1.ServerTestCase.CheckResourcesCall.want_response:type_name -> cerbos.response.v1.CheckResourcesResponse
	73, // 75: cerbos.private.v1.ServerTestCase.PlaygroundValidateCall.input:type_name -> cerbos.request.v1.PlaygroundValidateRequest
	74, // 76: cerbos.private.v1.ServerTestCase.PlaygroundValidateCall.want_response:type_name -> cerbos.response.v1.PlaygroundValidateResponse
	75, // 77: cerbos.private.v1.ServerTestCase.PlaygroundTestCall.input:type_name -> cerbos.request.v1.PlaygroundTestRequest
	76, // 78: cerbos.private.v1.ServerTestCase.PlaygroundTestCall.want_response:type_name -> cerbos.response.v1.PlaygroundTestResponse
	77, // 79: cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall.input:type_name -> cerbos.request.v1.PlaygroundEvaluateRequest
	78, // 80: cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall.want_response:type_name -> cerbos.response.v1.PlaygroundEvaluateResponse
	79, // 81: cerbos.private.v1.ServerTestCase.PlaygroundProxyCall.input:type_name -> cerbos.request.v1.PlaygroundProxyRequest
	80, // 82: cerbos.private.v1.ServerTestCase.PlaygroundProxyCall.want_response:type_name -> cerbos.response.v1.PlaygroundProxyResponse
	81, // 83: cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall.input:type_name -> cerbos.request.v1.AddOrUpdatePolicyRequest
	82, // 84: cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall.want_response:type_name -> cerbos.response.v1.AddOrUpdatePolicyResponse
	83, // 85: cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall.input:type_name -> cerbos.request.v1.AddOrUpdateSchemaRequest
	84, // 86: cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall.want_response:type_name -> cerbos.response.v1.AddOrUpdateSchemaResponse
	28, // 87: cerbos.private.v1.CompileTestCase.Variables.derived_roles:type_name -> cerbos.private.v1.CompileTestCase.Variables.DerivedRole
	62, // 88: cerbos.private.v1.AttrWrapper.AttrEntry.value:type_name -> google.protobuf.Value
	46, // 89: cerbos.private.v1.QueryPlannerTestSuite.Test.want:type_name -> cerbos.engine.v1.PlanResourcesFilter
	85, // 90: cerbos.private.v1.QueryPlannerTestSuite.Test.resource:type_name -> cerbos.engine.v1.PlanResourcesInput.Resource
	86, // 91: cerbos.private.v1.ProtoYamlTestCase.Want.message:type_name -> cerbos.policy.v1.Policy
	48, // 92: cerbos.private.v1.ProtoYamlTestCase.Want.errors:type_name -> cerbos.source.v1.Error
	62, // 93: cerbos.private.v1.WellKnownTypes.Nested.value_field:type_name -> google.protobuf.Value
	94, // [94:94] is the sub-list for method output_type
	94, // [94:94] is the sub-list for method input_type
	94, // [94:94] is the sub-list for extension type_name
	94, // [94:94] is the sub-list for extension extendee
	0,  // [0:94] is the sub-list for field type_name
}

func init() { file_cerbos_private_v1_test_proto_init() }
func file_cerbos_private_v1_test_proto_init() {
	if File_cerbos_private_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_private_v1_test_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EngineTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IndexBuilderTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CompileTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CelTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ValidationErrContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AttrWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPlannerTestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyTestFixtureGetTestsTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPlannerFilterTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ProtoYamlTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*WellKnownTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_PlanResourcesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_CheckResourceSetCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_CheckResourceBatchCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_CheckResourcesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_PlaygroundValidateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_PlaygroundTestCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_PlaygroundEvaluateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_PlaygroundProxyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_AdminAddOrUpdatePolicyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_AdminAddOrUpdateSchemaCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ServerTestCase_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*IndexBuilderTestCase_CompilationUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CompileTestCase_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CompileTestCase_Variables_DerivedRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPlannerTestSuite_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ProtoYamlTestCase_Want); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_private_v1_test_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*WellKnownTypes_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_private_v1_test_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerTestCase_CheckResourceSet)(nil),
		(*ServerTestCase_CheckResourceBatch)(nil),
		(*ServerTestCase_PlaygroundValidate)(nil),
		(*ServerTestCase_PlaygroundEvaluate)(nil),
		(*ServerTestCase_AdminAddOrUpdatePolicy)(nil),
		(*ServerTestCase_PlaygroundProxy)(nil),
		(*ServerTestCase_PlanResources)(nil),
		(*ServerTestCase_AdminAddOrUpdateSchema)(nil),
		(*ServerTestCase_PlaygroundTest)(nil),
		(*ServerTestCase_CheckResources)(nil),
	}
	file_cerbos_private_v1_test_proto_msgTypes[5].OneofWrappers = []any{
		(*SchemaTestCase_CheckInput)(nil),
		(*SchemaTestCase_PlanResourcesInput)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_private_v1_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_private_v1_test_proto_goTypes,
		DependencyIndexes: file_cerbos_private_v1_test_proto_depIdxs,
		MessageInfos:      file_cerbos_private_v1_test_proto_msgTypes,
	}.Build()
	File_cerbos_private_v1_test_proto = out.File
	file_cerbos_private_v1_test_proto_rawDesc = nil
	file_cerbos_private_v1_test_proto_goTypes = nil
	file_cerbos_private_v1_test_proto_depIdxs = nil
}
