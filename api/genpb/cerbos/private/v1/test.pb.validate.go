// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/private/v1/test.proto

package privatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EngineTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EngineTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EngineTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EngineTestCaseMultiError,
// or nil if none found.
func (m *EngineTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *EngineTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EngineTestCaseValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EngineTestCaseValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngineTestCaseValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWantOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EngineTestCaseValidationError{
						field:  fmt.Sprintf("WantOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EngineTestCaseValidationError{
						field:  fmt.Sprintf("WantOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EngineTestCaseValidationError{
					field:  fmt.Sprintf("WantOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WantError

	if len(errors) > 0 {
		return EngineTestCaseMultiError(errors)
	}

	return nil
}

// EngineTestCaseMultiError is an error wrapping multiple validation errors
// returned by EngineTestCase.ValidateAll() if the designated constraints
// aren't met.
type EngineTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EngineTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EngineTestCaseMultiError) AllErrors() []error { return m }

// EngineTestCaseValidationError is the validation error returned by
// EngineTestCase.Validate if the designated constraints aren't met.
type EngineTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngineTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngineTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngineTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngineTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngineTestCaseValidationError) ErrorName() string { return "EngineTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e EngineTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngineTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngineTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngineTestCaseValidationError{}

// Validate checks the field values on ServerTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerTestCaseMultiError,
// or nil if none found.
func (m *ServerTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for WantError

	if all {
		switch v := interface{}(m.GetWantStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCaseValidationError{
					field:  "WantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCaseValidationError{
					field:  "WantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCaseValidationError{
				field:  "WantStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.CallKind.(type) {

	case *ServerTestCase_CheckResourceSet:

		if all {
			switch v := interface{}(m.GetCheckResourceSet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "CheckResourceSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "CheckResourceSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckResourceSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "CheckResourceSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_CheckResourceBatch:

		if all {
			switch v := interface{}(m.GetCheckResourceBatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "CheckResourceBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "CheckResourceBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckResourceBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "CheckResourceBatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_PlaygroundValidate:

		if all {
			switch v := interface{}(m.GetPlaygroundValidate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundValidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundValidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlaygroundValidate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "PlaygroundValidate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_PlaygroundEvaluate:

		if all {
			switch v := interface{}(m.GetPlaygroundEvaluate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundEvaluate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundEvaluate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlaygroundEvaluate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "PlaygroundEvaluate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_AdminAddOrUpdatePolicy:

		if all {
			switch v := interface{}(m.GetAdminAddOrUpdatePolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "AdminAddOrUpdatePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "AdminAddOrUpdatePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdminAddOrUpdatePolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "AdminAddOrUpdatePolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_PlaygroundProxy:

		if all {
			switch v := interface{}(m.GetPlaygroundProxy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundProxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundProxy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlaygroundProxy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "PlaygroundProxy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_ResourcesQueryPlan:

		if all {
			switch v := interface{}(m.GetResourcesQueryPlan()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "ResourcesQueryPlan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "ResourcesQueryPlan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourcesQueryPlan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "ResourcesQueryPlan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_AdminAddOrUpdateSchema:

		if all {
			switch v := interface{}(m.GetAdminAddOrUpdateSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "AdminAddOrUpdateSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "AdminAddOrUpdateSchema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdminAddOrUpdateSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "AdminAddOrUpdateSchema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerTestCase_PlaygroundTest:

		if all {
			switch v := interface{}(m.GetPlaygroundTest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundTest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerTestCaseValidationError{
						field:  "PlaygroundTest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlaygroundTest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerTestCaseValidationError{
					field:  "PlaygroundTest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServerTestCaseMultiError(errors)
	}

	return nil
}

// ServerTestCaseMultiError is an error wrapping multiple validation errors
// returned by ServerTestCase.ValidateAll() if the designated constraints
// aren't met.
type ServerTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCaseMultiError) AllErrors() []error { return m }

// ServerTestCaseValidationError is the validation error returned by
// ServerTestCase.Validate if the designated constraints aren't met.
type ServerTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCaseValidationError) ErrorName() string { return "ServerTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e ServerTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCaseValidationError{}

// Validate checks the field values on IndexBuilderTestCase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IndexBuilderTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexBuilderTestCase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexBuilderTestCaseMultiError, or nil if none found.
func (m *IndexBuilderTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexBuilderTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Files

	// no validation rules for WantErrJson

	// no validation rules for WantErr

	for idx, item := range m.GetWantCompilationUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexBuilderTestCaseValidationError{
						field:  fmt.Sprintf("WantCompilationUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexBuilderTestCaseValidationError{
						field:  fmt.Sprintf("WantCompilationUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexBuilderTestCaseValidationError{
					field:  fmt.Sprintf("WantCompilationUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndexBuilderTestCaseMultiError(errors)
	}

	return nil
}

// IndexBuilderTestCaseMultiError is an error wrapping multiple validation
// errors returned by IndexBuilderTestCase.ValidateAll() if the designated
// constraints aren't met.
type IndexBuilderTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexBuilderTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexBuilderTestCaseMultiError) AllErrors() []error { return m }

// IndexBuilderTestCaseValidationError is the validation error returned by
// IndexBuilderTestCase.Validate if the designated constraints aren't met.
type IndexBuilderTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexBuilderTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexBuilderTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexBuilderTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexBuilderTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexBuilderTestCaseValidationError) ErrorName() string {
	return "IndexBuilderTestCaseValidationError"
}

// Error satisfies the builtin error interface
func (e IndexBuilderTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexBuilderTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexBuilderTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexBuilderTestCaseValidationError{}

// Validate checks the field values on CompileTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompileTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompileTestCase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompileTestCaseMultiError, or nil if none found.
func (m *CompileTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *CompileTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainDef

	{
		sorted_keys := make([]string, len(m.GetInputDefs()))
		i := 0
		for key := range m.GetInputDefs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputDefs()[key]
			_ = val

			// no validation rules for InputDefs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CompileTestCaseValidationError{
							field:  fmt.Sprintf("InputDefs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CompileTestCaseValidationError{
							field:  fmt.Sprintf("InputDefs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CompileTestCaseValidationError{
						field:  fmt.Sprintf("InputDefs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetWantErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompileTestCaseValidationError{
						field:  fmt.Sprintf("WantErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompileTestCaseValidationError{
						field:  fmt.Sprintf("WantErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompileTestCaseValidationError{
					field:  fmt.Sprintf("WantErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompileTestCaseMultiError(errors)
	}

	return nil
}

// CompileTestCaseMultiError is an error wrapping multiple validation errors
// returned by CompileTestCase.ValidateAll() if the designated constraints
// aren't met.
type CompileTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompileTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompileTestCaseMultiError) AllErrors() []error { return m }

// CompileTestCaseValidationError is the validation error returned by
// CompileTestCase.Validate if the designated constraints aren't met.
type CompileTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompileTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompileTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompileTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompileTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompileTestCaseValidationError) ErrorName() string { return "CompileTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e CompileTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompileTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompileTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompileTestCaseValidationError{}

// Validate checks the field values on CodeGenTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CodeGenTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodeGenTestCase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CodeGenTestCaseMultiError, or nil if none found.
func (m *CodeGenTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *CodeGenTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CodeGenTestCaseValidationError{
					field:  "InputPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CodeGenTestCaseValidationError{
					field:  "InputPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CodeGenTestCaseValidationError{
				field:  "InputPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WantError

	// no validation rules for WantRego

	// no validation rules for WantNumConditions

	if len(errors) > 0 {
		return CodeGenTestCaseMultiError(errors)
	}

	return nil
}

// CodeGenTestCaseMultiError is an error wrapping multiple validation errors
// returned by CodeGenTestCase.ValidateAll() if the designated constraints
// aren't met.
type CodeGenTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeGenTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeGenTestCaseMultiError) AllErrors() []error { return m }

// CodeGenTestCaseValidationError is the validation error returned by
// CodeGenTestCase.Validate if the designated constraints aren't met.
type CodeGenTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeGenTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeGenTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeGenTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeGenTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeGenTestCaseValidationError) ErrorName() string { return "CodeGenTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e CodeGenTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeGenTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeGenTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeGenTestCaseValidationError{}

// Validate checks the field values on CelTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CelTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CelTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CelTestCaseMultiError, or
// nil if none found.
func (m *CelTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *CelTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CelTestCaseValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CelTestCaseValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CelTestCaseValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CelTestCaseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CelTestCaseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CelTestCaseValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Want

	// no validation rules for WantError

	if len(errors) > 0 {
		return CelTestCaseMultiError(errors)
	}

	return nil
}

// CelTestCaseMultiError is an error wrapping multiple validation errors
// returned by CelTestCase.ValidateAll() if the designated constraints aren't met.
type CelTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CelTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CelTestCaseMultiError) AllErrors() []error { return m }

// CelTestCaseValidationError is the validation error returned by
// CelTestCase.Validate if the designated constraints aren't met.
type CelTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CelTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CelTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CelTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CelTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CelTestCaseValidationError) ErrorName() string { return "CelTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e CelTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCelTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CelTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CelTestCaseValidationError{}

// Validate checks the field values on SchemaTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SchemaTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SchemaTestCaseMultiError,
// or nil if none found.
func (m *SchemaTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSchemaRefs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaTestCaseValidationError{
					field:  "SchemaRefs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaTestCaseValidationError{
					field:  "SchemaRefs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemaRefs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaTestCaseValidationError{
				field:  "SchemaRefs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaTestCaseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaTestCaseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaTestCaseValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WantError

	for idx, item := range m.GetWantValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaTestCaseValidationError{
						field:  fmt.Sprintf("WantValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaTestCaseValidationError{
						field:  fmt.Sprintf("WantValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaTestCaseValidationError{
					field:  fmt.Sprintf("WantValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SchemaTestCaseMultiError(errors)
	}

	return nil
}

// SchemaTestCaseMultiError is an error wrapping multiple validation errors
// returned by SchemaTestCase.ValidateAll() if the designated constraints
// aren't met.
type SchemaTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaTestCaseMultiError) AllErrors() []error { return m }

// SchemaTestCaseValidationError is the validation error returned by
// SchemaTestCase.Validate if the designated constraints aren't met.
type SchemaTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaTestCaseValidationError) ErrorName() string { return "SchemaTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e SchemaTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaTestCaseValidationError{}

// Validate checks the field values on ValidationErrContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidationErrContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationErrContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationErrContainerMultiError, or nil if none found.
func (m *ValidationErrContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationErrContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidationErrContainerValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidationErrContainerValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidationErrContainerValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidationErrContainerMultiError(errors)
	}

	return nil
}

// ValidationErrContainerMultiError is an error wrapping multiple validation
// errors returned by ValidationErrContainer.ValidateAll() if the designated
// constraints aren't met.
type ValidationErrContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationErrContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationErrContainerMultiError) AllErrors() []error { return m }

// ValidationErrContainerValidationError is the validation error returned by
// ValidationErrContainer.Validate if the designated constraints aren't met.
type ValidationErrContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationErrContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationErrContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationErrContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationErrContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationErrContainerValidationError) ErrorName() string {
	return "ValidationErrContainerValidationError"
}

// Error satisfies the builtin error interface
func (e ValidationErrContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationErrContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationErrContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationErrContainerValidationError{}

// Validate checks the field values on AttrWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrWrapperMultiError, or
// nil if none found.
func (m *AttrWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetAttr()))
		i := 0
		for key := range m.GetAttr() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttr()[key]
			_ = val

			// no validation rules for Attr[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AttrWrapperValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AttrWrapperValidationError{
							field:  fmt.Sprintf("Attr[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AttrWrapperValidationError{
						field:  fmt.Sprintf("Attr[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AttrWrapperMultiError(errors)
	}

	return nil
}

// AttrWrapperMultiError is an error wrapping multiple validation errors
// returned by AttrWrapper.ValidateAll() if the designated constraints aren't met.
type AttrWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrWrapperMultiError) AllErrors() []error { return m }

// AttrWrapperValidationError is the validation error returned by
// AttrWrapper.Validate if the designated constraints aren't met.
type AttrWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrWrapperValidationError) ErrorName() string { return "AttrWrapperValidationError" }

// Error satisfies the builtin error interface
func (e AttrWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrWrapperValidationError{}

// Validate checks the field values on QueryPlannerTestSuite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPlannerTestSuite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlannerTestSuite with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPlannerTestSuiteMultiError, or nil if none found.
func (m *QueryPlannerTestSuite) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlannerTestSuite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPlannerTestSuiteValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPlannerTestSuiteValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPlannerTestSuiteValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryPlannerTestSuiteValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryPlannerTestSuiteValidationError{
						field:  fmt.Sprintf("Tests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryPlannerTestSuiteValidationError{
					field:  fmt.Sprintf("Tests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryPlannerTestSuiteMultiError(errors)
	}

	return nil
}

// QueryPlannerTestSuiteMultiError is an error wrapping multiple validation
// errors returned by QueryPlannerTestSuite.ValidateAll() if the designated
// constraints aren't met.
type QueryPlannerTestSuiteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlannerTestSuiteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlannerTestSuiteMultiError) AllErrors() []error { return m }

// QueryPlannerTestSuiteValidationError is the validation error returned by
// QueryPlannerTestSuite.Validate if the designated constraints aren't met.
type QueryPlannerTestSuiteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlannerTestSuiteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlannerTestSuiteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlannerTestSuiteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlannerTestSuiteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlannerTestSuiteValidationError) ErrorName() string {
	return "QueryPlannerTestSuiteValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPlannerTestSuiteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlannerTestSuite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlannerTestSuiteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlannerTestSuiteValidationError{}

// Validate checks the field values on VerifyTestFixtureGetTestsTestCase with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VerifyTestFixtureGetTestsTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTestFixtureGetTestsTestCase
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VerifyTestFixtureGetTestsTestCaseMultiError, or nil if none found.
func (m *VerifyTestFixtureGetTestsTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTestFixtureGetTestsTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyTestFixtureGetTestsTestCaseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyTestFixtureGetTestsTestCaseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyTestFixtureGetTestsTestCaseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWantTests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VerifyTestFixtureGetTestsTestCaseValidationError{
						field:  fmt.Sprintf("WantTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VerifyTestFixtureGetTestsTestCaseValidationError{
						field:  fmt.Sprintf("WantTests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VerifyTestFixtureGetTestsTestCaseValidationError{
					field:  fmt.Sprintf("WantTests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WantErr

	if len(errors) > 0 {
		return VerifyTestFixtureGetTestsTestCaseMultiError(errors)
	}

	return nil
}

// VerifyTestFixtureGetTestsTestCaseMultiError is an error wrapping multiple
// validation errors returned by
// VerifyTestFixtureGetTestsTestCase.ValidateAll() if the designated
// constraints aren't met.
type VerifyTestFixtureGetTestsTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTestFixtureGetTestsTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTestFixtureGetTestsTestCaseMultiError) AllErrors() []error { return m }

// VerifyTestFixtureGetTestsTestCaseValidationError is the validation error
// returned by VerifyTestFixtureGetTestsTestCase.Validate if the designated
// constraints aren't met.
type VerifyTestFixtureGetTestsTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTestFixtureGetTestsTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTestFixtureGetTestsTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTestFixtureGetTestsTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTestFixtureGetTestsTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTestFixtureGetTestsTestCaseValidationError) ErrorName() string {
	return "VerifyTestFixtureGetTestsTestCaseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyTestFixtureGetTestsTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTestFixtureGetTestsTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTestFixtureGetTestsTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTestFixtureGetTestsTestCaseValidationError{}

// Validate checks the field values on ServerTestCase_ResourcesQueryPlanCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ServerTestCase_ResourcesQueryPlanCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_ResourcesQueryPlanCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_ResourcesQueryPlanCallMultiError, or nil if none found.
func (m *ServerTestCase_ResourcesQueryPlanCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_ResourcesQueryPlanCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_ResourcesQueryPlanCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_ResourcesQueryPlanCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_ResourcesQueryPlanCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_ResourcesQueryPlanCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_ResourcesQueryPlanCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_ResourcesQueryPlanCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_ResourcesQueryPlanCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_ResourcesQueryPlanCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_ResourcesQueryPlanCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_ResourcesQueryPlanCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_ResourcesQueryPlanCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_ResourcesQueryPlanCallMultiError) AllErrors() []error { return m }

// ServerTestCase_ResourcesQueryPlanCallValidationError is the validation error
// returned by ServerTestCase_ResourcesQueryPlanCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_ResourcesQueryPlanCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) ErrorName() string {
	return "ServerTestCase_ResourcesQueryPlanCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_ResourcesQueryPlanCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_ResourcesQueryPlanCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_ResourcesQueryPlanCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_ResourcesQueryPlanCallValidationError{}

// Validate checks the field values on ServerTestCase_CheckResourceSetCall with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerTestCase_CheckResourceSetCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_CheckResourceSetCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_CheckResourceSetCallMultiError, or nil if none found.
func (m *ServerTestCase_CheckResourceSetCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_CheckResourceSetCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceSetCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceSetCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_CheckResourceSetCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceSetCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceSetCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_CheckResourceSetCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_CheckResourceSetCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_CheckResourceSetCallMultiError is an error wrapping multiple
// validation errors returned by
// ServerTestCase_CheckResourceSetCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_CheckResourceSetCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_CheckResourceSetCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_CheckResourceSetCallMultiError) AllErrors() []error { return m }

// ServerTestCase_CheckResourceSetCallValidationError is the validation error
// returned by ServerTestCase_CheckResourceSetCall.Validate if the designated
// constraints aren't met.
type ServerTestCase_CheckResourceSetCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_CheckResourceSetCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_CheckResourceSetCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_CheckResourceSetCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_CheckResourceSetCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_CheckResourceSetCallValidationError) ErrorName() string {
	return "ServerTestCase_CheckResourceSetCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_CheckResourceSetCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_CheckResourceSetCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_CheckResourceSetCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_CheckResourceSetCallValidationError{}

// Validate checks the field values on ServerTestCase_CheckResourceBatchCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ServerTestCase_CheckResourceBatchCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_CheckResourceBatchCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_CheckResourceBatchCallMultiError, or nil if none found.
func (m *ServerTestCase_CheckResourceBatchCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_CheckResourceBatchCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceBatchCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceBatchCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_CheckResourceBatchCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceBatchCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_CheckResourceBatchCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_CheckResourceBatchCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_CheckResourceBatchCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_CheckResourceBatchCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_CheckResourceBatchCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_CheckResourceBatchCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_CheckResourceBatchCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_CheckResourceBatchCallMultiError) AllErrors() []error { return m }

// ServerTestCase_CheckResourceBatchCallValidationError is the validation error
// returned by ServerTestCase_CheckResourceBatchCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_CheckResourceBatchCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_CheckResourceBatchCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_CheckResourceBatchCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_CheckResourceBatchCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_CheckResourceBatchCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_CheckResourceBatchCallValidationError) ErrorName() string {
	return "ServerTestCase_CheckResourceBatchCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_CheckResourceBatchCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_CheckResourceBatchCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_CheckResourceBatchCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_CheckResourceBatchCallValidationError{}

// Validate checks the field values on ServerTestCase_PlaygroundValidateCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ServerTestCase_PlaygroundValidateCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_PlaygroundValidateCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_PlaygroundValidateCallMultiError, or nil if none found.
func (m *ServerTestCase_PlaygroundValidateCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_PlaygroundValidateCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundValidateCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundValidateCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundValidateCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundValidateCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundValidateCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundValidateCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_PlaygroundValidateCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_PlaygroundValidateCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_PlaygroundValidateCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundValidateCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_PlaygroundValidateCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_PlaygroundValidateCallMultiError) AllErrors() []error { return m }

// ServerTestCase_PlaygroundValidateCallValidationError is the validation error
// returned by ServerTestCase_PlaygroundValidateCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_PlaygroundValidateCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_PlaygroundValidateCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_PlaygroundValidateCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_PlaygroundValidateCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_PlaygroundValidateCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_PlaygroundValidateCallValidationError) ErrorName() string {
	return "ServerTestCase_PlaygroundValidateCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_PlaygroundValidateCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_PlaygroundValidateCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_PlaygroundValidateCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_PlaygroundValidateCallValidationError{}

// Validate checks the field values on ServerTestCase_PlaygroundTestCall with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerTestCase_PlaygroundTestCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_PlaygroundTestCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_PlaygroundTestCallMultiError, or nil if none found.
func (m *ServerTestCase_PlaygroundTestCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_PlaygroundTestCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundTestCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundTestCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundTestCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundTestCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundTestCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundTestCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_PlaygroundTestCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_PlaygroundTestCallMultiError is an error wrapping multiple
// validation errors returned by
// ServerTestCase_PlaygroundTestCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundTestCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_PlaygroundTestCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_PlaygroundTestCallMultiError) AllErrors() []error { return m }

// ServerTestCase_PlaygroundTestCallValidationError is the validation error
// returned by ServerTestCase_PlaygroundTestCall.Validate if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundTestCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_PlaygroundTestCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_PlaygroundTestCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_PlaygroundTestCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_PlaygroundTestCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_PlaygroundTestCallValidationError) ErrorName() string {
	return "ServerTestCase_PlaygroundTestCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_PlaygroundTestCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_PlaygroundTestCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_PlaygroundTestCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_PlaygroundTestCallValidationError{}

// Validate checks the field values on ServerTestCase_PlaygroundEvaluateCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ServerTestCase_PlaygroundEvaluateCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_PlaygroundEvaluateCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_PlaygroundEvaluateCallMultiError, or nil if none found.
func (m *ServerTestCase_PlaygroundEvaluateCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_PlaygroundEvaluateCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundEvaluateCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundEvaluateCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundEvaluateCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundEvaluateCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundEvaluateCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundEvaluateCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_PlaygroundEvaluateCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_PlaygroundEvaluateCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_PlaygroundEvaluateCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundEvaluateCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_PlaygroundEvaluateCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_PlaygroundEvaluateCallMultiError) AllErrors() []error { return m }

// ServerTestCase_PlaygroundEvaluateCallValidationError is the validation error
// returned by ServerTestCase_PlaygroundEvaluateCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_PlaygroundEvaluateCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) ErrorName() string {
	return "ServerTestCase_PlaygroundEvaluateCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_PlaygroundEvaluateCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_PlaygroundEvaluateCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_PlaygroundEvaluateCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_PlaygroundEvaluateCallValidationError{}

// Validate checks the field values on ServerTestCase_PlaygroundProxyCall with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerTestCase_PlaygroundProxyCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_PlaygroundProxyCall
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ServerTestCase_PlaygroundProxyCallMultiError, or nil if none found.
func (m *ServerTestCase_PlaygroundProxyCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_PlaygroundProxyCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundProxyCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundProxyCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundProxyCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundProxyCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_PlaygroundProxyCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_PlaygroundProxyCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_PlaygroundProxyCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_PlaygroundProxyCallMultiError is an error wrapping multiple
// validation errors returned by
// ServerTestCase_PlaygroundProxyCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundProxyCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_PlaygroundProxyCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_PlaygroundProxyCallMultiError) AllErrors() []error { return m }

// ServerTestCase_PlaygroundProxyCallValidationError is the validation error
// returned by ServerTestCase_PlaygroundProxyCall.Validate if the designated
// constraints aren't met.
type ServerTestCase_PlaygroundProxyCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_PlaygroundProxyCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_PlaygroundProxyCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_PlaygroundProxyCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_PlaygroundProxyCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_PlaygroundProxyCallValidationError) ErrorName() string {
	return "ServerTestCase_PlaygroundProxyCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_PlaygroundProxyCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_PlaygroundProxyCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_PlaygroundProxyCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_PlaygroundProxyCallValidationError{}

// Validate checks the field values on
// ServerTestCase_AdminAddOrUpdatePolicyCall with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerTestCase_AdminAddOrUpdatePolicyCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ServerTestCase_AdminAddOrUpdatePolicyCall with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ServerTestCase_AdminAddOrUpdatePolicyCallMultiError, or nil if none found.
func (m *ServerTestCase_AdminAddOrUpdatePolicyCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_AdminAddOrUpdatePolicyCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_AdminAddOrUpdatePolicyCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_AdminAddOrUpdatePolicyCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_AdminAddOrUpdatePolicyCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_AdminAddOrUpdatePolicyCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_AdminAddOrUpdatePolicyCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_AdminAddOrUpdatePolicyCallMultiError) AllErrors() []error { return m }

// ServerTestCase_AdminAddOrUpdatePolicyCallValidationError is the validation
// error returned by ServerTestCase_AdminAddOrUpdatePolicyCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_AdminAddOrUpdatePolicyCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) ErrorName() string {
	return "ServerTestCase_AdminAddOrUpdatePolicyCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_AdminAddOrUpdatePolicyCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_AdminAddOrUpdatePolicyCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_AdminAddOrUpdatePolicyCallValidationError{}

// Validate checks the field values on
// ServerTestCase_AdminAddOrUpdateSchemaCall with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerTestCase_AdminAddOrUpdateSchemaCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ServerTestCase_AdminAddOrUpdateSchemaCall with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ServerTestCase_AdminAddOrUpdateSchemaCallMultiError, or nil if none found.
func (m *ServerTestCase_AdminAddOrUpdateSchemaCall) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_AdminAddOrUpdateSchemaCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWantResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
					field:  "WantResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWantResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{
				field:  "WantResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerTestCase_AdminAddOrUpdateSchemaCallMultiError(errors)
	}

	return nil
}

// ServerTestCase_AdminAddOrUpdateSchemaCallMultiError is an error wrapping
// multiple validation errors returned by
// ServerTestCase_AdminAddOrUpdateSchemaCall.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_AdminAddOrUpdateSchemaCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_AdminAddOrUpdateSchemaCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_AdminAddOrUpdateSchemaCallMultiError) AllErrors() []error { return m }

// ServerTestCase_AdminAddOrUpdateSchemaCallValidationError is the validation
// error returned by ServerTestCase_AdminAddOrUpdateSchemaCall.Validate if the
// designated constraints aren't met.
type ServerTestCase_AdminAddOrUpdateSchemaCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) ErrorName() string {
	return "ServerTestCase_AdminAddOrUpdateSchemaCallValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_AdminAddOrUpdateSchemaCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_AdminAddOrUpdateSchemaCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_AdminAddOrUpdateSchemaCallValidationError{}

// Validate checks the field values on ServerTestCase_Status with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerTestCase_Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerTestCase_Status with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerTestCase_StatusMultiError, or nil if none found.
func (m *ServerTestCase_Status) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerTestCase_Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HttpStatusCode

	// no validation rules for GrpcStatusCode

	if len(errors) > 0 {
		return ServerTestCase_StatusMultiError(errors)
	}

	return nil
}

// ServerTestCase_StatusMultiError is an error wrapping multiple validation
// errors returned by ServerTestCase_Status.ValidateAll() if the designated
// constraints aren't met.
type ServerTestCase_StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerTestCase_StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerTestCase_StatusMultiError) AllErrors() []error { return m }

// ServerTestCase_StatusValidationError is the validation error returned by
// ServerTestCase_Status.Validate if the designated constraints aren't met.
type ServerTestCase_StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTestCase_StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTestCase_StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTestCase_StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTestCase_StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTestCase_StatusValidationError) ErrorName() string {
	return "ServerTestCase_StatusValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTestCase_StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTestCase_Status.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTestCase_StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTestCase_StatusValidationError{}

// Validate checks the field values on IndexBuilderTestCase_CompilationUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IndexBuilderTestCase_CompilationUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexBuilderTestCase_CompilationUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IndexBuilderTestCase_CompilationUnitMultiError, or nil if none found.
func (m *IndexBuilderTestCase_CompilationUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexBuilderTestCase_CompilationUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainFqn

	if len(errors) > 0 {
		return IndexBuilderTestCase_CompilationUnitMultiError(errors)
	}

	return nil
}

// IndexBuilderTestCase_CompilationUnitMultiError is an error wrapping multiple
// validation errors returned by
// IndexBuilderTestCase_CompilationUnit.ValidateAll() if the designated
// constraints aren't met.
type IndexBuilderTestCase_CompilationUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexBuilderTestCase_CompilationUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexBuilderTestCase_CompilationUnitMultiError) AllErrors() []error { return m }

// IndexBuilderTestCase_CompilationUnitValidationError is the validation error
// returned by IndexBuilderTestCase_CompilationUnit.Validate if the designated
// constraints aren't met.
type IndexBuilderTestCase_CompilationUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexBuilderTestCase_CompilationUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexBuilderTestCase_CompilationUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexBuilderTestCase_CompilationUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexBuilderTestCase_CompilationUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexBuilderTestCase_CompilationUnitValidationError) ErrorName() string {
	return "IndexBuilderTestCase_CompilationUnitValidationError"
}

// Error satisfies the builtin error interface
func (e IndexBuilderTestCase_CompilationUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexBuilderTestCase_CompilationUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexBuilderTestCase_CompilationUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexBuilderTestCase_CompilationUnitValidationError{}

// Validate checks the field values on CompileTestCase_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompileTestCase_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompileTestCase_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompileTestCase_ErrorMultiError, or nil if none found.
func (m *CompileTestCase_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *CompileTestCase_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	// no validation rules for Error

	// no validation rules for Desc

	if len(errors) > 0 {
		return CompileTestCase_ErrorMultiError(errors)
	}

	return nil
}

// CompileTestCase_ErrorMultiError is an error wrapping multiple validation
// errors returned by CompileTestCase_Error.ValidateAll() if the designated
// constraints aren't met.
type CompileTestCase_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompileTestCase_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompileTestCase_ErrorMultiError) AllErrors() []error { return m }

// CompileTestCase_ErrorValidationError is the validation error returned by
// CompileTestCase_Error.Validate if the designated constraints aren't met.
type CompileTestCase_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompileTestCase_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompileTestCase_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompileTestCase_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompileTestCase_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompileTestCase_ErrorValidationError) ErrorName() string {
	return "CompileTestCase_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e CompileTestCase_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompileTestCase_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompileTestCase_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompileTestCase_ErrorValidationError{}

// Validate checks the field values on QueryPlannerTestSuite_Test with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPlannerTestSuite_Test) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlannerTestSuite_Test with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPlannerTestSuite_TestMultiError, or nil if none found.
func (m *QueryPlannerTestSuite_Test) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlannerTestSuite_Test) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetWant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPlannerTestSuite_TestValidationError{
					field:  "Want",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPlannerTestSuite_TestValidationError{
					field:  "Want",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPlannerTestSuite_TestValidationError{
				field:  "Want",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPlannerTestSuite_TestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPlannerTestSuite_TestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPlannerTestSuite_TestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WantErr

	if len(errors) > 0 {
		return QueryPlannerTestSuite_TestMultiError(errors)
	}

	return nil
}

// QueryPlannerTestSuite_TestMultiError is an error wrapping multiple
// validation errors returned by QueryPlannerTestSuite_Test.ValidateAll() if
// the designated constraints aren't met.
type QueryPlannerTestSuite_TestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlannerTestSuite_TestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlannerTestSuite_TestMultiError) AllErrors() []error { return m }

// QueryPlannerTestSuite_TestValidationError is the validation error returned
// by QueryPlannerTestSuite_Test.Validate if the designated constraints aren't met.
type QueryPlannerTestSuite_TestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlannerTestSuite_TestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlannerTestSuite_TestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlannerTestSuite_TestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlannerTestSuite_TestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlannerTestSuite_TestValidationError) ErrorName() string {
	return "QueryPlannerTestSuite_TestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPlannerTestSuite_TestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlannerTestSuite_Test.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlannerTestSuite_TestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlannerTestSuite_TestValidationError{}
