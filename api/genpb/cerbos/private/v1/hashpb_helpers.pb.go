// Code generated by protoc-gen-go-hashpb. Do not edit.
// protoc-gen-go-hashpb v0.2.0

package privatev1

import (
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/engine/v1"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	v12 "github.com/cerbos/cerbos/api/genpb/cerbos/request/v1"
	v13 "github.com/cerbos/cerbos/api/genpb/cerbos/response/v1"
	v14 "github.com/cerbos/cerbos/api/genpb/cerbos/runtime/v1"
	v15 "github.com/cerbos/cerbos/api/genpb/cerbos/schema/v1"
	protowire "google.golang.org/protobuf/encoding/protowire"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	hash "hash"
	math "math"
	sort "sort"
)

func cerbos_engine_v1_AuxData_hashpb_sum(m *v1.AuxData, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.AuxData.jwt"]; !ok {
		if len(m.Jwt) > 0 {
			keys := make([]string, len(m.Jwt))
			i := 0
			for k := range m.Jwt {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Jwt[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Jwt[k], hasher, ignore)
				}

			}
		}
	}
}

func cerbos_engine_v1_CheckInput_hashpb_sum(m *v1.CheckInput, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.CheckInput.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.engine.v1.CheckInput.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.engine.v1.CheckInput.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.engine.v1.CheckInput.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.CheckInput.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_engine_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
}

func cerbos_engine_v1_CheckOutput_ActionEffect_hashpb_sum(m *v1.CheckOutput_ActionEffect, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.ActionEffect.effect"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Effect)))

	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.ActionEffect.policy"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Policy))

	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.ActionEffect.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_engine_v1_CheckOutput_hashpb_sum(m *v1.CheckOutput, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.resource_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ResourceId))

	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Actions[k] != nil {
					cerbos_engine_v1_CheckOutput_ActionEffect_hashpb_sum(m.Actions[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.effective_derived_roles"]; !ok {
		if len(m.EffectiveDerivedRoles) > 0 {
			for _, v := range m.EffectiveDerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.CheckOutput.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_engine_v1_PlanResourcesFilter_Expression_Operand_hashpb_sum(m *v1.PlanResourcesFilter_Expression_Operand, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Node != nil {
		if _, ok := ignore["cerbos.engine.v1.PlanResourcesFilter.Expression.Operand.node"]; !ok {
			switch t := m.Node.(type) {
			case *v1.PlanResourcesFilter_Expression_Operand_Value:
				if t.Value != nil {
					google_protobuf_Value_hashpb_sum(t.Value, hasher, ignore)
				}

			case *v1.PlanResourcesFilter_Expression_Operand_Expression:
				if t.Expression != nil {
					cerbos_engine_v1_PlanResourcesFilter_Expression_hashpb_sum(t.Expression, hasher, ignore)
				}

			case *v1.PlanResourcesFilter_Expression_Operand_Variable:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Variable))

			}
		}
	}
}

func cerbos_engine_v1_PlanResourcesFilter_Expression_hashpb_sum(m *v1.PlanResourcesFilter_Expression, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesFilter.Expression.operator"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Operator))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesFilter.Expression.operands"]; !ok {
		if len(m.Operands) > 0 {
			for _, v := range m.Operands {
				if v != nil {
					cerbos_engine_v1_PlanResourcesFilter_Expression_Operand_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_engine_v1_PlanResourcesFilter_hashpb_sum(m *v1.PlanResourcesFilter, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesFilter.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Kind)))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesFilter.condition"]; !ok {
		if m.Condition != nil {
			cerbos_engine_v1_PlanResourcesFilter_Expression_Operand_hashpb_sum(m.Condition, hasher, ignore)
		}

	}
}

func cerbos_engine_v1_PlanResourcesInput_Resource_hashpb_sum(m *v1.PlanResourcesInput_Resource, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.Resource.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Kind))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.Resource.attr"]; !ok {
		if len(m.Attr) > 0 {
			keys := make([]string, len(m.Attr))
			i := 0
			for k := range m.Attr {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Attr[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Attr[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.Resource.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.Resource.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_engine_v1_PlanResourcesInput_hashpb_sum(m *v1.PlanResourcesInput, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_PlanResourcesInput_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_engine_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.engine.v1.PlanResourcesInput.include_meta"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.IncludeMeta)))

	}
}

func cerbos_engine_v1_Principal_hashpb_sum(m *v1.Principal, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Principal.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Id))

	}
	if _, ok := ignore["cerbos.engine.v1.Principal.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.engine.v1.Principal.roles"]; !ok {
		if len(m.Roles) > 0 {
			for _, v := range m.Roles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.Principal.attr"]; !ok {
		if len(m.Attr) > 0 {
			keys := make([]string, len(m.Attr))
			i := 0
			for k := range m.Attr {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Attr[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Attr[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.Principal.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_engine_v1_Resource_hashpb_sum(m *v1.Resource, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Resource.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Kind))

	}
	if _, ok := ignore["cerbos.engine.v1.Resource.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.engine.v1.Resource.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Id))

	}
	if _, ok := ignore["cerbos.engine.v1.Resource.attr"]; !ok {
		if len(m.Attr) > 0 {
			keys := make([]string, len(m.Attr))
			i := 0
			for k := range m.Attr {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Attr[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Attr[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.Resource.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_engine_v1_Trace_Component_Variable_hashpb_sum(m *v1.Trace_Component_Variable, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Trace.Component.Variable.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.engine.v1.Trace.Component.Variable.expr"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Expr))

	}
}

func cerbos_engine_v1_Trace_Component_hashpb_sum(m *v1.Trace_Component, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Trace.Component.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Kind)))

	}
	if m.Details != nil {
		if _, ok := ignore["cerbos.engine.v1.Trace.Component.details"]; !ok {
			switch t := m.Details.(type) {
			case *v1.Trace_Component_Action:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Action))

			case *v1.Trace_Component_DerivedRole:
				_, _ = hasher.Write(protowire.AppendString(nil, t.DerivedRole))

			case *v1.Trace_Component_Expr:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Expr))

			case *v1.Trace_Component_Index:
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(t.Index)))

			case *v1.Trace_Component_Policy:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Policy))

			case *v1.Trace_Component_Resource:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Resource))

			case *v1.Trace_Component_Rule:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Rule))

			case *v1.Trace_Component_Scope:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Scope))

			case *v1.Trace_Component_Variable_:
				if t.Variable != nil {
					cerbos_engine_v1_Trace_Component_Variable_hashpb_sum(t.Variable, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_engine_v1_Trace_Event_hashpb_sum(m *v1.Trace_Event, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Trace.Event.status"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Status)))

	}
	if _, ok := ignore["cerbos.engine.v1.Trace.Event.effect"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Effect)))

	}
	if _, ok := ignore["cerbos.engine.v1.Trace.Event.error"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Error))

	}
	if _, ok := ignore["cerbos.engine.v1.Trace.Event.message"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Message))

	}
	if _, ok := ignore["cerbos.engine.v1.Trace.Event.result"]; !ok {
		if m.Result != nil {
			google_protobuf_Value_hashpb_sum(m.Result, hasher, ignore)
		}

	}
}

func cerbos_engine_v1_Trace_hashpb_sum(m *v1.Trace, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.engine.v1.Trace.components"]; !ok {
		if len(m.Components) > 0 {
			for _, v := range m.Components {
				if v != nil {
					cerbos_engine_v1_Trace_Component_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.engine.v1.Trace.event"]; !ok {
		if m.Event != nil {
			cerbos_engine_v1_Trace_Event_hashpb_sum(m.Event, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_Condition_hashpb_sum(m *v11.Condition, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Condition != nil {
		if _, ok := ignore["cerbos.policy.v1.Condition.condition"]; !ok {
			switch t := m.Condition.(type) {
			case *v11.Condition_Match:
				if t.Match != nil {
					cerbos_policy_v1_Match_hashpb_sum(t.Match, hasher, ignore)
				}

			case *v11.Condition_Script:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Script))

			}
		}
	}
}

func cerbos_policy_v1_DerivedRoles_hashpb_sum(m *v11.DerivedRoles, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.DerivedRoles.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.DerivedRoles.definitions"]; !ok {
		if len(m.Definitions) > 0 {
			for _, v := range m.Definitions {
				if v != nil {
					cerbos_policy_v1_RoleDef_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_Match_ExprList_hashpb_sum(m *v11.Match_ExprList, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Match.ExprList.of"]; !ok {
		if len(m.Of) > 0 {
			for _, v := range m.Of {
				if v != nil {
					cerbos_policy_v1_Match_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_Match_hashpb_sum(m *v11.Match, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Op != nil {
		if _, ok := ignore["cerbos.policy.v1.Match.op"]; !ok {
			switch t := m.Op.(type) {
			case *v11.Match_All:
				if t.All != nil {
					cerbos_policy_v1_Match_ExprList_hashpb_sum(t.All, hasher, ignore)
				}

			case *v11.Match_Any:
				if t.Any != nil {
					cerbos_policy_v1_Match_ExprList_hashpb_sum(t.Any, hasher, ignore)
				}

			case *v11.Match_None:
				if t.None != nil {
					cerbos_policy_v1_Match_ExprList_hashpb_sum(t.None, hasher, ignore)
				}

			case *v11.Match_Expr:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Expr))

			}
		}
	}
}

func cerbos_policy_v1_Metadata_hashpb_sum(m *v11.Metadata, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Metadata.source_file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.SourceFile))

	}
	if _, ok := ignore["cerbos.policy.v1.Metadata.annotations"]; !ok {
		if len(m.Annotations) > 0 {
			keys := make([]string, len(m.Annotations))
			i := 0
			for k := range m.Annotations {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendString(nil, m.Annotations[k]))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.Metadata.hash"]; !ok {
		if m.Hash != nil {
			google_protobuf_UInt64Value_hashpb_sum(m.Hash, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.Metadata.store_identifer"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.StoreIdentifer))

	}
	if _, ok := ignore["cerbos.policy.v1.Metadata.store_identifier"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.StoreIdentifier))

	}
}

func cerbos_policy_v1_Policy_hashpb_sum(m *v11.Policy, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Policy.api_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ApiVersion))

	}
	if _, ok := ignore["cerbos.policy.v1.Policy.disabled"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.Disabled)))

	}
	if _, ok := ignore["cerbos.policy.v1.Policy.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.policy.v1.Policy.metadata"]; !ok {
		if m.Metadata != nil {
			cerbos_policy_v1_Metadata_hashpb_sum(m.Metadata, hasher, ignore)
		}

	}
	if m.PolicyType != nil {
		if _, ok := ignore["cerbos.policy.v1.Policy.policy_type"]; !ok {
			switch t := m.PolicyType.(type) {
			case *v11.Policy_ResourcePolicy:
				if t.ResourcePolicy != nil {
					cerbos_policy_v1_ResourcePolicy_hashpb_sum(t.ResourcePolicy, hasher, ignore)
				}

			case *v11.Policy_PrincipalPolicy:
				if t.PrincipalPolicy != nil {
					cerbos_policy_v1_PrincipalPolicy_hashpb_sum(t.PrincipalPolicy, hasher, ignore)
				}

			case *v11.Policy_DerivedRoles:
				if t.DerivedRoles != nil {
					cerbos_policy_v1_DerivedRoles_hashpb_sum(t.DerivedRoles, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.Policy.variables"]; !ok {
		if len(m.Variables) > 0 {
			keys := make([]string, len(m.Variables))
			i := 0
			for k := range m.Variables {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendString(nil, m.Variables[k]))

			}
		}
	}
}

func cerbos_policy_v1_PrincipalPolicy_hashpb_sum(m *v11.PrincipalPolicy, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.PrincipalPolicy.principal"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Principal))

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalPolicy.version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Version))

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalPolicy.rules"]; !ok {
		if len(m.Rules) > 0 {
			for _, v := range m.Rules {
				if v != nil {
					cerbos_policy_v1_PrincipalRule_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalPolicy.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_policy_v1_PrincipalRule_Action_hashpb_sum(m *v11.PrincipalRule_Action, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.Action.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.Action.condition"]; !ok {
		if m.Condition != nil {
			cerbos_policy_v1_Condition_hashpb_sum(m.Condition, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.Action.effect"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Effect)))

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.Action.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
}

func cerbos_policy_v1_PrincipalRule_hashpb_sum(m *v11.PrincipalRule, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.resource"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Resource))

	}
	if _, ok := ignore["cerbos.policy.v1.PrincipalRule.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				if v != nil {
					cerbos_policy_v1_PrincipalRule_Action_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_ResourcePolicy_hashpb_sum(m *v11.ResourcePolicy, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.resource"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Resource))

	}
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Version))

	}
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.import_derived_roles"]; !ok {
		if len(m.ImportDerivedRoles) > 0 {
			for _, v := range m.ImportDerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.rules"]; !ok {
		if len(m.Rules) > 0 {
			for _, v := range m.Rules {
				if v != nil {
					cerbos_policy_v1_ResourceRule_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
	if _, ok := ignore["cerbos.policy.v1.ResourcePolicy.schemas"]; !ok {
		if m.Schemas != nil {
			cerbos_policy_v1_Schemas_hashpb_sum(m.Schemas, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_ResourceRule_hashpb_sum(m *v11.ResourceRule, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.derived_roles"]; !ok {
		if len(m.DerivedRoles) > 0 {
			for _, v := range m.DerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.roles"]; !ok {
		if len(m.Roles) > 0 {
			for _, v := range m.Roles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.condition"]; !ok {
		if m.Condition != nil {
			cerbos_policy_v1_Condition_hashpb_sum(m.Condition, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.effect"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Effect)))

	}
	if _, ok := ignore["cerbos.policy.v1.ResourceRule.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
}

func cerbos_policy_v1_RoleDef_hashpb_sum(m *v11.RoleDef, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.RoleDef.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.RoleDef.parent_roles"]; !ok {
		if len(m.ParentRoles) > 0 {
			for _, v := range m.ParentRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.RoleDef.condition"]; !ok {
		if m.Condition != nil {
			cerbos_policy_v1_Condition_hashpb_sum(m.Condition, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_Schemas_IgnoreWhen_hashpb_sum(m *v11.Schemas_IgnoreWhen, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Schemas.IgnoreWhen.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_policy_v1_Schemas_Schema_hashpb_sum(m *v11.Schemas_Schema, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Schemas.Schema.ref"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Ref))

	}
	if _, ok := ignore["cerbos.policy.v1.Schemas.Schema.ignore_when"]; !ok {
		if m.IgnoreWhen != nil {
			cerbos_policy_v1_Schemas_IgnoreWhen_hashpb_sum(m.IgnoreWhen, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_Schemas_hashpb_sum(m *v11.Schemas, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Schemas.principal_schema"]; !ok {
		if m.PrincipalSchema != nil {
			cerbos_policy_v1_Schemas_Schema_hashpb_sum(m.PrincipalSchema, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.Schemas.resource_schema"]; !ok {
		if m.ResourceSchema != nil {
			cerbos_policy_v1_Schemas_Schema_hashpb_sum(m.ResourceSchema, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_TestOptions_hashpb_sum(m *v11.TestOptions, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestOptions.now"]; !ok {
		if m.Now != nil {
			google_protobuf_Timestamp_hashpb_sum(m.Now, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_TestResults_Action_hashpb_sum(m *v11.TestResults_Action, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Action.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Action.details"]; !ok {
		if m.Details != nil {
			cerbos_policy_v1_TestResults_Details_hashpb_sum(m.Details, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_TestResults_Details_hashpb_sum(m *v11.TestResults_Details, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Details.result"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Result)))

	}
	if m.Outcome != nil {
		if _, ok := ignore["cerbos.policy.v1.TestResults.Details.outcome"]; !ok {
			switch t := m.Outcome.(type) {
			case *v11.TestResults_Details_Failure:
				if t.Failure != nil {
					cerbos_policy_v1_TestResults_Failure_hashpb_sum(t.Failure, hasher, ignore)
				}

			case *v11.TestResults_Details_Error:
				_, _ = hasher.Write(protowire.AppendString(nil, t.Error))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Details.engine_trace"]; !ok {
		if len(m.EngineTrace) > 0 {
			for _, v := range m.EngineTrace {
				if v != nil {
					cerbos_engine_v1_Trace_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_TestResults_Failure_hashpb_sum(m *v11.TestResults_Failure, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Failure.expected"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Expected)))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Failure.actual"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Actual)))

	}
}

func cerbos_policy_v1_TestResults_Principal_hashpb_sum(m *v11.TestResults_Principal, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Principal.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Principal.resources"]; !ok {
		if len(m.Resources) > 0 {
			for _, v := range m.Resources {
				if v != nil {
					cerbos_policy_v1_TestResults_Resource_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_TestResults_Resource_hashpb_sum(m *v11.TestResults_Resource, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Resource.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Resource.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				if v != nil {
					cerbos_policy_v1_TestResults_Action_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_TestResults_Suite_hashpb_sum(m *v11.TestResults_Suite, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.File))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.principals"]; !ok {
		if len(m.Principals) > 0 {
			for _, v := range m.Principals {
				if v != nil {
					cerbos_policy_v1_TestResults_Principal_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.summary"]; !ok {
		if m.Summary != nil {
			cerbos_policy_v1_TestResults_Summary_hashpb_sum(m.Summary, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.error"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Error))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.test_cases"]; !ok {
		if len(m.TestCases) > 0 {
			for _, v := range m.TestCases {
				if v != nil {
					cerbos_policy_v1_TestResults_TestCase_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Suite.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
}

func cerbos_policy_v1_TestResults_Summary_hashpb_sum(m *v11.TestResults_Summary, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Summary.overall_result"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.OverallResult)))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Summary.tests_count"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.TestsCount)))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Summary.result_counts"]; !ok {
		if len(m.ResultCounts) > 0 {
			for _, v := range m.ResultCounts {
				if v != nil {
					cerbos_policy_v1_TestResults_Tally_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_TestResults_Tally_hashpb_sum(m *v11.TestResults_Tally, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.Tally.result"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Result)))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.Tally.count"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Count)))

	}
}

func cerbos_policy_v1_TestResults_TestCase_hashpb_sum(m *v11.TestResults_TestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.TestCase.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.TestCase.principals"]; !ok {
		if len(m.Principals) > 0 {
			for _, v := range m.Principals {
				if v != nil {
					cerbos_policy_v1_TestResults_Principal_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_policy_v1_TestResults_hashpb_sum(m *v11.TestResults, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestResults.suites"]; !ok {
		if len(m.Suites) > 0 {
			for _, v := range m.Suites {
				if v != nil {
					cerbos_policy_v1_TestResults_Suite_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestResults.summary"]; !ok {
		if m.Summary != nil {
			cerbos_policy_v1_TestResults_Summary_hashpb_sum(m.Summary, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_TestTable_Expectation_hashpb_sum(m *v11.TestTable_Expectation, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestTable.Expectation.principal"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Principal))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.Expectation.resource"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Resource))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.Expectation.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Actions[k])))

			}
		}
	}
}

func cerbos_policy_v1_TestTable_Input_hashpb_sum(m *v11.TestTable_Input, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestTable.Input.principals"]; !ok {
		if len(m.Principals) > 0 {
			for _, v := range m.Principals {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.Input.resources"]; !ok {
		if len(m.Resources) > 0 {
			for _, v := range m.Resources {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.Input.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.Input.aux_data"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.AuxData))

	}
}

func cerbos_policy_v1_TestTable_hashpb_sum(m *v11.TestTable, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.TestTable.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.skip"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.Skip)))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.skip_reason"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.SkipReason))

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.input"]; !ok {
		if m.Input != nil {
			cerbos_policy_v1_TestTable_Input_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.expected"]; !ok {
		if len(m.Expected) > 0 {
			for _, v := range m.Expected {
				if v != nil {
					cerbos_policy_v1_TestTable_Expectation_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.TestTable.options"]; !ok {
		if m.Options != nil {
			cerbos_policy_v1_TestOptions_hashpb_sum(m.Options, hasher, ignore)
		}

	}
}

func cerbos_policy_v1_Test_TestName_hashpb_sum(m *v11.Test_TestName, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Test.TestName.test_table_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TestTableName))

	}
	if _, ok := ignore["cerbos.policy.v1.Test.TestName.principal_key"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PrincipalKey))

	}
	if _, ok := ignore["cerbos.policy.v1.Test.TestName.resource_key"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ResourceKey))

	}
}

func cerbos_policy_v1_Test_hashpb_sum(m *v11.Test, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.policy.v1.Test.name"]; !ok {
		if m.Name != nil {
			cerbos_policy_v1_Test_TestName_hashpb_sum(m.Name, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.Test.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.policy.v1.Test.skip"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.Skip)))

	}
	if _, ok := ignore["cerbos.policy.v1.Test.skip_reason"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.SkipReason))

	}
	if _, ok := ignore["cerbos.policy.v1.Test.input"]; !ok {
		if m.Input != nil {
			cerbos_engine_v1_CheckInput_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.policy.v1.Test.expected"]; !ok {
		if len(m.Expected) > 0 {
			keys := make([]string, len(m.Expected))
			i := 0
			for k := range m.Expected {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Expected[k])))

			}
		}
	}
	if _, ok := ignore["cerbos.policy.v1.Test.options"]; !ok {
		if m.Options != nil {
			cerbos_policy_v1_TestOptions_hashpb_sum(m.Options, hasher, ignore)
		}

	}
}

func cerbos_private_v1_AttrWrapper_hashpb_sum(m *AttrWrapper, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.AttrWrapper.attr"]; !ok {
		if len(m.Attr) > 0 {
			keys := make([]string, len(m.Attr))
			i := 0
			for k := range m.Attr {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Attr[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Attr[k], hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_CelTestCase_hashpb_sum(m *CelTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.CelTestCase.condition"]; !ok {
		if m.Condition != nil {
			cerbos_policy_v1_Match_hashpb_sum(m.Condition, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.CelTestCase.input"]; !ok {
		if m.Input != nil {
			cerbos_engine_v1_CheckInput_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.CelTestCase.want"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.Want)))

	}
	if _, ok := ignore["cerbos.private.v1.CelTestCase.want_error"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantError)))

	}
}

func cerbos_private_v1_CodeGenTestCase_hashpb_sum(m *CodeGenTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.CodeGenTestCase.input_policy"]; !ok {
		if m.InputPolicy != nil {
			cerbos_policy_v1_Policy_hashpb_sum(m.InputPolicy, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.CodeGenTestCase.want_error"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantError)))

	}
	if _, ok := ignore["cerbos.private.v1.CodeGenTestCase.want_rego"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.WantRego))

	}
	if _, ok := ignore["cerbos.private.v1.CodeGenTestCase.want_num_conditions"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.WantNumConditions)))

	}
}

func cerbos_private_v1_CompileTestCase_Error_hashpb_sum(m *CompileTestCase_Error, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.Error.file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.File))

	}
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.Error.error"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Error))

	}
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.Error.desc"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Desc))

	}
}

func cerbos_private_v1_CompileTestCase_hashpb_sum(m *CompileTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.main_def"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MainDef))

	}
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.input_defs"]; !ok {
		if len(m.InputDefs) > 0 {
			keys := make([]string, len(m.InputDefs))
			i := 0
			for k := range m.InputDefs {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.InputDefs[k] != nil {
					cerbos_policy_v1_Policy_hashpb_sum(m.InputDefs[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.CompileTestCase.want_errors"]; !ok {
		if len(m.WantErrors) > 0 {
			for _, v := range m.WantErrors {
				if v != nil {
					cerbos_private_v1_CompileTestCase_Error_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_EngineTestCase_hashpb_sum(m *EngineTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.EngineTestCase.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.EngineTestCase.inputs"]; !ok {
		if len(m.Inputs) > 0 {
			for _, v := range m.Inputs {
				if v != nil {
					cerbos_engine_v1_CheckInput_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.EngineTestCase.want_outputs"]; !ok {
		if len(m.WantOutputs) > 0 {
			for _, v := range m.WantOutputs {
				if v != nil {
					cerbos_engine_v1_CheckOutput_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.EngineTestCase.want_error"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantError)))

	}
}

func cerbos_private_v1_IndexBuilderTestCase_CompilationUnit_hashpb_sum(m *IndexBuilderTestCase_CompilationUnit, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.CompilationUnit.main_fqn"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MainFqn))

	}
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.CompilationUnit.definition_fqns"]; !ok {
		if len(m.DefinitionFqns) > 0 {
			for _, v := range m.DefinitionFqns {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.CompilationUnit.ancestor_fqns"]; !ok {
		if len(m.AncestorFqns) > 0 {
			for _, v := range m.AncestorFqns {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_private_v1_IndexBuilderTestCase_hashpb_sum(m *IndexBuilderTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.files"]; !ok {
		if len(m.Files) > 0 {
			keys := make([]string, len(m.Files))
			i := 0
			for k := range m.Files {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendString(nil, m.Files[k]))

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.want_err_list"]; !ok {
		if m.WantErrList != nil {
			cerbos_runtime_v1_IndexBuildErrors_hashpb_sum(m.WantErrList, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.want_err"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.WantErr))

	}
	if _, ok := ignore["cerbos.private.v1.IndexBuilderTestCase.want_compilation_units"]; !ok {
		if len(m.WantCompilationUnits) > 0 {
			for _, v := range m.WantCompilationUnits {
				if v != nil {
					cerbos_private_v1_IndexBuilderTestCase_CompilationUnit_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_QueryPlannerFilterTestCase_hashpb_sum(m *QueryPlannerFilterTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.QueryPlannerFilterTestCase.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerFilterTestCase.input"]; !ok {
		if m.Input != nil {
			cerbos_engine_v1_PlanResourcesFilter_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerFilterTestCase.want_filter"]; !ok {
		if m.WantFilter != nil {
			cerbos_engine_v1_PlanResourcesFilter_hashpb_sum(m.WantFilter, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerFilterTestCase.want_string"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.WantString))

	}
}

func cerbos_private_v1_QueryPlannerTestSuite_Test_hashpb_sum(m *QueryPlannerTestSuite_Test, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.Test.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.Test.want"]; !ok {
		if m.Want != nil {
			cerbos_engine_v1_PlanResourcesFilter_hashpb_sum(m.Want, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.Test.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_PlanResourcesInput_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.Test.want_err"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantErr)))

	}
}

func cerbos_private_v1_QueryPlannerTestSuite_hashpb_sum(m *QueryPlannerTestSuite, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.QueryPlannerTestSuite.tests"]; !ok {
		if len(m.Tests) > 0 {
			for _, v := range m.Tests {
				if v != nil {
					cerbos_private_v1_QueryPlannerTestSuite_Test_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_SchemaTestCase_hashpb_sum(m *SchemaTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.SchemaTestCase.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.SchemaTestCase.schema_refs"]; !ok {
		if m.SchemaRefs != nil {
			cerbos_policy_v1_Schemas_hashpb_sum(m.SchemaRefs, hasher, ignore)
		}

	}
	if m.Input != nil {
		if _, ok := ignore["cerbos.private.v1.SchemaTestCase.input"]; !ok {
			switch t := m.Input.(type) {
			case *SchemaTestCase_CheckInput:
				if t.CheckInput != nil {
					cerbos_engine_v1_CheckInput_hashpb_sum(t.CheckInput, hasher, ignore)
				}

			case *SchemaTestCase_PlanResourcesInput:
				if t.PlanResourcesInput != nil {
					cerbos_engine_v1_PlanResourcesInput_hashpb_sum(t.PlanResourcesInput, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.SchemaTestCase.want_error"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantError)))

	}
	if _, ok := ignore["cerbos.private.v1.SchemaTestCase.want_validation_errors"]; !ok {
		if len(m.WantValidationErrors) > 0 {
			for _, v := range m.WantValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_ServerTestCase_AdminAddOrUpdatePolicyCall_hashpb_sum(m *ServerTestCase_AdminAddOrUpdatePolicyCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_AddOrUpdatePolicyRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.AdminAddOrUpdatePolicyCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_AddOrUpdatePolicyResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_AdminAddOrUpdateSchemaCall_hashpb_sum(m *ServerTestCase_AdminAddOrUpdateSchemaCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_AddOrUpdateSchemaRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.AdminAddOrUpdateSchemaCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_AddOrUpdateSchemaResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_CheckResourceBatchCall_hashpb_sum(m *ServerTestCase_CheckResourceBatchCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourceBatchCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_CheckResourceBatchRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourceBatchCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_CheckResourceBatchResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_CheckResourceSetCall_hashpb_sum(m *ServerTestCase_CheckResourceSetCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourceSetCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_CheckResourceSetRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourceSetCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_CheckResourceSetResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_CheckResourcesCall_hashpb_sum(m *ServerTestCase_CheckResourcesCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourcesCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_CheckResourcesRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.CheckResourcesCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_CheckResourcesResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_PlanResourcesCall_hashpb_sum(m *ServerTestCase_PlanResourcesCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlanResourcesCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_PlanResourcesRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlanResourcesCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_PlanResourcesResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_PlaygroundEvaluateCall_hashpb_sum(m *ServerTestCase_PlaygroundEvaluateCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_PlaygroundEvaluateRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundEvaluateCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_PlaygroundEvaluateResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_PlaygroundProxyCall_hashpb_sum(m *ServerTestCase_PlaygroundProxyCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundProxyCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_PlaygroundProxyRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundProxyCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_PlaygroundProxyResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_PlaygroundTestCall_hashpb_sum(m *ServerTestCase_PlaygroundTestCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundTestCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_PlaygroundTestRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundTestCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_PlaygroundTestResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_PlaygroundValidateCall_hashpb_sum(m *ServerTestCase_PlaygroundValidateCall, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundValidateCall.input"]; !ok {
		if m.Input != nil {
			cerbos_request_v1_PlaygroundValidateRequest_hashpb_sum(m.Input, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.PlaygroundValidateCall.want_response"]; !ok {
		if m.WantResponse != nil {
			cerbos_response_v1_PlaygroundValidateResponse_hashpb_sum(m.WantResponse, hasher, ignore)
		}

	}
}

func cerbos_private_v1_ServerTestCase_Status_hashpb_sum(m *ServerTestCase_Status, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.Status.http_status_code"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.HttpStatusCode)))

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.Status.grpc_status_code"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GrpcStatusCode)))

	}
}

func cerbos_private_v1_ServerTestCase_hashpb_sum(m *ServerTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Name))

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.want_error"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantError)))

	}
	if _, ok := ignore["cerbos.private.v1.ServerTestCase.want_status"]; !ok {
		if m.WantStatus != nil {
			cerbos_private_v1_ServerTestCase_Status_hashpb_sum(m.WantStatus, hasher, ignore)
		}

	}
	if m.CallKind != nil {
		if _, ok := ignore["cerbos.private.v1.ServerTestCase.call_kind"]; !ok {
			switch t := m.CallKind.(type) {
			case *ServerTestCase_CheckResourceSet:
				if t.CheckResourceSet != nil {
					cerbos_private_v1_ServerTestCase_CheckResourceSetCall_hashpb_sum(t.CheckResourceSet, hasher, ignore)
				}

			case *ServerTestCase_CheckResourceBatch:
				if t.CheckResourceBatch != nil {
					cerbos_private_v1_ServerTestCase_CheckResourceBatchCall_hashpb_sum(t.CheckResourceBatch, hasher, ignore)
				}

			case *ServerTestCase_PlaygroundValidate:
				if t.PlaygroundValidate != nil {
					cerbos_private_v1_ServerTestCase_PlaygroundValidateCall_hashpb_sum(t.PlaygroundValidate, hasher, ignore)
				}

			case *ServerTestCase_PlaygroundEvaluate:
				if t.PlaygroundEvaluate != nil {
					cerbos_private_v1_ServerTestCase_PlaygroundEvaluateCall_hashpb_sum(t.PlaygroundEvaluate, hasher, ignore)
				}

			case *ServerTestCase_AdminAddOrUpdatePolicy:
				if t.AdminAddOrUpdatePolicy != nil {
					cerbos_private_v1_ServerTestCase_AdminAddOrUpdatePolicyCall_hashpb_sum(t.AdminAddOrUpdatePolicy, hasher, ignore)
				}

			case *ServerTestCase_PlaygroundProxy:
				if t.PlaygroundProxy != nil {
					cerbos_private_v1_ServerTestCase_PlaygroundProxyCall_hashpb_sum(t.PlaygroundProxy, hasher, ignore)
				}

			case *ServerTestCase_PlanResources:
				if t.PlanResources != nil {
					cerbos_private_v1_ServerTestCase_PlanResourcesCall_hashpb_sum(t.PlanResources, hasher, ignore)
				}

			case *ServerTestCase_AdminAddOrUpdateSchema:
				if t.AdminAddOrUpdateSchema != nil {
					cerbos_private_v1_ServerTestCase_AdminAddOrUpdateSchemaCall_hashpb_sum(t.AdminAddOrUpdateSchema, hasher, ignore)
				}

			case *ServerTestCase_PlaygroundTest:
				if t.PlaygroundTest != nil {
					cerbos_private_v1_ServerTestCase_PlaygroundTestCall_hashpb_sum(t.PlaygroundTest, hasher, ignore)
				}

			case *ServerTestCase_CheckResources:
				if t.CheckResources != nil {
					cerbos_private_v1_ServerTestCase_CheckResourcesCall_hashpb_sum(t.CheckResources, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_ValidationErrContainer_hashpb_sum(m *ValidationErrContainer, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.ValidationErrContainer.errors"]; !ok {
		if len(m.Errors) > 0 {
			for _, v := range m.Errors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_private_v1_VerifyTestCase_hashpb_sum(m *VerifyTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.VerifyTestCase.description"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Description))

	}
	if _, ok := ignore["cerbos.private.v1.VerifyTestCase.want_err"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.WantErr)))

	}
	if _, ok := ignore["cerbos.private.v1.VerifyTestCase.want"]; !ok {
		if m.Want != nil {
			cerbos_policy_v1_TestResults_hashpb_sum(m.Want, hasher, ignore)
		}

	}
}

func cerbos_private_v1_VerifyTestFixtureGetTestsTestCase_hashpb_sum(m *VerifyTestFixtureGetTestsTestCase, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.private.v1.VerifyTestFixtureGetTestsTestCase.table"]; !ok {
		if m.Table != nil {
			cerbos_policy_v1_TestTable_hashpb_sum(m.Table, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.private.v1.VerifyTestFixtureGetTestsTestCase.want_tests"]; !ok {
		if len(m.WantTests) > 0 {
			for _, v := range m.WantTests {
				if v != nil {
					cerbos_policy_v1_Test_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.private.v1.VerifyTestFixtureGetTestsTestCase.want_err"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.WantErr))

	}
}

func cerbos_request_v1_AddOrUpdatePolicyRequest_hashpb_sum(m *v12.AddOrUpdatePolicyRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.AddOrUpdatePolicyRequest.policies"]; !ok {
		if len(m.Policies) > 0 {
			for _, v := range m.Policies {
				if v != nil {
					cerbos_policy_v1_Policy_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_AddOrUpdateSchemaRequest_hashpb_sum(m *v12.AddOrUpdateSchemaRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.AddOrUpdateSchemaRequest.schemas"]; !ok {
		if len(m.Schemas) > 0 {
			for _, v := range m.Schemas {
				if v != nil {
					cerbos_schema_v1_Schema_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_AttributesMap_hashpb_sum(m *v12.AttributesMap, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.AttributesMap.attr"]; !ok {
		if len(m.Attr) > 0 {
			keys := make([]string, len(m.Attr))
			i := 0
			for k := range m.Attr {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Attr[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Attr[k], hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_AuxData_JWT_hashpb_sum(m *v12.AuxData_JWT, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.AuxData.JWT.token"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Token))

	}
	if _, ok := ignore["cerbos.request.v1.AuxData.JWT.key_set_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.KeySetId))

	}
}

func cerbos_request_v1_AuxData_hashpb_sum(m *v12.AuxData, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.AuxData.jwt"]; !ok {
		if m.Jwt != nil {
			cerbos_request_v1_AuxData_JWT_hashpb_sum(m.Jwt, hasher, ignore)
		}

	}
}

func cerbos_request_v1_CheckResourceBatchRequest_BatchEntry_hashpb_sum(m *v12.CheckResourceBatchRequest_BatchEntry, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.BatchEntry.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.BatchEntry.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
}

func cerbos_request_v1_CheckResourceBatchRequest_hashpb_sum(m *v12.CheckResourceBatchRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.resources"]; !ok {
		if len(m.Resources) > 0 {
			for _, v := range m.Resources {
				if v != nil {
					cerbos_request_v1_CheckResourceBatchRequest_BatchEntry_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceBatchRequest.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_request_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
}

func cerbos_request_v1_CheckResourceSetRequest_hashpb_sum(m *v12.CheckResourceSetRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.resource"]; !ok {
		if m.Resource != nil {
			cerbos_request_v1_ResourceSet_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.include_meta"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.IncludeMeta)))

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourceSetRequest.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_request_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
}

func cerbos_request_v1_CheckResourcesRequest_ResourceEntry_hashpb_sum(m *v12.CheckResourcesRequest_ResourceEntry, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.ResourceEntry.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.ResourceEntry.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
}

func cerbos_request_v1_CheckResourcesRequest_hashpb_sum(m *v12.CheckResourcesRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.include_meta"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.IncludeMeta)))

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.resources"]; !ok {
		if len(m.Resources) > 0 {
			for _, v := range m.Resources {
				if v != nil {
					cerbos_request_v1_CheckResourcesRequest_ResourceEntry_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.CheckResourcesRequest.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_request_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
}

func cerbos_request_v1_File_hashpb_sum(m *v12.File, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.File.file_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FileName))

	}
	if _, ok := ignore["cerbos.request.v1.File.contents"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.Contents))

	}
}

func cerbos_request_v1_PlanResourcesRequest_hashpb_sum(m *v12.PlanResourcesRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_PlanResourcesInput_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_request_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.PlanResourcesRequest.include_meta"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.IncludeMeta)))

	}
}

func cerbos_request_v1_PlaygroundEvaluateRequest_hashpb_sum(m *v12.PlaygroundEvaluateRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.files"]; !ok {
		if len(m.Files) > 0 {
			for _, v := range m.Files {
				if v != nil {
					cerbos_request_v1_File_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.principal"]; !ok {
		if m.Principal != nil {
			cerbos_engine_v1_Principal_hashpb_sum(m.Principal, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.resource"]; !ok {
		if m.Resource != nil {
			cerbos_engine_v1_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.actions"]; !ok {
		if len(m.Actions) > 0 {
			for _, v := range m.Actions {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundEvaluateRequest.aux_data"]; !ok {
		if m.AuxData != nil {
			cerbos_request_v1_AuxData_hashpb_sum(m.AuxData, hasher, ignore)
		}

	}
}

func cerbos_request_v1_PlaygroundProxyRequest_hashpb_sum(m *v12.PlaygroundProxyRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.PlaygroundProxyRequest.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundProxyRequest.files"]; !ok {
		if len(m.Files) > 0 {
			for _, v := range m.Files {
				if v != nil {
					cerbos_request_v1_File_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if m.ProxyRequest != nil {
		if _, ok := ignore["cerbos.request.v1.PlaygroundProxyRequest.proxy_request"]; !ok {
			switch t := m.ProxyRequest.(type) {
			case *v12.PlaygroundProxyRequest_CheckResourceSet:
				if t.CheckResourceSet != nil {
					cerbos_request_v1_CheckResourceSetRequest_hashpb_sum(t.CheckResourceSet, hasher, ignore)
				}

			case *v12.PlaygroundProxyRequest_CheckResourceBatch:
				if t.CheckResourceBatch != nil {
					cerbos_request_v1_CheckResourceBatchRequest_hashpb_sum(t.CheckResourceBatch, hasher, ignore)
				}

			case *v12.PlaygroundProxyRequest_PlanResources:
				if t.PlanResources != nil {
					cerbos_request_v1_PlanResourcesRequest_hashpb_sum(t.PlanResources, hasher, ignore)
				}

			case *v12.PlaygroundProxyRequest_CheckResources:
				if t.CheckResources != nil {
					cerbos_request_v1_CheckResourcesRequest_hashpb_sum(t.CheckResources, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_PlaygroundTestRequest_hashpb_sum(m *v12.PlaygroundTestRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.PlaygroundTestRequest.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundTestRequest.files"]; !ok {
		if len(m.Files) > 0 {
			for _, v := range m.Files {
				if v != nil {
					cerbos_request_v1_File_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_PlaygroundValidateRequest_hashpb_sum(m *v12.PlaygroundValidateRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.PlaygroundValidateRequest.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if _, ok := ignore["cerbos.request.v1.PlaygroundValidateRequest.files"]; !ok {
		if len(m.Files) > 0 {
			for _, v := range m.Files {
				if v != nil {
					cerbos_request_v1_File_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_request_v1_ResourceSet_hashpb_sum(m *v12.ResourceSet, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.request.v1.ResourceSet.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Kind))

	}
	if _, ok := ignore["cerbos.request.v1.ResourceSet.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.request.v1.ResourceSet.instances"]; !ok {
		if len(m.Instances) > 0 {
			keys := make([]string, len(m.Instances))
			i := 0
			for k := range m.Instances {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Instances[k] != nil {
					cerbos_request_v1_AttributesMap_hashpb_sum(m.Instances[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.request.v1.ResourceSet.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_response_v1_AddOrUpdatePolicyResponse_hashpb_sum(m *v13.AddOrUpdatePolicyResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.AddOrUpdatePolicyResponse.success"]; !ok {
		if m.Success != nil {
			google_protobuf_Empty_hashpb_sum(m.Success, hasher, ignore)
		}

	}
}

func cerbos_response_v1_AddOrUpdateSchemaResponse_hashpb_sum(m *v13.AddOrUpdateSchemaResponse, hasher hash.Hash, ignore map[string]struct{}) {
}

func cerbos_response_v1_CheckResourceBatchResponse_ActionEffectMap_hashpb_sum(m *v13.CheckResourceBatchResponse_ActionEffectMap, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.resource_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ResourceId))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Actions[k])))

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_CheckResourceBatchResponse_hashpb_sum(m *v13.CheckResourceBatchResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceBatchResponse.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceBatchResponse.results"]; !ok {
		if len(m.Results) > 0 {
			for _, v := range m.Results {
				if v != nil {
					cerbos_response_v1_CheckResourceBatchResponse_ActionEffectMap_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_CheckResourceSetResponse_ActionEffectMap_hashpb_sum(m *v13.CheckResourceSetResponse_ActionEffectMap, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Actions[k])))

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_CheckResourceSetResponse_Meta_ActionMeta_hashpb_sum(m *v13.CheckResourceSetResponse_Meta_ActionMeta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Actions[k] != nil {
					cerbos_response_v1_CheckResourceSetResponse_Meta_EffectMeta_hashpb_sum(m.Actions[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.effective_derived_roles"]; !ok {
		if len(m.EffectiveDerivedRoles) > 0 {
			for _, v := range m.EffectiveDerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_response_v1_CheckResourceSetResponse_Meta_EffectMeta_hashpb_sum(m *v13.CheckResourceSetResponse_Meta_EffectMeta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.Meta.EffectMeta.matched_policy"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MatchedPolicy))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.Meta.EffectMeta.matched_scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MatchedScope))

	}
}

func cerbos_response_v1_CheckResourceSetResponse_Meta_hashpb_sum(m *v13.CheckResourceSetResponse_Meta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.Meta.resource_instances"]; !ok {
		if len(m.ResourceInstances) > 0 {
			keys := make([]string, len(m.ResourceInstances))
			i := 0
			for k := range m.ResourceInstances {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.ResourceInstances[k] != nil {
					cerbos_response_v1_CheckResourceSetResponse_Meta_ActionMeta_hashpb_sum(m.ResourceInstances[k], hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_CheckResourceSetResponse_hashpb_sum(m *v13.CheckResourceSetResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.resource_instances"]; !ok {
		if len(m.ResourceInstances) > 0 {
			keys := make([]string, len(m.ResourceInstances))
			i := 0
			for k := range m.ResourceInstances {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.ResourceInstances[k] != nil {
					cerbos_response_v1_CheckResourceSetResponse_ActionEffectMap_hashpb_sum(m.ResourceInstances[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourceSetResponse.meta"]; !ok {
		if m.Meta != nil {
			cerbos_response_v1_CheckResourceSetResponse_Meta_hashpb_sum(m.Meta, hasher, ignore)
		}

	}
}

func cerbos_response_v1_CheckResourcesResponse_ResultEntry_Meta_EffectMeta_hashpb_sum(m *v13.CheckResourcesResponse_ResultEntry_Meta_EffectMeta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.EffectMeta.matched_policy"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MatchedPolicy))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.EffectMeta.matched_scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MatchedScope))

	}
}

func cerbos_response_v1_CheckResourcesResponse_ResultEntry_Meta_hashpb_sum(m *v13.CheckResourcesResponse_ResultEntry_Meta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Actions[k] != nil {
					cerbos_response_v1_CheckResourcesResponse_ResultEntry_Meta_EffectMeta_hashpb_sum(m.Actions[k], hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.effective_derived_roles"]; !ok {
		if len(m.EffectiveDerivedRoles) > 0 {
			for _, v := range m.EffectiveDerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_response_v1_CheckResourcesResponse_ResultEntry_Resource_hashpb_sum(m *v13.CheckResourcesResponse_ResultEntry_Resource, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Id))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource.kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Kind))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource.scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Scope))

	}
}

func cerbos_response_v1_CheckResourcesResponse_ResultEntry_hashpb_sum(m *v13.CheckResourcesResponse_ResultEntry, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.resource"]; !ok {
		if m.Resource != nil {
			cerbos_response_v1_CheckResourcesResponse_ResultEntry_Resource_hashpb_sum(m.Resource, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.actions"]; !ok {
		if len(m.Actions) > 0 {
			keys := make([]string, len(m.Actions))
			i := 0
			for k := range m.Actions {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Actions[k])))

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.ResultEntry.meta"]; !ok {
		if m.Meta != nil {
			cerbos_response_v1_CheckResourcesResponse_ResultEntry_Meta_hashpb_sum(m.Meta, hasher, ignore)
		}

	}
}

func cerbos_response_v1_CheckResourcesResponse_hashpb_sum(m *v13.CheckResourcesResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.response.v1.CheckResourcesResponse.results"]; !ok {
		if len(m.Results) > 0 {
			for _, v := range m.Results {
				if v != nil {
					cerbos_response_v1_CheckResourcesResponse_ResultEntry_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlanResourcesResponse_Meta_hashpb_sum(m *v13.PlanResourcesResponse_Meta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.Meta.filter_debug"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FilterDebug))

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.Meta.matched_scope"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.MatchedScope))

	}
}

func cerbos_response_v1_PlanResourcesResponse_hashpb_sum(m *v13.PlanResourcesResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.request_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.RequestId))

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.resource_kind"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ResourceKind))

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.policy_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PolicyVersion))

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.filter"]; !ok {
		if m.Filter != nil {
			cerbos_engine_v1_PlanResourcesFilter_hashpb_sum(m.Filter, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.meta"]; !ok {
		if m.Meta != nil {
			cerbos_response_v1_PlanResourcesResponse_Meta_hashpb_sum(m.Meta, hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.response.v1.PlanResourcesResponse.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundEvaluateResponse_EvalResultList_hashpb_sum(m *v13.PlaygroundEvaluateResponse_EvalResultList, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList.results"]; !ok {
		if len(m.Results) > 0 {
			for _, v := range m.Results {
				if v != nil {
					cerbos_response_v1_PlaygroundEvaluateResponse_EvalResult_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundEvaluateResponse_EvalResult_hashpb_sum(m *v13.PlaygroundEvaluateResponse_EvalResult, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.action"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Action))

	}
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.effect"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Effect)))

	}
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.policy"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Policy))

	}
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.effective_derived_roles"]; !ok {
		if len(m.EffectiveDerivedRoles) > 0 {
			for _, v := range m.EffectiveDerivedRoles {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.validation_errors"]; !ok {
		if len(m.ValidationErrors) > 0 {
			for _, v := range m.ValidationErrors {
				if v != nil {
					cerbos_schema_v1_ValidationError_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundEvaluateResponse_hashpb_sum(m *v13.PlaygroundEvaluateResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if m.Outcome != nil {
		if _, ok := ignore["cerbos.response.v1.PlaygroundEvaluateResponse.outcome"]; !ok {
			switch t := m.Outcome.(type) {
			case *v13.PlaygroundEvaluateResponse_Failure:
				if t.Failure != nil {
					cerbos_response_v1_PlaygroundFailure_hashpb_sum(t.Failure, hasher, ignore)
				}

			case *v13.PlaygroundEvaluateResponse_Success:
				if t.Success != nil {
					cerbos_response_v1_PlaygroundEvaluateResponse_EvalResultList_hashpb_sum(t.Success, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundFailure_Error_hashpb_sum(m *v13.PlaygroundFailure_Error, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundFailure.Error.file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.File))

	}
	if _, ok := ignore["cerbos.response.v1.PlaygroundFailure.Error.error"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Error))

	}
}

func cerbos_response_v1_PlaygroundFailure_hashpb_sum(m *v13.PlaygroundFailure, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundFailure.errors"]; !ok {
		if len(m.Errors) > 0 {
			for _, v := range m.Errors {
				if v != nil {
					cerbos_response_v1_PlaygroundFailure_Error_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundProxyResponse_hashpb_sum(m *v13.PlaygroundProxyResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundProxyResponse.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if m.Outcome != nil {
		if _, ok := ignore["cerbos.response.v1.PlaygroundProxyResponse.outcome"]; !ok {
			switch t := m.Outcome.(type) {
			case *v13.PlaygroundProxyResponse_Failure:
				if t.Failure != nil {
					cerbos_response_v1_PlaygroundFailure_hashpb_sum(t.Failure, hasher, ignore)
				}

			case *v13.PlaygroundProxyResponse_CheckResourceSet:
				if t.CheckResourceSet != nil {
					cerbos_response_v1_CheckResourceSetResponse_hashpb_sum(t.CheckResourceSet, hasher, ignore)
				}

			case *v13.PlaygroundProxyResponse_CheckResourceBatch:
				if t.CheckResourceBatch != nil {
					cerbos_response_v1_CheckResourceBatchResponse_hashpb_sum(t.CheckResourceBatch, hasher, ignore)
				}

			case *v13.PlaygroundProxyResponse_PlanResources:
				if t.PlanResources != nil {
					cerbos_response_v1_PlanResourcesResponse_hashpb_sum(t.PlanResources, hasher, ignore)
				}

			case *v13.PlaygroundProxyResponse_CheckResources:
				if t.CheckResources != nil {
					cerbos_response_v1_CheckResourcesResponse_hashpb_sum(t.CheckResources, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundTestResponse_TestResults_hashpb_sum(m *v13.PlaygroundTestResponse_TestResults, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundTestResponse.TestResults.results"]; !ok {
		if m.Results != nil {
			cerbos_policy_v1_TestResults_hashpb_sum(m.Results, hasher, ignore)
		}

	}
}

func cerbos_response_v1_PlaygroundTestResponse_hashpb_sum(m *v13.PlaygroundTestResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundTestResponse.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if m.Outcome != nil {
		if _, ok := ignore["cerbos.response.v1.PlaygroundTestResponse.outcome"]; !ok {
			switch t := m.Outcome.(type) {
			case *v13.PlaygroundTestResponse_Failure:
				if t.Failure != nil {
					cerbos_response_v1_PlaygroundFailure_hashpb_sum(t.Failure, hasher, ignore)
				}

			case *v13.PlaygroundTestResponse_Success:
				if t.Success != nil {
					cerbos_response_v1_PlaygroundTestResponse_TestResults_hashpb_sum(t.Success, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_response_v1_PlaygroundValidateResponse_hashpb_sum(m *v13.PlaygroundValidateResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.response.v1.PlaygroundValidateResponse.playground_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.PlaygroundId))

	}
	if m.Outcome != nil {
		if _, ok := ignore["cerbos.response.v1.PlaygroundValidateResponse.outcome"]; !ok {
			switch t := m.Outcome.(type) {
			case *v13.PlaygroundValidateResponse_Failure:
				if t.Failure != nil {
					cerbos_response_v1_PlaygroundFailure_hashpb_sum(t.Failure, hasher, ignore)
				}

			case *v13.PlaygroundValidateResponse_Success:
				if t.Success != nil {
					google_protobuf_Empty_hashpb_sum(t.Success, hasher, ignore)
				}

			}
		}
	}
}

func cerbos_runtime_v1_IndexBuildErrors_DuplicateDef_hashpb_sum(m *v14.IndexBuildErrors_DuplicateDef, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.DuplicateDef.file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.File))

	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.DuplicateDef.other_file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.OtherFile))

	}
}

func cerbos_runtime_v1_IndexBuildErrors_LoadFailure_hashpb_sum(m *v14.IndexBuildErrors_LoadFailure, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.LoadFailure.file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.File))

	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.LoadFailure.error"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Error))

	}
}

func cerbos_runtime_v1_IndexBuildErrors_MissingImport_hashpb_sum(m *v14.IndexBuildErrors_MissingImport, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.MissingImport.importing_file"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ImportingFile))

	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.MissingImport.desc"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Desc))

	}
}

func cerbos_runtime_v1_IndexBuildErrors_hashpb_sum(m *v14.IndexBuildErrors, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.disabled"]; !ok {
		if len(m.Disabled) > 0 {
			for _, v := range m.Disabled {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.duplicate_defs"]; !ok {
		if len(m.DuplicateDefs) > 0 {
			for _, v := range m.DuplicateDefs {
				if v != nil {
					cerbos_runtime_v1_IndexBuildErrors_DuplicateDef_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.load_failures"]; !ok {
		if len(m.LoadFailures) > 0 {
			for _, v := range m.LoadFailures {
				if v != nil {
					cerbos_runtime_v1_IndexBuildErrors_LoadFailure_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.missing_imports"]; !ok {
		if len(m.MissingImports) > 0 {
			for _, v := range m.MissingImports {
				if v != nil {
					cerbos_runtime_v1_IndexBuildErrors_MissingImport_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["cerbos.runtime.v1.IndexBuildErrors.missing_scopes"]; !ok {
		if len(m.MissingScopes) > 0 {
			for _, v := range m.MissingScopes {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_schema_v1_Schema_hashpb_sum(m *v15.Schema, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.schema.v1.Schema.id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Id))

	}
	if _, ok := ignore["cerbos.schema.v1.Schema.definition"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.Definition))

	}
}

func cerbos_schema_v1_ValidationError_hashpb_sum(m *v15.ValidationError, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.schema.v1.ValidationError.path"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Path))

	}
	if _, ok := ignore["cerbos.schema.v1.ValidationError.message"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Message))

	}
	if _, ok := ignore["cerbos.schema.v1.ValidationError.source"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Source)))

	}
}

func google_protobuf_Empty_hashpb_sum(m *emptypb.Empty, hasher hash.Hash, ignore map[string]struct{}) {
}

func google_protobuf_ListValue_hashpb_sum(m *structpb.ListValue, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.ListValue.values"]; !ok {
		if len(m.Values) > 0 {
			for _, v := range m.Values {
				if v != nil {
					google_protobuf_Value_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func google_protobuf_Struct_hashpb_sum(m *structpb.Struct, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Struct.fields"]; !ok {
		if len(m.Fields) > 0 {
			keys := make([]string, len(m.Fields))
			i := 0
			for k := range m.Fields {
				keys[i] = k
				i++
			}

			sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })

			for _, k := range keys {
				if m.Fields[k] != nil {
					google_protobuf_Value_hashpb_sum(m.Fields[k], hasher, ignore)
				}

			}
		}
	}
}

func google_protobuf_Timestamp_hashpb_sum(m *timestamppb.Timestamp, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Timestamp.seconds"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Seconds)))

	}
	if _, ok := ignore["google.protobuf.Timestamp.nanos"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Nanos)))

	}
}

func google_protobuf_UInt64Value_hashpb_sum(m *wrapperspb.UInt64Value, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.UInt64Value.value"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, m.Value))

	}
}

func google_protobuf_Value_hashpb_sum(m *structpb.Value, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Kind != nil {
		if _, ok := ignore["google.protobuf.Value.kind"]; !ok {
			switch t := m.Kind.(type) {
			case *structpb.Value_NullValue:
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(t.NullValue)))

			case *structpb.Value_NumberValue:
				_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(t.NumberValue)))

			case *structpb.Value_StringValue:
				_, _ = hasher.Write(protowire.AppendString(nil, t.StringValue))

			case *structpb.Value_BoolValue:
				_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(t.BoolValue)))

			case *structpb.Value_StructValue:
				if t.StructValue != nil {
					google_protobuf_Struct_hashpb_sum(t.StructValue, hasher, ignore)
				}

			case *structpb.Value_ListValue:
				if t.ListValue != nil {
					google_protobuf_ListValue_hashpb_sum(t.ListValue, hasher, ignore)
				}

			}
		}
	}
}
