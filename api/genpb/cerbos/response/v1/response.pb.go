// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cerbos/response/v1/response.proto

package responsev1

import (
	v12 "github.com/cerbos/cerbos/api/genpb/cerbos/audit/v1"
	v14 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/engine/v1"
	v13 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/schema/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InspectPoliciesResponse_DerivedRole_Kind int32

const (
	InspectPoliciesResponse_DerivedRole_KIND_UNSPECIFIED InspectPoliciesResponse_DerivedRole_Kind = 0
	InspectPoliciesResponse_DerivedRole_KIND_UNDEFINED   InspectPoliciesResponse_DerivedRole_Kind = 1
	InspectPoliciesResponse_DerivedRole_KIND_EXPORTED    InspectPoliciesResponse_DerivedRole_Kind = 2
	InspectPoliciesResponse_DerivedRole_KIND_IMPORTED    InspectPoliciesResponse_DerivedRole_Kind = 3
)

// Enum value maps for InspectPoliciesResponse_DerivedRole_Kind.
var (
	InspectPoliciesResponse_DerivedRole_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_UNDEFINED",
		2: "KIND_EXPORTED",
		3: "KIND_IMPORTED",
	}
	InspectPoliciesResponse_DerivedRole_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_UNDEFINED":   1,
		"KIND_EXPORTED":    2,
		"KIND_IMPORTED":    3,
	}
)

func (x InspectPoliciesResponse_DerivedRole_Kind) Enum() *InspectPoliciesResponse_DerivedRole_Kind {
	p := new(InspectPoliciesResponse_DerivedRole_Kind)
	*p = x
	return p
}

func (x InspectPoliciesResponse_DerivedRole_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InspectPoliciesResponse_DerivedRole_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_response_v1_response_proto_enumTypes[0].Descriptor()
}

func (InspectPoliciesResponse_DerivedRole_Kind) Type() protoreflect.EnumType {
	return &file_cerbos_response_v1_response_proto_enumTypes[0]
}

func (x InspectPoliciesResponse_DerivedRole_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InspectPoliciesResponse_DerivedRole_Kind.Descriptor instead.
func (InspectPoliciesResponse_DerivedRole_Kind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16, 0, 0}
}

type InspectPoliciesResponse_Variable_Kind int32

const (
	InspectPoliciesResponse_Variable_KIND_UNSPECIFIED InspectPoliciesResponse_Variable_Kind = 0
	InspectPoliciesResponse_Variable_KIND_EXPORTED    InspectPoliciesResponse_Variable_Kind = 1
	InspectPoliciesResponse_Variable_KIND_IMPORTED    InspectPoliciesResponse_Variable_Kind = 2
	InspectPoliciesResponse_Variable_KIND_LOCAL       InspectPoliciesResponse_Variable_Kind = 3
	InspectPoliciesResponse_Variable_KIND_UNDEFINED   InspectPoliciesResponse_Variable_Kind = 4
	InspectPoliciesResponse_Variable_KIND_UNKNOWN     InspectPoliciesResponse_Variable_Kind = 5
)

// Enum value maps for InspectPoliciesResponse_Variable_Kind.
var (
	InspectPoliciesResponse_Variable_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_EXPORTED",
		2: "KIND_IMPORTED",
		3: "KIND_LOCAL",
		4: "KIND_UNDEFINED",
		5: "KIND_UNKNOWN",
	}
	InspectPoliciesResponse_Variable_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_EXPORTED":    1,
		"KIND_IMPORTED":    2,
		"KIND_LOCAL":       3,
		"KIND_UNDEFINED":   4,
		"KIND_UNKNOWN":     5,
	}
)

func (x InspectPoliciesResponse_Variable_Kind) Enum() *InspectPoliciesResponse_Variable_Kind {
	p := new(InspectPoliciesResponse_Variable_Kind)
	*p = x
	return p
}

func (x InspectPoliciesResponse_Variable_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InspectPoliciesResponse_Variable_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_response_v1_response_proto_enumTypes[1].Descriptor()
}

func (InspectPoliciesResponse_Variable_Kind) Type() protoreflect.EnumType {
	return &file_cerbos_response_v1_response_proto_enumTypes[1]
}

func (x InspectPoliciesResponse_Variable_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InspectPoliciesResponse_Variable_Kind.Descriptor instead.
func (InspectPoliciesResponse_Variable_Kind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16, 1, 0}
}

type PlanResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId        string                      `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Action           string                      `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	ResourceKind     string                      `protobuf:"bytes,3,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	PolicyVersion    string                      `protobuf:"bytes,4,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Filter           *v1.PlanResourcesFilter     `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Meta             *PlanResourcesResponse_Meta `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	ValidationErrors []*v11.ValidationError      `protobuf:"bytes,7,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	CerbosCallId     string                      `protobuf:"bytes,8,opt,name=cerbos_call_id,json=cerbosCallId,proto3" json:"cerbos_call_id,omitempty"`
}

func (x *PlanResourcesResponse) Reset() {
	*x = PlanResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesResponse) ProtoMessage() {}

func (x *PlanResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesResponse.ProtoReflect.Descriptor instead.
func (*PlanResourcesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{0}
}

func (x *PlanResourcesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PlanResourcesResponse) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlanResourcesResponse) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

func (x *PlanResourcesResponse) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *PlanResourcesResponse) GetFilter() *v1.PlanResourcesFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PlanResourcesResponse) GetMeta() *PlanResourcesResponse_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PlanResourcesResponse) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *PlanResourcesResponse) GetCerbosCallId() string {
	if x != nil {
		return x.CerbosCallId
	}
	return ""
}

// Deprecated. See CheckResourcesResponse.
type CheckResourceSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId         string                                               `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResourceInstances map[string]*CheckResourceSetResponse_ActionEffectMap `protobuf:"bytes,2,rep,name=resource_instances,json=resourceInstances,proto3" json:"resource_instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Meta              *CheckResourceSetResponse_Meta                       `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *CheckResourceSetResponse) Reset() {
	*x = CheckResourceSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetResponse) ProtoMessage() {}

func (x *CheckResourceSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetResponse.ProtoReflect.Descriptor instead.
func (*CheckResourceSetResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResourceSetResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckResourceSetResponse) GetResourceInstances() map[string]*CheckResourceSetResponse_ActionEffectMap {
	if x != nil {
		return x.ResourceInstances
	}
	return nil
}

func (x *CheckResourceSetResponse) GetMeta() *CheckResourceSetResponse_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Deprecated. See CheckResourcesResponse.
type CheckResourceBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                                        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Results   []*CheckResourceBatchResponse_ActionEffectMap `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CheckResourceBatchResponse) Reset() {
	*x = CheckResourceBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceBatchResponse) ProtoMessage() {}

func (x *CheckResourceBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceBatchResponse.ProtoReflect.Descriptor instead.
func (*CheckResourceBatchResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{2}
}

func (x *CheckResourceBatchResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckResourceBatchResponse) GetResults() []*CheckResourceBatchResponse_ActionEffectMap {
	if x != nil {
		return x.Results
	}
	return nil
}

type CheckResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    string                                `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Results      []*CheckResourcesResponse_ResultEntry `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	CerbosCallId string                                `protobuf:"bytes,3,opt,name=cerbos_call_id,json=cerbosCallId,proto3" json:"cerbos_call_id,omitempty"`
}

func (x *CheckResourcesResponse) Reset() {
	*x = CheckResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourcesResponse) ProtoMessage() {}

func (x *CheckResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourcesResponse.ProtoReflect.Descriptor instead.
func (*CheckResourcesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{3}
}

func (x *CheckResourcesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckResourcesResponse) GetResults() []*CheckResourcesResponse_ResultEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CheckResourcesResponse) GetCerbosCallId() string {
	if x != nil {
		return x.CerbosCallId
	}
	return ""
}

type PlaygroundFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*PlaygroundFailure_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PlaygroundFailure) Reset() {
	*x = PlaygroundFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundFailure) ProtoMessage() {}

func (x *PlaygroundFailure) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundFailure.ProtoReflect.Descriptor instead.
func (*PlaygroundFailure) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{4}
}

func (x *PlaygroundFailure) GetErrors() []*PlaygroundFailure_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PlaygroundValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*PlaygroundValidateResponse_Failure
	//	*PlaygroundValidateResponse_Success
	Outcome isPlaygroundValidateResponse_Outcome `protobuf_oneof:"outcome"`
}

func (x *PlaygroundValidateResponse) Reset() {
	*x = PlaygroundValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundValidateResponse) ProtoMessage() {}

func (x *PlaygroundValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundValidateResponse.ProtoReflect.Descriptor instead.
func (*PlaygroundValidateResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{5}
}

func (x *PlaygroundValidateResponse) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (m *PlaygroundValidateResponse) GetOutcome() isPlaygroundValidateResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *PlaygroundValidateResponse) GetFailure() *PlaygroundFailure {
	if x, ok := x.GetOutcome().(*PlaygroundValidateResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *PlaygroundValidateResponse) GetSuccess() *emptypb.Empty {
	if x, ok := x.GetOutcome().(*PlaygroundValidateResponse_Success); ok {
		return x.Success
	}
	return nil
}

type isPlaygroundValidateResponse_Outcome interface {
	isPlaygroundValidateResponse_Outcome()
}

type PlaygroundValidateResponse_Failure struct {
	Failure *PlaygroundFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type PlaygroundValidateResponse_Success struct {
	Success *emptypb.Empty `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

func (*PlaygroundValidateResponse_Failure) isPlaygroundValidateResponse_Outcome() {}

func (*PlaygroundValidateResponse_Success) isPlaygroundValidateResponse_Outcome() {}

type PlaygroundTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*PlaygroundTestResponse_Failure
	//	*PlaygroundTestResponse_Success
	Outcome isPlaygroundTestResponse_Outcome `protobuf_oneof:"outcome"`
}

func (x *PlaygroundTestResponse) Reset() {
	*x = PlaygroundTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundTestResponse) ProtoMessage() {}

func (x *PlaygroundTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundTestResponse.ProtoReflect.Descriptor instead.
func (*PlaygroundTestResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{6}
}

func (x *PlaygroundTestResponse) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (m *PlaygroundTestResponse) GetOutcome() isPlaygroundTestResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *PlaygroundTestResponse) GetFailure() *PlaygroundFailure {
	if x, ok := x.GetOutcome().(*PlaygroundTestResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *PlaygroundTestResponse) GetSuccess() *PlaygroundTestResponse_TestResults {
	if x, ok := x.GetOutcome().(*PlaygroundTestResponse_Success); ok {
		return x.Success
	}
	return nil
}

type isPlaygroundTestResponse_Outcome interface {
	isPlaygroundTestResponse_Outcome()
}

type PlaygroundTestResponse_Failure struct {
	Failure *PlaygroundFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type PlaygroundTestResponse_Success struct {
	Success *PlaygroundTestResponse_TestResults `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

func (*PlaygroundTestResponse_Failure) isPlaygroundTestResponse_Outcome() {}

func (*PlaygroundTestResponse_Success) isPlaygroundTestResponse_Outcome() {}

type PlaygroundEvaluateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*PlaygroundEvaluateResponse_Failure
	//	*PlaygroundEvaluateResponse_Success
	Outcome isPlaygroundEvaluateResponse_Outcome `protobuf_oneof:"outcome"`
}

func (x *PlaygroundEvaluateResponse) Reset() {
	*x = PlaygroundEvaluateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundEvaluateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundEvaluateResponse) ProtoMessage() {}

func (x *PlaygroundEvaluateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundEvaluateResponse.ProtoReflect.Descriptor instead.
func (*PlaygroundEvaluateResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{7}
}

func (x *PlaygroundEvaluateResponse) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (m *PlaygroundEvaluateResponse) GetOutcome() isPlaygroundEvaluateResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *PlaygroundEvaluateResponse) GetFailure() *PlaygroundFailure {
	if x, ok := x.GetOutcome().(*PlaygroundEvaluateResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *PlaygroundEvaluateResponse) GetSuccess() *PlaygroundEvaluateResponse_EvalResultList {
	if x, ok := x.GetOutcome().(*PlaygroundEvaluateResponse_Success); ok {
		return x.Success
	}
	return nil
}

type isPlaygroundEvaluateResponse_Outcome interface {
	isPlaygroundEvaluateResponse_Outcome()
}

type PlaygroundEvaluateResponse_Failure struct {
	Failure *PlaygroundFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type PlaygroundEvaluateResponse_Success struct {
	Success *PlaygroundEvaluateResponse_EvalResultList `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

func (*PlaygroundEvaluateResponse_Failure) isPlaygroundEvaluateResponse_Outcome() {}

func (*PlaygroundEvaluateResponse_Success) isPlaygroundEvaluateResponse_Outcome() {}

type PlaygroundProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	// Types that are assignable to Outcome:
	//
	//	*PlaygroundProxyResponse_Failure
	//	*PlaygroundProxyResponse_CheckResourceSet
	//	*PlaygroundProxyResponse_CheckResourceBatch
	//	*PlaygroundProxyResponse_PlanResources
	//	*PlaygroundProxyResponse_CheckResources
	Outcome isPlaygroundProxyResponse_Outcome `protobuf_oneof:"outcome"`
}

func (x *PlaygroundProxyResponse) Reset() {
	*x = PlaygroundProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundProxyResponse) ProtoMessage() {}

func (x *PlaygroundProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundProxyResponse.ProtoReflect.Descriptor instead.
func (*PlaygroundProxyResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{8}
}

func (x *PlaygroundProxyResponse) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (m *PlaygroundProxyResponse) GetOutcome() isPlaygroundProxyResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (x *PlaygroundProxyResponse) GetFailure() *PlaygroundFailure {
	if x, ok := x.GetOutcome().(*PlaygroundProxyResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *PlaygroundProxyResponse) GetCheckResourceSet() *CheckResourceSetResponse {
	if x, ok := x.GetOutcome().(*PlaygroundProxyResponse_CheckResourceSet); ok {
		return x.CheckResourceSet
	}
	return nil
}

func (x *PlaygroundProxyResponse) GetCheckResourceBatch() *CheckResourceBatchResponse {
	if x, ok := x.GetOutcome().(*PlaygroundProxyResponse_CheckResourceBatch); ok {
		return x.CheckResourceBatch
	}
	return nil
}

func (x *PlaygroundProxyResponse) GetPlanResources() *PlanResourcesResponse {
	if x, ok := x.GetOutcome().(*PlaygroundProxyResponse_PlanResources); ok {
		return x.PlanResources
	}
	return nil
}

func (x *PlaygroundProxyResponse) GetCheckResources() *CheckResourcesResponse {
	if x, ok := x.GetOutcome().(*PlaygroundProxyResponse_CheckResources); ok {
		return x.CheckResources
	}
	return nil
}

type isPlaygroundProxyResponse_Outcome interface {
	isPlaygroundProxyResponse_Outcome()
}

type PlaygroundProxyResponse_Failure struct {
	Failure *PlaygroundFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type PlaygroundProxyResponse_CheckResourceSet struct {
	CheckResourceSet *CheckResourceSetResponse `protobuf:"bytes,3,opt,name=check_resource_set,json=checkResourceSet,proto3,oneof"`
}

type PlaygroundProxyResponse_CheckResourceBatch struct {
	CheckResourceBatch *CheckResourceBatchResponse `protobuf:"bytes,4,opt,name=check_resource_batch,json=checkResourceBatch,proto3,oneof"`
}

type PlaygroundProxyResponse_PlanResources struct {
	PlanResources *PlanResourcesResponse `protobuf:"bytes,5,opt,name=plan_resources,json=planResources,proto3,oneof"`
}

type PlaygroundProxyResponse_CheckResources struct {
	CheckResources *CheckResourcesResponse `protobuf:"bytes,6,opt,name=check_resources,json=checkResources,proto3,oneof"`
}

func (*PlaygroundProxyResponse_Failure) isPlaygroundProxyResponse_Outcome() {}

func (*PlaygroundProxyResponse_CheckResourceSet) isPlaygroundProxyResponse_Outcome() {}

func (*PlaygroundProxyResponse_CheckResourceBatch) isPlaygroundProxyResponse_Outcome() {}

func (*PlaygroundProxyResponse_PlanResources) isPlaygroundProxyResponse_Outcome() {}

func (*PlaygroundProxyResponse_CheckResources) isPlaygroundProxyResponse_Outcome() {}

type AddOrUpdatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *emptypb.Empty `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddOrUpdatePolicyResponse) Reset() {
	*x = AddOrUpdatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdatePolicyResponse) ProtoMessage() {}

func (x *AddOrUpdatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdatePolicyResponse.ProtoReflect.Descriptor instead.
func (*AddOrUpdatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{9}
}

func (x *AddOrUpdatePolicyResponse) GetSuccess() *emptypb.Empty {
	if x != nil {
		return x.Success
	}
	return nil
}

type ListAuditLogEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*ListAuditLogEntriesResponse_AccessLogEntry
	//	*ListAuditLogEntriesResponse_DecisionLogEntry
	Entry isListAuditLogEntriesResponse_Entry `protobuf_oneof:"entry"`
}

func (x *ListAuditLogEntriesResponse) Reset() {
	*x = ListAuditLogEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogEntriesResponse) ProtoMessage() {}

func (x *ListAuditLogEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListAuditLogEntriesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{10}
}

func (m *ListAuditLogEntriesResponse) GetEntry() isListAuditLogEntriesResponse_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *ListAuditLogEntriesResponse) GetAccessLogEntry() *v12.AccessLogEntry {
	if x, ok := x.GetEntry().(*ListAuditLogEntriesResponse_AccessLogEntry); ok {
		return x.AccessLogEntry
	}
	return nil
}

func (x *ListAuditLogEntriesResponse) GetDecisionLogEntry() *v12.DecisionLogEntry {
	if x, ok := x.GetEntry().(*ListAuditLogEntriesResponse_DecisionLogEntry); ok {
		return x.DecisionLogEntry
	}
	return nil
}

type isListAuditLogEntriesResponse_Entry interface {
	isListAuditLogEntriesResponse_Entry()
}

type ListAuditLogEntriesResponse_AccessLogEntry struct {
	AccessLogEntry *v12.AccessLogEntry `protobuf:"bytes,1,opt,name=access_log_entry,json=accessLogEntry,proto3,oneof"`
}

type ListAuditLogEntriesResponse_DecisionLogEntry struct {
	DecisionLogEntry *v12.DecisionLogEntry `protobuf:"bytes,2,opt,name=decision_log_entry,json=decisionLogEntry,proto3,oneof"`
}

func (*ListAuditLogEntriesResponse_AccessLogEntry) isListAuditLogEntriesResponse_Entry() {}

func (*ListAuditLogEntriesResponse_DecisionLogEntry) isListAuditLogEntriesResponse_Entry() {}

type ServerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	BuildDate string `protobuf:"bytes,3,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
}

func (x *ServerInfoResponse) Reset() {
	*x = ServerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoResponse) ProtoMessage() {}

func (x *ServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoResponse.ProtoReflect.Descriptor instead.
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{11}
}

func (x *ServerInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerInfoResponse) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ServerInfoResponse) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyIds []string `protobuf:"bytes,1,rep,name=policy_ids,json=policyIds,proto3" json:"policy_ids,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{12}
}

func (x *ListPoliciesResponse) GetPolicyIds() []string {
	if x != nil {
		return x.PolicyIds
	}
	return nil
}

type GetPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*v13.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *GetPolicyResponse) Reset() {
	*x = GetPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyResponse) ProtoMessage() {}

func (x *GetPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{13}
}

func (x *GetPolicyResponse) GetPolicies() []*v13.Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type DisablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisabledPolicies uint32 `protobuf:"varint,1,opt,name=disabled_policies,json=disabledPolicies,proto3" json:"disabled_policies,omitempty"`
}

func (x *DisablePolicyResponse) Reset() {
	*x = DisablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePolicyResponse) ProtoMessage() {}

func (x *DisablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePolicyResponse.ProtoReflect.Descriptor instead.
func (*DisablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{14}
}

func (x *DisablePolicyResponse) GetDisabledPolicies() uint32 {
	if x != nil {
		return x.DisabledPolicies
	}
	return 0
}

type EnablePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledPolicies uint32 `protobuf:"varint,1,opt,name=enabled_policies,json=enabledPolicies,proto3" json:"enabled_policies,omitempty"`
}

func (x *EnablePolicyResponse) Reset() {
	*x = EnablePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePolicyResponse) ProtoMessage() {}

func (x *EnablePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePolicyResponse.ProtoReflect.Descriptor instead.
func (*EnablePolicyResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{15}
}

func (x *EnablePolicyResponse) GetEnabledPolicies() uint32 {
	if x != nil {
		return x.EnabledPolicies
	}
	return 0
}

type InspectPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*InspectPoliciesResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InspectPoliciesResponse) Reset() {
	*x = InspectPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoliciesResponse) ProtoMessage() {}

func (x *InspectPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoliciesResponse.ProtoReflect.Descriptor instead.
func (*InspectPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16}
}

func (x *InspectPoliciesResponse) GetResults() map[string]*InspectPoliciesResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type AddOrUpdateSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddOrUpdateSchemaResponse) Reset() {
	*x = AddOrUpdateSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateSchemaResponse) ProtoMessage() {}

func (x *AddOrUpdateSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateSchemaResponse.ProtoReflect.Descriptor instead.
func (*AddOrUpdateSchemaResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{17}
}

type ListSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaIds []string `protobuf:"bytes,1,rep,name=schema_ids,json=schemaIds,proto3" json:"schema_ids,omitempty"`
}

func (x *ListSchemasResponse) Reset() {
	*x = ListSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemasResponse) ProtoMessage() {}

func (x *ListSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemasResponse.ProtoReflect.Descriptor instead.
func (*ListSchemasResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{18}
}

func (x *ListSchemasResponse) GetSchemaIds() []string {
	if x != nil {
		return x.SchemaIds
	}
	return nil
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []*v11.Schema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{19}
}

func (x *GetSchemaResponse) GetSchemas() []*v11.Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type DeleteSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedSchemas uint32 `protobuf:"varint,1,opt,name=deleted_schemas,json=deletedSchemas,proto3" json:"deleted_schemas,omitempty"`
}

func (x *DeleteSchemaResponse) Reset() {
	*x = DeleteSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemaResponse) ProtoMessage() {}

func (x *DeleteSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemaResponse.ProtoReflect.Descriptor instead.
func (*DeleteSchemaResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteSchemaResponse) GetDeletedSchemas() uint32 {
	if x != nil {
		return x.DeletedSchemas
	}
	return 0
}

type ReloadStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadStoreResponse) Reset() {
	*x = ReloadStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadStoreResponse) ProtoMessage() {}

func (x *ReloadStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadStoreResponse.ProtoReflect.Descriptor instead.
func (*ReloadStoreResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{21}
}

type PlanResourcesResponse_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterDebug  string `protobuf:"bytes,1,opt,name=filter_debug,json=filterDebug,proto3" json:"filter_debug,omitempty"`
	MatchedScope string `protobuf:"bytes,2,opt,name=matched_scope,json=matchedScope,proto3" json:"matched_scope,omitempty"`
}

func (x *PlanResourcesResponse_Meta) Reset() {
	*x = PlanResourcesResponse_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanResourcesResponse_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourcesResponse_Meta) ProtoMessage() {}

func (x *PlanResourcesResponse_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourcesResponse_Meta.ProtoReflect.Descriptor instead.
func (*PlanResourcesResponse_Meta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PlanResourcesResponse_Meta) GetFilterDebug() string {
	if x != nil {
		return x.FilterDebug
	}
	return ""
}

func (x *PlanResourcesResponse_Meta) GetMatchedScope() string {
	if x != nil {
		return x.MatchedScope
	}
	return ""
}

type CheckResourceSetResponse_ActionEffectMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions          map[string]v14.Effect  `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cerbos.effect.v1.Effect"`
	ValidationErrors []*v11.ValidationError `protobuf:"bytes,2,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *CheckResourceSetResponse_ActionEffectMap) Reset() {
	*x = CheckResourceSetResponse_ActionEffectMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetResponse_ActionEffectMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetResponse_ActionEffectMap) ProtoMessage() {}

func (x *CheckResourceSetResponse_ActionEffectMap) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetResponse_ActionEffectMap.ProtoReflect.Descriptor instead.
func (*CheckResourceSetResponse_ActionEffectMap) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CheckResourceSetResponse_ActionEffectMap) GetActions() map[string]v14.Effect {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourceSetResponse_ActionEffectMap) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type CheckResourceSetResponse_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceInstances map[string]*CheckResourceSetResponse_Meta_ActionMeta `protobuf:"bytes,1,rep,name=resource_instances,json=resourceInstances,proto3" json:"resource_instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckResourceSetResponse_Meta) Reset() {
	*x = CheckResourceSetResponse_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetResponse_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetResponse_Meta) ProtoMessage() {}

func (x *CheckResourceSetResponse_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetResponse_Meta.ProtoReflect.Descriptor instead.
func (*CheckResourceSetResponse_Meta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CheckResourceSetResponse_Meta) GetResourceInstances() map[string]*CheckResourceSetResponse_Meta_ActionMeta {
	if x != nil {
		return x.ResourceInstances
	}
	return nil
}

type CheckResourceSetResponse_Meta_EffectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedPolicy string `protobuf:"bytes,1,opt,name=matched_policy,json=matchedPolicy,proto3" json:"matched_policy,omitempty"`
	MatchedScope  string `protobuf:"bytes,2,opt,name=matched_scope,json=matchedScope,proto3" json:"matched_scope,omitempty"`
}

func (x *CheckResourceSetResponse_Meta_EffectMeta) Reset() {
	*x = CheckResourceSetResponse_Meta_EffectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetResponse_Meta_EffectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetResponse_Meta_EffectMeta) ProtoMessage() {}

func (x *CheckResourceSetResponse_Meta_EffectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetResponse_Meta_EffectMeta.ProtoReflect.Descriptor instead.
func (*CheckResourceSetResponse_Meta_EffectMeta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *CheckResourceSetResponse_Meta_EffectMeta) GetMatchedPolicy() string {
	if x != nil {
		return x.MatchedPolicy
	}
	return ""
}

func (x *CheckResourceSetResponse_Meta_EffectMeta) GetMatchedScope() string {
	if x != nil {
		return x.MatchedScope
	}
	return ""
}

type CheckResourceSetResponse_Meta_ActionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions               map[string]*CheckResourceSetResponse_Meta_EffectMeta `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EffectiveDerivedRoles []string                                             `protobuf:"bytes,2,rep,name=effective_derived_roles,json=effectiveDerivedRoles,proto3" json:"effective_derived_roles,omitempty"`
}

func (x *CheckResourceSetResponse_Meta_ActionMeta) Reset() {
	*x = CheckResourceSetResponse_Meta_ActionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetResponse_Meta_ActionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetResponse_Meta_ActionMeta) ProtoMessage() {}

func (x *CheckResourceSetResponse_Meta_ActionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetResponse_Meta_ActionMeta.ProtoReflect.Descriptor instead.
func (*CheckResourceSetResponse_Meta_ActionMeta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *CheckResourceSetResponse_Meta_ActionMeta) GetActions() map[string]*CheckResourceSetResponse_Meta_EffectMeta {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourceSetResponse_Meta_ActionMeta) GetEffectiveDerivedRoles() []string {
	if x != nil {
		return x.EffectiveDerivedRoles
	}
	return nil
}

type CheckResourceBatchResponse_ActionEffectMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId       string                 `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Actions          map[string]v14.Effect  `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cerbos.effect.v1.Effect"`
	ValidationErrors []*v11.ValidationError `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *CheckResourceBatchResponse_ActionEffectMap) Reset() {
	*x = CheckResourceBatchResponse_ActionEffectMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceBatchResponse_ActionEffectMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceBatchResponse_ActionEffectMap) ProtoMessage() {}

func (x *CheckResourceBatchResponse_ActionEffectMap) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceBatchResponse_ActionEffectMap.ProtoReflect.Descriptor instead.
func (*CheckResourceBatchResponse_ActionEffectMap) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CheckResourceBatchResponse_ActionEffectMap) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CheckResourceBatchResponse_ActionEffectMap) GetActions() map[string]v14.Effect {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourceBatchResponse_ActionEffectMap) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type CheckResourcesResponse_ResultEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource         *CheckResourcesResponse_ResultEntry_Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Actions          map[string]v14.Effect                        `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cerbos.effect.v1.Effect"`
	ValidationErrors []*v11.ValidationError                       `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	Meta             *CheckResourcesResponse_ResultEntry_Meta     `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	Outputs          []*v1.OutputEntry                            `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *CheckResourcesResponse_ResultEntry) Reset() {
	*x = CheckResourcesResponse_ResultEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourcesResponse_ResultEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourcesResponse_ResultEntry) ProtoMessage() {}

func (x *CheckResourcesResponse_ResultEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourcesResponse_ResultEntry.ProtoReflect.Descriptor instead.
func (*CheckResourcesResponse_ResultEntry) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CheckResourcesResponse_ResultEntry) GetResource() *CheckResourcesResponse_ResultEntry_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CheckResourcesResponse_ResultEntry) GetActions() map[string]v14.Effect {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourcesResponse_ResultEntry) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *CheckResourcesResponse_ResultEntry) GetMeta() *CheckResourcesResponse_ResultEntry_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CheckResourcesResponse_ResultEntry) GetOutputs() []*v1.OutputEntry {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CheckResourcesResponse_ResultEntry_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind          string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	PolicyVersion string `protobuf:"bytes,3,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Scope         string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *CheckResourcesResponse_ResultEntry_Resource) Reset() {
	*x = CheckResourcesResponse_ResultEntry_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourcesResponse_ResultEntry_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourcesResponse_ResultEntry_Resource) ProtoMessage() {}

func (x *CheckResourcesResponse_ResultEntry_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourcesResponse_ResultEntry_Resource.ProtoReflect.Descriptor instead.
func (*CheckResourcesResponse_ResultEntry_Resource) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *CheckResourcesResponse_ResultEntry_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckResourcesResponse_ResultEntry_Resource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CheckResourcesResponse_ResultEntry_Resource) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *CheckResourcesResponse_ResultEntry_Resource) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type CheckResourcesResponse_ResultEntry_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions               map[string]*CheckResourcesResponse_ResultEntry_Meta_EffectMeta `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EffectiveDerivedRoles []string                                                       `protobuf:"bytes,2,rep,name=effective_derived_roles,json=effectiveDerivedRoles,proto3" json:"effective_derived_roles,omitempty"`
}

func (x *CheckResourcesResponse_ResultEntry_Meta) Reset() {
	*x = CheckResourcesResponse_ResultEntry_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourcesResponse_ResultEntry_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourcesResponse_ResultEntry_Meta) ProtoMessage() {}

func (x *CheckResourcesResponse_ResultEntry_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourcesResponse_ResultEntry_Meta.ProtoReflect.Descriptor instead.
func (*CheckResourcesResponse_ResultEntry_Meta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *CheckResourcesResponse_ResultEntry_Meta) GetActions() map[string]*CheckResourcesResponse_ResultEntry_Meta_EffectMeta {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourcesResponse_ResultEntry_Meta) GetEffectiveDerivedRoles() []string {
	if x != nil {
		return x.EffectiveDerivedRoles
	}
	return nil
}

type CheckResourcesResponse_ResultEntry_Meta_EffectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedPolicy string `protobuf:"bytes,1,opt,name=matched_policy,json=matchedPolicy,proto3" json:"matched_policy,omitempty"`
	MatchedScope  string `protobuf:"bytes,2,opt,name=matched_scope,json=matchedScope,proto3" json:"matched_scope,omitempty"`
}

func (x *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) Reset() {
	*x = CheckResourcesResponse_ResultEntry_Meta_EffectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourcesResponse_ResultEntry_Meta_EffectMeta) ProtoMessage() {}

func (x *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourcesResponse_ResultEntry_Meta_EffectMeta.ProtoReflect.Descriptor instead.
func (*CheckResourcesResponse_ResultEntry_Meta_EffectMeta) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{3, 0, 1, 0}
}

func (x *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) GetMatchedPolicy() string {
	if x != nil {
		return x.MatchedPolicy
	}
	return ""
}

func (x *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) GetMatchedScope() string {
	if x != nil {
		return x.MatchedScope
	}
	return ""
}

type PlaygroundFailure_ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line    uint32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column  uint32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *PlaygroundFailure_ErrorDetails) Reset() {
	*x = PlaygroundFailure_ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundFailure_ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundFailure_ErrorDetails) ProtoMessage() {}

func (x *PlaygroundFailure_ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundFailure_ErrorDetails.ProtoReflect.Descriptor instead.
func (*PlaygroundFailure_ErrorDetails) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PlaygroundFailure_ErrorDetails) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *PlaygroundFailure_ErrorDetails) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *PlaygroundFailure_ErrorDetails) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type PlaygroundFailure_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    string                          `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Error   string                          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Details *PlaygroundFailure_ErrorDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *PlaygroundFailure_Error) Reset() {
	*x = PlaygroundFailure_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundFailure_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundFailure_Error) ProtoMessage() {}

func (x *PlaygroundFailure_Error) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundFailure_Error.ProtoReflect.Descriptor instead.
func (*PlaygroundFailure_Error) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PlaygroundFailure_Error) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *PlaygroundFailure_Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PlaygroundFailure_Error) GetDetails() *PlaygroundFailure_ErrorDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type PlaygroundTestResponse_TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *v13.TestResults `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *PlaygroundTestResponse_TestResults) Reset() {
	*x = PlaygroundTestResponse_TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundTestResponse_TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundTestResponse_TestResults) ProtoMessage() {}

func (x *PlaygroundTestResponse_TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundTestResponse_TestResults.ProtoReflect.Descriptor instead.
func (*PlaygroundTestResponse_TestResults) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PlaygroundTestResponse_TestResults) GetResults() *v13.TestResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type PlaygroundEvaluateResponse_EvalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string     `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Effect v14.Effect `protobuf:"varint,2,opt,name=effect,proto3,enum=cerbos.effect.v1.Effect" json:"effect,omitempty"`
	Policy string     `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/response/v1/response.proto.
	EffectiveDerivedRoles []string `protobuf:"bytes,4,rep,name=effective_derived_roles,json=effectiveDerivedRoles,proto3" json:"effective_derived_roles,omitempty"`
	// Deprecated: Marked as deprecated in cerbos/response/v1/response.proto.
	ValidationErrors []*v11.ValidationError `protobuf:"bytes,5,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *PlaygroundEvaluateResponse_EvalResult) Reset() {
	*x = PlaygroundEvaluateResponse_EvalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundEvaluateResponse_EvalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundEvaluateResponse_EvalResult) ProtoMessage() {}

func (x *PlaygroundEvaluateResponse_EvalResult) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundEvaluateResponse_EvalResult.ProtoReflect.Descriptor instead.
func (*PlaygroundEvaluateResponse_EvalResult) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PlaygroundEvaluateResponse_EvalResult) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PlaygroundEvaluateResponse_EvalResult) GetEffect() v14.Effect {
	if x != nil {
		return x.Effect
	}
	return v14.Effect(0)
}

func (x *PlaygroundEvaluateResponse_EvalResult) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

// Deprecated: Marked as deprecated in cerbos/response/v1/response.proto.
func (x *PlaygroundEvaluateResponse_EvalResult) GetEffectiveDerivedRoles() []string {
	if x != nil {
		return x.EffectiveDerivedRoles
	}
	return nil
}

// Deprecated: Marked as deprecated in cerbos/response/v1/response.proto.
func (x *PlaygroundEvaluateResponse_EvalResult) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type PlaygroundEvaluateResponse_EvalResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results               []*PlaygroundEvaluateResponse_EvalResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	EffectiveDerivedRoles []string                                 `protobuf:"bytes,2,rep,name=effective_derived_roles,json=effectiveDerivedRoles,proto3" json:"effective_derived_roles,omitempty"`
	ValidationErrors      []*v11.ValidationError                   `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	Outputs               []*v1.OutputEntry                        `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *PlaygroundEvaluateResponse_EvalResultList) Reset() {
	*x = PlaygroundEvaluateResponse_EvalResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundEvaluateResponse_EvalResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundEvaluateResponse_EvalResultList) ProtoMessage() {}

func (x *PlaygroundEvaluateResponse_EvalResultList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundEvaluateResponse_EvalResultList.ProtoReflect.Descriptor instead.
func (*PlaygroundEvaluateResponse_EvalResultList) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{7, 1}
}

func (x *PlaygroundEvaluateResponse_EvalResultList) GetResults() []*PlaygroundEvaluateResponse_EvalResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PlaygroundEvaluateResponse_EvalResultList) GetEffectiveDerivedRoles() []string {
	if x != nil {
		return x.EffectiveDerivedRoles
	}
	return nil
}

func (x *PlaygroundEvaluateResponse_EvalResultList) GetValidationErrors() []*v11.ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *PlaygroundEvaluateResponse_EvalResultList) GetOutputs() []*v1.OutputEntry {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type InspectPoliciesResponse_DerivedRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind   InspectPoliciesResponse_DerivedRole_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=cerbos.response.v1.InspectPoliciesResponse_DerivedRole_Kind" json:"kind,omitempty"`
	Source string                                   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *InspectPoliciesResponse_DerivedRole) Reset() {
	*x = InspectPoliciesResponse_DerivedRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoliciesResponse_DerivedRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoliciesResponse_DerivedRole) ProtoMessage() {}

func (x *InspectPoliciesResponse_DerivedRole) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoliciesResponse_DerivedRole.ProtoReflect.Descriptor instead.
func (*InspectPoliciesResponse_DerivedRole) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16, 0}
}

func (x *InspectPoliciesResponse_DerivedRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectPoliciesResponse_DerivedRole) GetKind() InspectPoliciesResponse_DerivedRole_Kind {
	if x != nil {
		return x.Kind
	}
	return InspectPoliciesResponse_DerivedRole_KIND_UNSPECIFIED
}

func (x *InspectPoliciesResponse_DerivedRole) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type InspectPoliciesResponse_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value  string                                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Kind   InspectPoliciesResponse_Variable_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=cerbos.response.v1.InspectPoliciesResponse_Variable_Kind" json:"kind,omitempty"`
	Source string                                `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Used   bool                                  `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *InspectPoliciesResponse_Variable) Reset() {
	*x = InspectPoliciesResponse_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoliciesResponse_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoliciesResponse_Variable) ProtoMessage() {}

func (x *InspectPoliciesResponse_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoliciesResponse_Variable.ProtoReflect.Descriptor instead.
func (*InspectPoliciesResponse_Variable) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16, 1}
}

func (x *InspectPoliciesResponse_Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectPoliciesResponse_Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *InspectPoliciesResponse_Variable) GetKind() InspectPoliciesResponse_Variable_Kind {
	if x != nil {
		return x.Kind
	}
	return InspectPoliciesResponse_Variable_KIND_UNSPECIFIED
}

func (x *InspectPoliciesResponse_Variable) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *InspectPoliciesResponse_Variable) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

type InspectPoliciesResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions      []string                               `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Variables    []*InspectPoliciesResponse_Variable    `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
	PolicyId     string                                 `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	DerivedRoles []*InspectPoliciesResponse_DerivedRole `protobuf:"bytes,4,rep,name=derived_roles,json=derivedRoles,proto3" json:"derived_roles,omitempty"`
}

func (x *InspectPoliciesResponse_Result) Reset() {
	*x = InspectPoliciesResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_response_v1_response_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoliciesResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoliciesResponse_Result) ProtoMessage() {}

func (x *InspectPoliciesResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_response_v1_response_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoliciesResponse_Result.ProtoReflect.Descriptor instead.
func (*InspectPoliciesResponse_Result) Descriptor() ([]byte, []int) {
	return file_cerbos_response_v1_response_proto_rawDescGZIP(), []int{16, 2}
}

func (x *InspectPoliciesResponse_Result) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *InspectPoliciesResponse_Result) GetVariables() []*InspectPoliciesResponse_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *InspectPoliciesResponse_Result) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *InspectPoliciesResponse_Result) GetDerivedRoles() []*InspectPoliciesResponse_DerivedRole {
	if x != nil {
		return x.DerivedRoles
	}
	return nil
}

var File_cerbos_response_v1_response_proto protoreflect.FileDescriptor

var file_cerbos_response_v1_response_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x08,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d,
	0x32, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x26, 0x22, 0x63, 0x32, 0x64, 0x62, 0x31, 0x37, 0x62, 0x38,
	0x2d, 0x34, 0x66, 0x39, 0x66, 0x2d, 0x34, 0x66, 0x62, 0x31, 0x2d, 0x61, 0x63, 0x66, 0x64, 0x2d,
	0x39, 0x31, 0x36, 0x32, 0x61, 0x30, 0x32, 0x62, 0x65, 0x34, 0x32, 0x62, 0x22, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0d, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x22, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x4a, 0x0e, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x32, 0x13, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x7f,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x32, 0x36, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x90, 0x01, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x40,
	0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x28,
	0x69, 0x66, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x29,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20,
	0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x1a, 0xff, 0x01,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x37, 0x32, 0x35, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x6d, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41,
	0x45, 0x32, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x4a, 0x10, 0x22, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x22, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x32, 0x22, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x3a,
	0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x32, 0x35, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x22, 0xc8, 0x15,
	0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50,
	0x92, 0x41, 0x4d, 0x32, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x26, 0x22, 0x63, 0x32, 0x64, 0x62, 0x31,
	0x37, 0x62, 0x38, 0x2d, 0x34, 0x66, 0x39, 0x66, 0x2d, 0x34, 0x66, 0x62, 0x31, 0x2d, 0x61, 0x63,
	0x66, 0x64, 0x2d, 0x39, 0x31, 0x36, 0x32, 0x61, 0x30, 0x32, 0x62, 0x65, 0x34, 0x32, 0x62, 0x22,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0xdb, 0x02, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xe6, 0x01,
	0x92, 0x41, 0xe2, 0x01, 0x32, 0x4b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4a, 0x92, 0x01, 0x7b, 0x22, 0x58, 0x58, 0x31, 0x32, 0x35, 0x22, 0x3a, 0x7b, 0x22, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a,
	0x22, 0x3a, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x22,
	0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x22, 0x7d, 0x7d, 0x2c, 0x20, 0x22,
	0x58, 0x58, 0x32, 0x32, 0x35, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3a, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a, 0x22, 0x3a, 0x22, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45,
	0x4e, 0x59, 0x22, 0x7d, 0x7d, 0x7d, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x3b, 0x92, 0x41, 0x38,
	0x32, 0x36, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x8b,
	0x03, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x20, 0x28, 0x69, 0x66, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x29, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x54, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x89, 0x0c, 0x0a,
	0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0xcf, 0x03, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xd5, 0x02, 0x92,
	0x41, 0xd1, 0x02, 0x32, 0x22, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4a, 0xaa, 0x02, 0x7b, 0x22, 0x58, 0x58, 0x31, 0x32,
	0x35, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x20,
	0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x7b,
	0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x7d, 0x2c, 0x20, 0x22, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x5d,
	0x7d, 0x2c, 0x20, 0x22, 0x58, 0x58, 0x32, 0x32, 0x35, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a,
	0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x7d, 0x7d, 0x7d, 0x7d, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x88, 0x02, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0x92, 0x41, 0x45, 0x32, 0x2b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x4a, 0x16, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6d, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0x92, 0x41, 0x45, 0x32, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x10, 0x22, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x22, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x32, 0x13, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x1a, 0xf3, 0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0xa7, 0x02, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xc1,
	0x01, 0x92, 0x41, 0xbd, 0x01, 0x32, 0x4f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x65, 0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x6a, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a,
	0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x7d, 0x7d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x17,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4b, 0x92,
	0x41, 0x48, 0x32, 0x3b, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a,
	0x09, 0x5b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x5d, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x1a, 0x78, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3b, 0x92, 0x41, 0x38,
	0x0a, 0x36, 0x32, 0x34, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x1a, 0x82, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x29, 0x92,
	0x41, 0x26, 0x0a, 0x24, 0x32, 0x22, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x82, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x39, 0x92,
	0x41, 0x36, 0x0a, 0x34, 0x32, 0x32, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x22, 0xe5, 0x06, 0x0a, 0x1a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d,
	0x32, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x26, 0x22, 0x63, 0x32, 0x64, 0x62, 0x31, 0x37, 0x62, 0x38,
	0x2d, 0x34, 0x66, 0x39, 0x66, 0x2d, 0x34, 0x66, 0x62, 0x31, 0x2d, 0x61, 0x63, 0x66, 0x64, 0x2d,
	0x39, 0x31, 0x36, 0x32, 0x61, 0x30, 0x32, 0x62, 0x65, 0x34, 0x32, 0x62, 0x22, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x59, 0x92, 0x41, 0x56, 0x32,
	0x18, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x3a, 0x5b, 0x7b, 0x22, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x58, 0x58, 0x31, 0x32, 0x35,
	0x22, 0x2c, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x3a, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x22, 0x7d, 0x7d, 0x5d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xe2,
	0x03, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x0b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x49, 0x44, 0x4a, 0x07, 0x22, 0x58, 0x58, 0x31, 0x32,
	0x35, 0x22, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0xa9,
	0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x42, 0x92,
	0x41, 0x3f, 0x32, 0x24, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
	0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x17, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x3a, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x22,
	0x7d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x28, 0x69, 0x66, 0x20, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x29, 0x52, 0x10, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x54, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x32, 0x34, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x22, 0xbe, 0x17, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x50, 0x92, 0x41, 0x4d, 0x32, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x49, 0x44,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x26, 0x22, 0x63, 0x32, 0x64, 0x62,
	0x31, 0x37, 0x62, 0x38, 0x2d, 0x34, 0x66, 0x39, 0x66, 0x2d, 0x34, 0x66, 0x62, 0x31, 0x2d, 0x61,
	0x63, 0x66, 0x64, 0x2d, 0x39, 0x31, 0x36, 0x32, 0x61, 0x30, 0x32, 0x62, 0x65, 0x34, 0x32, 0x62,
	0x22, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0xe3, 0x01, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x32, 0x18, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x70, 0x5b, 0x7b, 0x22, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x58, 0x58,
	0x31, 0x32, 0x35, 0x22, 0x2c, 0x20, 0x22, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3a, 0x22, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x7d, 0x2c, 0x20, 0x22, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x22, 0x3a,
	0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x22, 0x2c, 0x22,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x22, 0x7d, 0x7d, 0x5d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20,
	0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x1a, 0xbd, 0x13,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x24, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x66, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x17, 0x7b, 0x22,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x22, 0x7d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x90,
	0x01, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x40, 0x92,
	0x41, 0x3d, 0x32, 0x3b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x28, 0x69,
	0x66, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x29, 0x52,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x98, 0x02, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0xc6, 0x01,
	0x92, 0x41, 0xc2, 0x01, 0x32, 0x20, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x9d, 0x01, 0x7b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a, 0x22, 0x3a, 0x7b,
	0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x7d, 0x2c,
	0x20, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x5d, 0x7d, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0xf6, 0x01, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xbc, 0x01,
	0x92, 0x41, 0xb8, 0x01, 0x32, 0x2c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x4a, 0x87, 0x01, 0x5b, 0x7b, 0x22, 0x73, 0x72, 0x63, 0x22, 0x3a, 0x20, 0x22, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x23, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x30, 0x30, 0x31,
	0x22, 0x2c, 0x20, 0x22, 0x76, 0x61, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x3a, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x7d, 0x2c,
	0x20, 0x7b, 0x22, 0x73, 0x72, 0x63, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x6d, 0x65, 0x23, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x30, 0x30, 0x32, 0x22, 0x2c, 0x20, 0x22, 0x76,
	0x61, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x6f, 0x6f, 0x22, 0x7d, 0x5d, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xbc, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x32, 0x1b, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4a, 0x07, 0x22, 0x58, 0x58, 0x31, 0x32, 0x35, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x3a,
	0x32, 0x29, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x4a, 0x0d, 0x22, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x3a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0xc5, 0x01, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01,
	0x32, 0x7c, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09,
	0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a,
	0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd9, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc2, 0x01, 0x92, 0x41, 0xbe, 0x01, 0x32,
	0x7d, 0x41, 0x20, 0x64, 0x6f, 0x74, 0x2d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x0b,
	0x22, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x70, 0x22, 0x8a, 0x01, 0x2f, 0x5e, 0x28,
	0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f,
	0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x2e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f,
	0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x1a, 0xf0, 0x06, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0xa6, 0x02,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01,
	0x32, 0x4f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4a, 0x6a, 0x7b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x2a, 0x22, 0x3a, 0x7b, 0x22, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x20,
	0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x7d, 0x7d, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x3b, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x5b, 0x22, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x5d, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x88, 0x02, 0x0a,
	0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x2b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x16, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x3a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x52, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6d, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x4a, 0x10, 0x22, 0x61, 0x63,
	0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x22, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x1a, 0x92, 0x41, 0x17,
	0x0a, 0x15, 0x32, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x82, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x29, 0x92, 0x41,
	0x26, 0x0a, 0x24, 0x32, 0x22, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x54, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x32, 0x92,
	0x41, 0x2f, 0x0a, 0x2d, 0x32, 0x2b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x2e, 0x22, 0xcb, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x54, 0x0a, 0x0c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x7f, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x32, 0x13, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe8, 0x01, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x23, 0x92, 0x41, 0x20, 0x0a,
	0x1e, 0x32, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x16, 0x50,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x1a, 0x46, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a,
	0x32, 0x18, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xb9, 0x06, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xa6, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x3a, 0x23, 0x92, 0x41, 0x20, 0x0a, 0x1e, 0x32, 0x1c, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x22, 0x9b, 0x04, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0x70, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x21,
	0x92, 0x41, 0x1e, 0x0a, 0x1c, 0x32, 0x1a, 0x41, 0x64, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x51,
	0x0a, 0x12, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x3a, 0x18, 0x92, 0x41, 0x15, 0x0a, 0x13, 0x32, 0x11, 0x41, 0x75, 0x64, 0x69, 0x74, 0x20,
	0x6c, 0x6f, 0x67, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x1b, 0x92, 0x41,
	0x18, 0x0a, 0x16, 0x32, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73,
	0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x32, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x3a, 0x1a, 0x92, 0x41, 0x17, 0x0a, 0x15, 0x32, 0x13, 0x47, 0x65, 0x74, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x15,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0x32, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0x32, 0x16, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x0d, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x81, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4b, 0x69, 0x6e, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x56, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0xc9, 0x04, 0x0a, 0x08, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x52, 0x61, 0x77, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x7f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32,
	0x2b, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x6f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x57, 0x92, 0x41, 0x54, 0x32, 0x52, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x05, 0x1a, 0xe9, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a,
	0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x77, 0x92, 0x41, 0x74, 0x32, 0x72, 0x46, 0x6f, 0x72, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x2c,
	0x20, 0x64, 0x69, 0x73, 0x6b, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x69, 0x74, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x49, 0x44, 0x20,
	0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x3c, 0x6b, 0x69, 0x6e, 0x64, 0x3e, 0x2e,
	0x3c, 0x6e, 0x61, 0x6d, 0x65, 0x3e, 0x2e, 0x3c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3e,
	0x2f, 0x3c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x3e, 0x2e, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x52, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x1a, 0x6e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0x32, 0x1a, 0x41, 0x64, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x73, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a, 0x32,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x69, 0x64, 0x73,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x0a, 0x18, 0x32, 0x16, 0x47, 0x65, 0x74, 0x20, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x28, 0x73, 0x29, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x28, 0x73, 0x29, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x1c, 0x92, 0x41, 0x19,
	0x0a, 0x17, 0x32, 0x15, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x77, 0x0a, 0x1a, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x31, 0xaa, 0x02, 0x16, 0x43, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_response_v1_response_proto_rawDescOnce sync.Once
	file_cerbos_response_v1_response_proto_rawDescData = file_cerbos_response_v1_response_proto_rawDesc
)

func file_cerbos_response_v1_response_proto_rawDescGZIP() []byte {
	file_cerbos_response_v1_response_proto_rawDescOnce.Do(func() {
		file_cerbos_response_v1_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_response_v1_response_proto_rawDescData)
	})
	return file_cerbos_response_v1_response_proto_rawDescData
}

var file_cerbos_response_v1_response_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cerbos_response_v1_response_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_cerbos_response_v1_response_proto_goTypes = []any{
	(InspectPoliciesResponse_DerivedRole_Kind)(0),    // 0: cerbos.response.v1.InspectPoliciesResponse.DerivedRole.Kind
	(InspectPoliciesResponse_Variable_Kind)(0),       // 1: cerbos.response.v1.InspectPoliciesResponse.Variable.Kind
	(*PlanResourcesResponse)(nil),                    // 2: cerbos.response.v1.PlanResourcesResponse
	(*CheckResourceSetResponse)(nil),                 // 3: cerbos.response.v1.CheckResourceSetResponse
	(*CheckResourceBatchResponse)(nil),               // 4: cerbos.response.v1.CheckResourceBatchResponse
	(*CheckResourcesResponse)(nil),                   // 5: cerbos.response.v1.CheckResourcesResponse
	(*PlaygroundFailure)(nil),                        // 6: cerbos.response.v1.PlaygroundFailure
	(*PlaygroundValidateResponse)(nil),               // 7: cerbos.response.v1.PlaygroundValidateResponse
	(*PlaygroundTestResponse)(nil),                   // 8: cerbos.response.v1.PlaygroundTestResponse
	(*PlaygroundEvaluateResponse)(nil),               // 9: cerbos.response.v1.PlaygroundEvaluateResponse
	(*PlaygroundProxyResponse)(nil),                  // 10: cerbos.response.v1.PlaygroundProxyResponse
	(*AddOrUpdatePolicyResponse)(nil),                // 11: cerbos.response.v1.AddOrUpdatePolicyResponse
	(*ListAuditLogEntriesResponse)(nil),              // 12: cerbos.response.v1.ListAuditLogEntriesResponse
	(*ServerInfoResponse)(nil),                       // 13: cerbos.response.v1.ServerInfoResponse
	(*ListPoliciesResponse)(nil),                     // 14: cerbos.response.v1.ListPoliciesResponse
	(*GetPolicyResponse)(nil),                        // 15: cerbos.response.v1.GetPolicyResponse
	(*DisablePolicyResponse)(nil),                    // 16: cerbos.response.v1.DisablePolicyResponse
	(*EnablePolicyResponse)(nil),                     // 17: cerbos.response.v1.EnablePolicyResponse
	(*InspectPoliciesResponse)(nil),                  // 18: cerbos.response.v1.InspectPoliciesResponse
	(*AddOrUpdateSchemaResponse)(nil),                // 19: cerbos.response.v1.AddOrUpdateSchemaResponse
	(*ListSchemasResponse)(nil),                      // 20: cerbos.response.v1.ListSchemasResponse
	(*GetSchemaResponse)(nil),                        // 21: cerbos.response.v1.GetSchemaResponse
	(*DeleteSchemaResponse)(nil),                     // 22: cerbos.response.v1.DeleteSchemaResponse
	(*ReloadStoreResponse)(nil),                      // 23: cerbos.response.v1.ReloadStoreResponse
	(*PlanResourcesResponse_Meta)(nil),               // 24: cerbos.response.v1.PlanResourcesResponse.Meta
	(*CheckResourceSetResponse_ActionEffectMap)(nil), // 25: cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap
	(*CheckResourceSetResponse_Meta)(nil),            // 26: cerbos.response.v1.CheckResourceSetResponse.Meta
	nil,                                              // 27: cerbos.response.v1.CheckResourceSetResponse.ResourceInstancesEntry
	nil,                                              // 28: cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.ActionsEntry
	(*CheckResourceSetResponse_Meta_EffectMeta)(nil), // 29: cerbos.response.v1.CheckResourceSetResponse.Meta.EffectMeta
	(*CheckResourceSetResponse_Meta_ActionMeta)(nil), // 30: cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta
	nil, // 31: cerbos.response.v1.CheckResourceSetResponse.Meta.ResourceInstancesEntry
	nil, // 32: cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.ActionsEntry
	(*CheckResourceBatchResponse_ActionEffectMap)(nil), // 33: cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap
	nil, // 34: cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.ActionsEntry
	(*CheckResourcesResponse_ResultEntry)(nil),          // 35: cerbos.response.v1.CheckResourcesResponse.ResultEntry
	(*CheckResourcesResponse_ResultEntry_Resource)(nil), // 36: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource
	(*CheckResourcesResponse_ResultEntry_Meta)(nil),     // 37: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta
	nil, // 38: cerbos.response.v1.CheckResourcesResponse.ResultEntry.ActionsEntry
	(*CheckResourcesResponse_ResultEntry_Meta_EffectMeta)(nil), // 39: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.EffectMeta
	nil,                                    // 40: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.ActionsEntry
	(*PlaygroundFailure_ErrorDetails)(nil), // 41: cerbos.response.v1.PlaygroundFailure.ErrorDetails
	(*PlaygroundFailure_Error)(nil),        // 42: cerbos.response.v1.PlaygroundFailure.Error
	(*PlaygroundTestResponse_TestResults)(nil),        // 43: cerbos.response.v1.PlaygroundTestResponse.TestResults
	(*PlaygroundEvaluateResponse_EvalResult)(nil),     // 44: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult
	(*PlaygroundEvaluateResponse_EvalResultList)(nil), // 45: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList
	(*InspectPoliciesResponse_DerivedRole)(nil),       // 46: cerbos.response.v1.InspectPoliciesResponse.DerivedRole
	(*InspectPoliciesResponse_Variable)(nil),          // 47: cerbos.response.v1.InspectPoliciesResponse.Variable
	(*InspectPoliciesResponse_Result)(nil),            // 48: cerbos.response.v1.InspectPoliciesResponse.Result
	nil,                                               // 49: cerbos.response.v1.InspectPoliciesResponse.ResultsEntry
	(*v1.PlanResourcesFilter)(nil),                    // 50: cerbos.engine.v1.PlanResourcesFilter
	(*v11.ValidationError)(nil),                       // 51: cerbos.schema.v1.ValidationError
	(*emptypb.Empty)(nil),                             // 52: google.protobuf.Empty
	(*v12.AccessLogEntry)(nil),                        // 53: cerbos.audit.v1.AccessLogEntry
	(*v12.DecisionLogEntry)(nil),                      // 54: cerbos.audit.v1.DecisionLogEntry
	(*v13.Policy)(nil),                                // 55: cerbos.policy.v1.Policy
	(*v11.Schema)(nil),                                // 56: cerbos.schema.v1.Schema
	(v14.Effect)(0),                                   // 57: cerbos.effect.v1.Effect
	(*v1.OutputEntry)(nil),                            // 58: cerbos.engine.v1.OutputEntry
	(*v13.TestResults)(nil),                           // 59: cerbos.policy.v1.TestResults
}
var file_cerbos_response_v1_response_proto_depIdxs = []int32{
	50, // 0: cerbos.response.v1.PlanResourcesResponse.filter:type_name -> cerbos.engine.v1.PlanResourcesFilter
	24, // 1: cerbos.response.v1.PlanResourcesResponse.meta:type_name -> cerbos.response.v1.PlanResourcesResponse.Meta
	51, // 2: cerbos.response.v1.PlanResourcesResponse.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	27, // 3: cerbos.response.v1.CheckResourceSetResponse.resource_instances:type_name -> cerbos.response.v1.CheckResourceSetResponse.ResourceInstancesEntry
	26, // 4: cerbos.response.v1.CheckResourceSetResponse.meta:type_name -> cerbos.response.v1.CheckResourceSetResponse.Meta
	33, // 5: cerbos.response.v1.CheckResourceBatchResponse.results:type_name -> cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap
	35, // 6: cerbos.response.v1.CheckResourcesResponse.results:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry
	42, // 7: cerbos.response.v1.PlaygroundFailure.errors:type_name -> cerbos.response.v1.PlaygroundFailure.Error
	6,  // 8: cerbos.response.v1.PlaygroundValidateResponse.failure:type_name -> cerbos.response.v1.PlaygroundFailure
	52, // 9: cerbos.response.v1.PlaygroundValidateResponse.success:type_name -> google.protobuf.Empty
	6,  // 10: cerbos.response.v1.PlaygroundTestResponse.failure:type_name -> cerbos.response.v1.PlaygroundFailure
	43, // 11: cerbos.response.v1.PlaygroundTestResponse.success:type_name -> cerbos.response.v1.PlaygroundTestResponse.TestResults
	6,  // 12: cerbos.response.v1.PlaygroundEvaluateResponse.failure:type_name -> cerbos.response.v1.PlaygroundFailure
	45, // 13: cerbos.response.v1.PlaygroundEvaluateResponse.success:type_name -> cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList
	6,  // 14: cerbos.response.v1.PlaygroundProxyResponse.failure:type_name -> cerbos.response.v1.PlaygroundFailure
	3,  // 15: cerbos.response.v1.PlaygroundProxyResponse.check_resource_set:type_name -> cerbos.response.v1.CheckResourceSetResponse
	4,  // 16: cerbos.response.v1.PlaygroundProxyResponse.check_resource_batch:type_name -> cerbos.response.v1.CheckResourceBatchResponse
	2,  // 17: cerbos.response.v1.PlaygroundProxyResponse.plan_resources:type_name -> cerbos.response.v1.PlanResourcesResponse
	5,  // 18: cerbos.response.v1.PlaygroundProxyResponse.check_resources:type_name -> cerbos.response.v1.CheckResourcesResponse
	52, // 19: cerbos.response.v1.AddOrUpdatePolicyResponse.success:type_name -> google.protobuf.Empty
	53, // 20: cerbos.response.v1.ListAuditLogEntriesResponse.access_log_entry:type_name -> cerbos.audit.v1.AccessLogEntry
	54, // 21: cerbos.response.v1.ListAuditLogEntriesResponse.decision_log_entry:type_name -> cerbos.audit.v1.DecisionLogEntry
	55, // 22: cerbos.response.v1.GetPolicyResponse.policies:type_name -> cerbos.policy.v1.Policy
	49, // 23: cerbos.response.v1.InspectPoliciesResponse.results:type_name -> cerbos.response.v1.InspectPoliciesResponse.ResultsEntry
	56, // 24: cerbos.response.v1.GetSchemaResponse.schemas:type_name -> cerbos.schema.v1.Schema
	28, // 25: cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.actions:type_name -> cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.ActionsEntry
	51, // 26: cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	31, // 27: cerbos.response.v1.CheckResourceSetResponse.Meta.resource_instances:type_name -> cerbos.response.v1.CheckResourceSetResponse.Meta.ResourceInstancesEntry
	25, // 28: cerbos.response.v1.CheckResourceSetResponse.ResourceInstancesEntry.value:type_name -> cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap
	57, // 29: cerbos.response.v1.CheckResourceSetResponse.ActionEffectMap.ActionsEntry.value:type_name -> cerbos.effect.v1.Effect
	32, // 30: cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.actions:type_name -> cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.ActionsEntry
	30, // 31: cerbos.response.v1.CheckResourceSetResponse.Meta.ResourceInstancesEntry.value:type_name -> cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta
	29, // 32: cerbos.response.v1.CheckResourceSetResponse.Meta.ActionMeta.ActionsEntry.value:type_name -> cerbos.response.v1.CheckResourceSetResponse.Meta.EffectMeta
	34, // 33: cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.actions:type_name -> cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.ActionsEntry
	51, // 34: cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	57, // 35: cerbos.response.v1.CheckResourceBatchResponse.ActionEffectMap.ActionsEntry.value:type_name -> cerbos.effect.v1.Effect
	36, // 36: cerbos.response.v1.CheckResourcesResponse.ResultEntry.resource:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry.Resource
	38, // 37: cerbos.response.v1.CheckResourcesResponse.ResultEntry.actions:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry.ActionsEntry
	51, // 38: cerbos.response.v1.CheckResourcesResponse.ResultEntry.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	37, // 39: cerbos.response.v1.CheckResourcesResponse.ResultEntry.meta:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta
	58, // 40: cerbos.response.v1.CheckResourcesResponse.ResultEntry.outputs:type_name -> cerbos.engine.v1.OutputEntry
	40, // 41: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.actions:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.ActionsEntry
	57, // 42: cerbos.response.v1.CheckResourcesResponse.ResultEntry.ActionsEntry.value:type_name -> cerbos.effect.v1.Effect
	39, // 43: cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.ActionsEntry.value:type_name -> cerbos.response.v1.CheckResourcesResponse.ResultEntry.Meta.EffectMeta
	41, // 44: cerbos.response.v1.PlaygroundFailure.Error.details:type_name -> cerbos.response.v1.PlaygroundFailure.ErrorDetails
	59, // 45: cerbos.response.v1.PlaygroundTestResponse.TestResults.results:type_name -> cerbos.policy.v1.TestResults
	57, // 46: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.effect:type_name -> cerbos.effect.v1.Effect
	51, // 47: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	44, // 48: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList.results:type_name -> cerbos.response.v1.PlaygroundEvaluateResponse.EvalResult
	51, // 49: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList.validation_errors:type_name -> cerbos.schema.v1.ValidationError
	58, // 50: cerbos.response.v1.PlaygroundEvaluateResponse.EvalResultList.outputs:type_name -> cerbos.engine.v1.OutputEntry
	0,  // 51: cerbos.response.v1.InspectPoliciesResponse.DerivedRole.kind:type_name -> cerbos.response.v1.InspectPoliciesResponse.DerivedRole.Kind
	1,  // 52: cerbos.response.v1.InspectPoliciesResponse.Variable.kind:type_name -> cerbos.response.v1.InspectPoliciesResponse.Variable.Kind
	47, // 53: cerbos.response.v1.InspectPoliciesResponse.Result.variables:type_name -> cerbos.response.v1.InspectPoliciesResponse.Variable
	46, // 54: cerbos.response.v1.InspectPoliciesResponse.Result.derived_roles:type_name -> cerbos.response.v1.InspectPoliciesResponse.DerivedRole
	48, // 55: cerbos.response.v1.InspectPoliciesResponse.ResultsEntry.value:type_name -> cerbos.response.v1.InspectPoliciesResponse.Result
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_cerbos_response_v1_response_proto_init() }
func file_cerbos_response_v1_response_proto_init() {
	if File_cerbos_response_v1_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_response_v1_response_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PlanResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundEvaluateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AddOrUpdatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListAuditLogEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ServerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DisablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*EnablePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*InspectPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AddOrUpdateSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PlanResourcesResponse_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceSetResponse_ActionEffectMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceSetResponse_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceSetResponse_Meta_EffectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceSetResponse_Meta_ActionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourceBatchResponse_ActionEffectMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourcesResponse_ResultEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourcesResponse_ResultEntry_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourcesResponse_ResultEntry_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResourcesResponse_ResultEntry_Meta_EffectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundFailure_ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundFailure_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundTestResponse_TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundEvaluateResponse_EvalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*PlaygroundEvaluateResponse_EvalResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*InspectPoliciesResponse_DerivedRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*InspectPoliciesResponse_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_response_v1_response_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*InspectPoliciesResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_response_v1_response_proto_msgTypes[5].OneofWrappers = []any{
		(*PlaygroundValidateResponse_Failure)(nil),
		(*PlaygroundValidateResponse_Success)(nil),
	}
	file_cerbos_response_v1_response_proto_msgTypes[6].OneofWrappers = []any{
		(*PlaygroundTestResponse_Failure)(nil),
		(*PlaygroundTestResponse_Success)(nil),
	}
	file_cerbos_response_v1_response_proto_msgTypes[7].OneofWrappers = []any{
		(*PlaygroundEvaluateResponse_Failure)(nil),
		(*PlaygroundEvaluateResponse_Success)(nil),
	}
	file_cerbos_response_v1_response_proto_msgTypes[8].OneofWrappers = []any{
		(*PlaygroundProxyResponse_Failure)(nil),
		(*PlaygroundProxyResponse_CheckResourceSet)(nil),
		(*PlaygroundProxyResponse_CheckResourceBatch)(nil),
		(*PlaygroundProxyResponse_PlanResources)(nil),
		(*PlaygroundProxyResponse_CheckResources)(nil),
	}
	file_cerbos_response_v1_response_proto_msgTypes[10].OneofWrappers = []any{
		(*ListAuditLogEntriesResponse_AccessLogEntry)(nil),
		(*ListAuditLogEntriesResponse_DecisionLogEntry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_response_v1_response_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_response_v1_response_proto_goTypes,
		DependencyIndexes: file_cerbos_response_v1_response_proto_depIdxs,
		EnumInfos:         file_cerbos_response_v1_response_proto_enumTypes,
		MessageInfos:      file_cerbos_response_v1_response_proto_msgTypes,
	}.Build()
	File_cerbos_response_v1_response_proto = out.File
	file_cerbos_response_v1_response_proto_rawDesc = nil
	file_cerbos_response_v1_response_proto_goTypes = nil
	file_cerbos_response_v1_response_proto_depIdxs = nil
}
