// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/response/v1/response.proto

package responsev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	effectv1 "github.com/cerbos/cerbos/api/genpb/cerbos/effect/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = effectv1.Effect(0)
)

// Validate checks the field values on PlanResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesResponseMultiError, or nil if none found.
func (m *PlanResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for Action

	// no validation rules for ResourceKind

	// no validation rules for PolicyVersion

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesResponseValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesResponseValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesResponseValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlanResourcesResponseMultiError(errors)
	}

	return nil
}

// PlanResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by PlanResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesResponseMultiError) AllErrors() []error { return m }

// PlanResourcesResponseValidationError is the validation error returned by
// PlanResourcesResponse.Validate if the designated constraints aren't met.
type PlanResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesResponseValidationError) ErrorName() string {
	return "PlanResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesResponseValidationError{}

// Validate checks the field values on CheckResourceSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourceSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourceSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResourceSetResponseMultiError, or nil if none found.
func (m *CheckResourceSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	{
		sorted_keys := make([]string, len(m.GetResourceInstances()))
		i := 0
		for key := range m.GetResourceInstances() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResourceInstances()[key]
			_ = val

			// no validation rules for ResourceInstances[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckResourceSetResponseValidationError{
							field:  fmt.Sprintf("ResourceInstances[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckResourceSetResponseValidationError{
							field:  fmt.Sprintf("ResourceInstances[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckResourceSetResponseValidationError{
						field:  fmt.Sprintf("ResourceInstances[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckResourceSetResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckResourceSetResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourceSetResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckResourceSetResponseMultiError(errors)
	}

	return nil
}

// CheckResourceSetResponseMultiError is an error wrapping multiple validation
// errors returned by CheckResourceSetResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceSetResponseMultiError) AllErrors() []error { return m }

// CheckResourceSetResponseValidationError is the validation error returned by
// CheckResourceSetResponse.Validate if the designated constraints aren't met.
type CheckResourceSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceSetResponseValidationError) ErrorName() string {
	return "CheckResourceSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceSetResponseValidationError{}

// Validate checks the field values on CheckResourceBatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourceBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourceBatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResourceBatchResponseMultiError, or nil if none found.
func (m *CheckResourceBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResourceBatchResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResourceBatchResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceBatchResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResourceBatchResponseMultiError(errors)
	}

	return nil
}

// CheckResourceBatchResponseMultiError is an error wrapping multiple
// validation errors returned by CheckResourceBatchResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckResourceBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceBatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceBatchResponseMultiError) AllErrors() []error { return m }

// CheckResourceBatchResponseValidationError is the validation error returned
// by CheckResourceBatchResponse.Validate if the designated constraints aren't met.
type CheckResourceBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponseValidationError) ErrorName() string {
	return "CheckResourceBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponseValidationError{}

// Validate checks the field values on CheckResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResourcesResponseMultiError, or nil if none found.
func (m *CheckResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResourcesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResourcesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourcesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResourcesResponseMultiError(errors)
	}

	return nil
}

// CheckResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by CheckResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcesResponseMultiError) AllErrors() []error { return m }

// CheckResourcesResponseValidationError is the validation error returned by
// CheckResourcesResponse.Validate if the designated constraints aren't met.
type CheckResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcesResponseValidationError) ErrorName() string {
	return "CheckResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcesResponseValidationError{}

// Validate checks the field values on PlaygroundFailure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundFailureMultiError, or nil if none found.
func (m *PlaygroundFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundFailureValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundFailureValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundFailureValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundFailureMultiError(errors)
	}

	return nil
}

// PlaygroundFailureMultiError is an error wrapping multiple validation errors
// returned by PlaygroundFailure.ValidateAll() if the designated constraints
// aren't met.
type PlaygroundFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundFailureMultiError) AllErrors() []error { return m }

// PlaygroundFailureValidationError is the validation error returned by
// PlaygroundFailure.Validate if the designated constraints aren't met.
type PlaygroundFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundFailureValidationError) ErrorName() string {
	return "PlaygroundFailureValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundFailureValidationError{}

// Validate checks the field values on PlaygroundValidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundValidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundValidateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundValidateResponseMultiError, or nil if none found.
func (m *PlaygroundValidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundValidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaygroundId

	switch m.Outcome.(type) {

	case *PlaygroundValidateResponse_Failure:

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundValidateResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundValidateResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundValidateResponseValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundValidateResponse_Success:

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundValidateResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundValidateResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundValidateResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundValidateResponseMultiError(errors)
	}

	return nil
}

// PlaygroundValidateResponseMultiError is an error wrapping multiple
// validation errors returned by PlaygroundValidateResponse.ValidateAll() if
// the designated constraints aren't met.
type PlaygroundValidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundValidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundValidateResponseMultiError) AllErrors() []error { return m }

// PlaygroundValidateResponseValidationError is the validation error returned
// by PlaygroundValidateResponse.Validate if the designated constraints aren't met.
type PlaygroundValidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundValidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundValidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundValidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundValidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundValidateResponseValidationError) ErrorName() string {
	return "PlaygroundValidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundValidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundValidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundValidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundValidateResponseValidationError{}

// Validate checks the field values on PlaygroundTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundTestResponseMultiError, or nil if none found.
func (m *PlaygroundTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaygroundId

	switch m.Outcome.(type) {

	case *PlaygroundTestResponse_Failure:

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundTestResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundTestResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundTestResponseValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundTestResponse_Success:

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundTestResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundTestResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundTestResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundTestResponseMultiError(errors)
	}

	return nil
}

// PlaygroundTestResponseMultiError is an error wrapping multiple validation
// errors returned by PlaygroundTestResponse.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundTestResponseMultiError) AllErrors() []error { return m }

// PlaygroundTestResponseValidationError is the validation error returned by
// PlaygroundTestResponse.Validate if the designated constraints aren't met.
type PlaygroundTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundTestResponseValidationError) ErrorName() string {
	return "PlaygroundTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundTestResponseValidationError{}

// Validate checks the field values on PlaygroundEvaluateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundEvaluateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundEvaluateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundEvaluateResponseMultiError, or nil if none found.
func (m *PlaygroundEvaluateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundEvaluateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaygroundId

	switch m.Outcome.(type) {

	case *PlaygroundEvaluateResponse_Failure:

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundEvaluateResponseValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundEvaluateResponse_Success:

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundEvaluateResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundEvaluateResponseMultiError(errors)
	}

	return nil
}

// PlaygroundEvaluateResponseMultiError is an error wrapping multiple
// validation errors returned by PlaygroundEvaluateResponse.ValidateAll() if
// the designated constraints aren't met.
type PlaygroundEvaluateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundEvaluateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundEvaluateResponseMultiError) AllErrors() []error { return m }

// PlaygroundEvaluateResponseValidationError is the validation error returned
// by PlaygroundEvaluateResponse.Validate if the designated constraints aren't met.
type PlaygroundEvaluateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundEvaluateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundEvaluateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundEvaluateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundEvaluateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundEvaluateResponseValidationError) ErrorName() string {
	return "PlaygroundEvaluateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundEvaluateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundEvaluateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundEvaluateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundEvaluateResponseValidationError{}

// Validate checks the field values on PlaygroundProxyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundProxyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundProxyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundProxyResponseMultiError, or nil if none found.
func (m *PlaygroundProxyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundProxyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaygroundId

	switch m.Outcome.(type) {

	case *PlaygroundProxyResponse_Failure:

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundProxyResponseValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundProxyResponse_CheckResourceSet:

		if all {
			switch v := interface{}(m.GetCheckResourceSet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResourceSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResourceSet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckResourceSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundProxyResponseValidationError{
					field:  "CheckResourceSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundProxyResponse_CheckResourceBatch:

		if all {
			switch v := interface{}(m.GetCheckResourceBatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResourceBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResourceBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckResourceBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundProxyResponseValidationError{
					field:  "CheckResourceBatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundProxyResponse_PlanResources:

		if all {
			switch v := interface{}(m.GetPlanResources()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "PlanResources",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "PlanResources",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlanResources()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundProxyResponseValidationError{
					field:  "PlanResources",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlaygroundProxyResponse_CheckResources:

		if all {
			switch v := interface{}(m.GetCheckResources()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResources",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundProxyResponseValidationError{
						field:  "CheckResources",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckResources()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundProxyResponseValidationError{
					field:  "CheckResources",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundProxyResponseMultiError(errors)
	}

	return nil
}

// PlaygroundProxyResponseMultiError is an error wrapping multiple validation
// errors returned by PlaygroundProxyResponse.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundProxyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundProxyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundProxyResponseMultiError) AllErrors() []error { return m }

// PlaygroundProxyResponseValidationError is the validation error returned by
// PlaygroundProxyResponse.Validate if the designated constraints aren't met.
type PlaygroundProxyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundProxyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundProxyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundProxyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundProxyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundProxyResponseValidationError) ErrorName() string {
	return "PlaygroundProxyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundProxyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundProxyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundProxyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundProxyResponseValidationError{}

// Validate checks the field values on AddOrUpdatePolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdatePolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdatePolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdatePolicyResponseMultiError, or nil if none found.
func (m *AddOrUpdatePolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdatePolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrUpdatePolicyResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrUpdatePolicyResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrUpdatePolicyResponseValidationError{
				field:  "Success",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddOrUpdatePolicyResponseMultiError(errors)
	}

	return nil
}

// AddOrUpdatePolicyResponseMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdatePolicyResponse.ValidateAll() if the
// designated constraints aren't met.
type AddOrUpdatePolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdatePolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdatePolicyResponseMultiError) AllErrors() []error { return m }

// AddOrUpdatePolicyResponseValidationError is the validation error returned by
// AddOrUpdatePolicyResponse.Validate if the designated constraints aren't met.
type AddOrUpdatePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdatePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdatePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdatePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdatePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdatePolicyResponseValidationError) ErrorName() string {
	return "AddOrUpdatePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdatePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdatePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdatePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdatePolicyResponseValidationError{}

// Validate checks the field values on ListAuditLogEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogEntriesResponseMultiError, or nil if none found.
func (m *ListAuditLogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Entry.(type) {

	case *ListAuditLogEntriesResponse_AccessLogEntry:

		if all {
			switch v := interface{}(m.GetAccessLogEntry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogEntriesResponseValidationError{
						field:  "AccessLogEntry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogEntriesResponseValidationError{
						field:  "AccessLogEntry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccessLogEntry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogEntriesResponseValidationError{
					field:  "AccessLogEntry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListAuditLogEntriesResponse_DecisionLogEntry:

		if all {
			switch v := interface{}(m.GetDecisionLogEntry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogEntriesResponseValidationError{
						field:  "DecisionLogEntry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogEntriesResponseValidationError{
						field:  "DecisionLogEntry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecisionLogEntry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogEntriesResponseValidationError{
					field:  "DecisionLogEntry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuditLogEntriesResponseMultiError(errors)
	}

	return nil
}

// ListAuditLogEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAuditLogEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAuditLogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogEntriesResponseMultiError) AllErrors() []error { return m }

// ListAuditLogEntriesResponseValidationError is the validation error returned
// by ListAuditLogEntriesResponse.Validate if the designated constraints
// aren't met.
type ListAuditLogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogEntriesResponseValidationError) ErrorName() string {
	return "ListAuditLogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogEntriesResponseValidationError{}

// Validate checks the field values on ServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerInfoResponseMultiError, or nil if none found.
func (m *ServerInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Commit

	// no validation rules for BuildDate

	if len(errors) > 0 {
		return ServerInfoResponseMultiError(errors)
	}

	return nil
}

// ServerInfoResponseMultiError is an error wrapping multiple validation errors
// returned by ServerInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type ServerInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerInfoResponseMultiError) AllErrors() []error { return m }

// ServerInfoResponseValidationError is the validation error returned by
// ServerInfoResponse.Validate if the designated constraints aren't met.
type ServerInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerInfoResponseValidationError) ErrorName() string {
	return "ServerInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerInfoResponseValidationError{}

// Validate checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPoliciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPoliciesResponseMultiError, or nil if none found.
func (m *ListPoliciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPoliciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPoliciesResponseMultiError(errors)
	}

	return nil
}

// ListPoliciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPoliciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPoliciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPoliciesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPoliciesResponseMultiError) AllErrors() []error { return m }

// ListPoliciesResponseValidationError is the validation error returned by
// ListPoliciesResponse.Validate if the designated constraints aren't met.
type ListPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPoliciesResponseValidationError) ErrorName() string {
	return "ListPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPoliciesResponseValidationError{}

// Validate checks the field values on GetPolicyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPolicyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPolicyResponseMultiError, or nil if none found.
func (m *GetPolicyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPolicyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPolicyResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPolicyResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPolicyResponseMultiError(errors)
	}

	return nil
}

// GetPolicyResponseMultiError is an error wrapping multiple validation errors
// returned by GetPolicyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPolicyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPolicyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPolicyResponseMultiError) AllErrors() []error { return m }

// GetPolicyResponseValidationError is the validation error returned by
// GetPolicyResponse.Validate if the designated constraints aren't met.
type GetPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPolicyResponseValidationError) ErrorName() string {
	return "GetPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPolicyResponseValidationError{}

// Validate checks the field values on AddOrUpdateSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrUpdateSchemaResponseMultiError, or nil if none found.
func (m *AddOrUpdateSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrUpdateSchemaResponseMultiError(errors)
	}

	return nil
}

// AddOrUpdateSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by AddOrUpdateSchemaResponse.ValidateAll() if the
// designated constraints aren't met.
type AddOrUpdateSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateSchemaResponseMultiError) AllErrors() []error { return m }

// AddOrUpdateSchemaResponseValidationError is the validation error returned by
// AddOrUpdateSchemaResponse.Validate if the designated constraints aren't met.
type AddOrUpdateSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateSchemaResponseValidationError) ErrorName() string {
	return "AddOrUpdateSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateSchemaResponseValidationError{}

// Validate checks the field values on ListSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchemasResponseMultiError, or nil if none found.
func (m *ListSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSchemasResponseMultiError(errors)
	}

	return nil
}

// ListSchemasResponseMultiError is an error wrapping multiple validation
// errors returned by ListSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchemasResponseMultiError) AllErrors() []error { return m }

// ListSchemasResponseValidationError is the validation error returned by
// ListSchemasResponse.Validate if the designated constraints aren't met.
type ListSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchemasResponseValidationError) ErrorName() string {
	return "ListSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchemasResponseValidationError{}

// Validate checks the field values on GetSchemaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchemaResponseMultiError, or nil if none found.
func (m *GetSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSchemaResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSchemaResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSchemaResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSchemaResponseMultiError(errors)
	}

	return nil
}

// GetSchemaResponseMultiError is an error wrapping multiple validation errors
// returned by GetSchemaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchemaResponseMultiError) AllErrors() []error { return m }

// GetSchemaResponseValidationError is the validation error returned by
// GetSchemaResponse.Validate if the designated constraints aren't met.
type GetSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemaResponseValidationError) ErrorName() string {
	return "GetSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemaResponseValidationError{}

// Validate checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSchemaResponseMultiError, or nil if none found.
func (m *DeleteSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSchemaResponseMultiError(errors)
	}

	return nil
}

// DeleteSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSchemaResponseMultiError) AllErrors() []error { return m }

// DeleteSchemaResponseValidationError is the validation error returned by
// DeleteSchemaResponse.Validate if the designated constraints aren't met.
type DeleteSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSchemaResponseValidationError) ErrorName() string {
	return "DeleteSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSchemaResponseValidationError{}

// Validate checks the field values on ReloadStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReloadStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReloadStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReloadStoreResponseMultiError, or nil if none found.
func (m *ReloadStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReloadStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReloadStoreResponseMultiError(errors)
	}

	return nil
}

// ReloadStoreResponseMultiError is an error wrapping multiple validation
// errors returned by ReloadStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type ReloadStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReloadStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReloadStoreResponseMultiError) AllErrors() []error { return m }

// ReloadStoreResponseValidationError is the validation error returned by
// ReloadStoreResponse.Validate if the designated constraints aren't met.
type ReloadStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReloadStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReloadStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReloadStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReloadStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReloadStoreResponseValidationError) ErrorName() string {
	return "ReloadStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReloadStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReloadStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReloadStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReloadStoreResponseValidationError{}

// Validate checks the field values on PlanResourcesResponse_Expression with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PlanResourcesResponse_Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesResponse_Expression with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PlanResourcesResponse_ExpressionMultiError, or nil if none found.
func (m *PlanResourcesResponse_Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesResponse_Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetOperands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesResponse_ExpressionValidationError{
						field:  fmt.Sprintf("Operands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesResponse_ExpressionValidationError{
						field:  fmt.Sprintf("Operands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesResponse_ExpressionValidationError{
					field:  fmt.Sprintf("Operands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlanResourcesResponse_ExpressionMultiError(errors)
	}

	return nil
}

// PlanResourcesResponse_ExpressionMultiError is an error wrapping multiple
// validation errors returned by
// PlanResourcesResponse_Expression.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesResponse_ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesResponse_ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesResponse_ExpressionMultiError) AllErrors() []error { return m }

// PlanResourcesResponse_ExpressionValidationError is the validation error
// returned by PlanResourcesResponse_Expression.Validate if the designated
// constraints aren't met.
type PlanResourcesResponse_ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesResponse_ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesResponse_ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesResponse_ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesResponse_ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesResponse_ExpressionValidationError) ErrorName() string {
	return "PlanResourcesResponse_ExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesResponse_ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesResponse_Expression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesResponse_ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesResponse_ExpressionValidationError{}

// Validate checks the field values on PlanResourcesResponse_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesResponse_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesResponse_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesResponse_FilterMultiError, or nil if none found.
func (m *PlanResourcesResponse_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesResponse_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanResourcesResponse_FilterValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanResourcesResponse_FilterValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanResourcesResponse_FilterValidationError{
				field:  "Condition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlanResourcesResponse_FilterMultiError(errors)
	}

	return nil
}

// PlanResourcesResponse_FilterMultiError is an error wrapping multiple
// validation errors returned by PlanResourcesResponse_Filter.ValidateAll() if
// the designated constraints aren't met.
type PlanResourcesResponse_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesResponse_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesResponse_FilterMultiError) AllErrors() []error { return m }

// PlanResourcesResponse_FilterValidationError is the validation error returned
// by PlanResourcesResponse_Filter.Validate if the designated constraints
// aren't met.
type PlanResourcesResponse_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesResponse_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesResponse_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesResponse_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesResponse_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesResponse_FilterValidationError) ErrorName() string {
	return "PlanResourcesResponse_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesResponse_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesResponse_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesResponse_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesResponse_FilterValidationError{}

// Validate checks the field values on PlanResourcesResponse_Meta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlanResourcesResponse_Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanResourcesResponse_Meta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanResourcesResponse_MetaMultiError, or nil if none found.
func (m *PlanResourcesResponse_Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesResponse_Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilterDebug

	// no validation rules for MatchedScope

	if len(errors) > 0 {
		return PlanResourcesResponse_MetaMultiError(errors)
	}

	return nil
}

// PlanResourcesResponse_MetaMultiError is an error wrapping multiple
// validation errors returned by PlanResourcesResponse_Meta.ValidateAll() if
// the designated constraints aren't met.
type PlanResourcesResponse_MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesResponse_MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesResponse_MetaMultiError) AllErrors() []error { return m }

// PlanResourcesResponse_MetaValidationError is the validation error returned
// by PlanResourcesResponse_Meta.Validate if the designated constraints aren't met.
type PlanResourcesResponse_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesResponse_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesResponse_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesResponse_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesResponse_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesResponse_MetaValidationError) ErrorName() string {
	return "PlanResourcesResponse_MetaValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesResponse_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesResponse_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesResponse_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesResponse_MetaValidationError{}

// Validate checks the field values on PlanResourcesResponse_Expression_Operand
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PlanResourcesResponse_Expression_Operand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PlanResourcesResponse_Expression_Operand with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PlanResourcesResponse_Expression_OperandMultiError, or nil if none found.
func (m *PlanResourcesResponse_Expression_Operand) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanResourcesResponse_Expression_Operand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Node.(type) {

	case *PlanResourcesResponse_Expression_Operand_Value:

		if all {
			switch v := interface{}(m.GetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesResponse_Expression_OperandValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesResponse_Expression_OperandValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesResponse_Expression_OperandValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlanResourcesResponse_Expression_Operand_Expression:

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanResourcesResponse_Expression_OperandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanResourcesResponse_Expression_OperandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanResourcesResponse_Expression_OperandValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PlanResourcesResponse_Expression_Operand_Variable:
		// no validation rules for Variable

	}

	if len(errors) > 0 {
		return PlanResourcesResponse_Expression_OperandMultiError(errors)
	}

	return nil
}

// PlanResourcesResponse_Expression_OperandMultiError is an error wrapping
// multiple validation errors returned by
// PlanResourcesResponse_Expression_Operand.ValidateAll() if the designated
// constraints aren't met.
type PlanResourcesResponse_Expression_OperandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanResourcesResponse_Expression_OperandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanResourcesResponse_Expression_OperandMultiError) AllErrors() []error { return m }

// PlanResourcesResponse_Expression_OperandValidationError is the validation
// error returned by PlanResourcesResponse_Expression_Operand.Validate if the
// designated constraints aren't met.
type PlanResourcesResponse_Expression_OperandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanResourcesResponse_Expression_OperandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanResourcesResponse_Expression_OperandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanResourcesResponse_Expression_OperandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanResourcesResponse_Expression_OperandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanResourcesResponse_Expression_OperandValidationError) ErrorName() string {
	return "PlanResourcesResponse_Expression_OperandValidationError"
}

// Error satisfies the builtin error interface
func (e PlanResourcesResponse_Expression_OperandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanResourcesResponse_Expression_Operand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanResourcesResponse_Expression_OperandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanResourcesResponse_Expression_OperandValidationError{}

// Validate checks the field values on CheckResourceSetResponse_ActionEffectMap
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckResourceSetResponse_ActionEffectMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourceSetResponse_ActionEffectMap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckResourceSetResponse_ActionEffectMapMultiError, or nil if none found.
func (m *CheckResourceSetResponse_ActionEffectMap) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceSetResponse_ActionEffectMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Actions

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResourceSetResponse_ActionEffectMapValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResourceSetResponse_ActionEffectMapValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceSetResponse_ActionEffectMapValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResourceSetResponse_ActionEffectMapMultiError(errors)
	}

	return nil
}

// CheckResourceSetResponse_ActionEffectMapMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourceSetResponse_ActionEffectMap.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceSetResponse_ActionEffectMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceSetResponse_ActionEffectMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceSetResponse_ActionEffectMapMultiError) AllErrors() []error { return m }

// CheckResourceSetResponse_ActionEffectMapValidationError is the validation
// error returned by CheckResourceSetResponse_ActionEffectMap.Validate if the
// designated constraints aren't met.
type CheckResourceSetResponse_ActionEffectMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceSetResponse_ActionEffectMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceSetResponse_ActionEffectMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceSetResponse_ActionEffectMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceSetResponse_ActionEffectMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceSetResponse_ActionEffectMapValidationError) ErrorName() string {
	return "CheckResourceSetResponse_ActionEffectMapValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceSetResponse_ActionEffectMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceSetResponse_ActionEffectMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceSetResponse_ActionEffectMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceSetResponse_ActionEffectMapValidationError{}

// Validate checks the field values on CheckResourceSetResponse_Meta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourceSetResponse_Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourceSetResponse_Meta with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResourceSetResponse_MetaMultiError, or nil if none found.
func (m *CheckResourceSetResponse_Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceSetResponse_Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResourceInstances()))
		i := 0
		for key := range m.GetResourceInstances() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResourceInstances()[key]
			_ = val

			// no validation rules for ResourceInstances[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckResourceSetResponse_MetaValidationError{
							field:  fmt.Sprintf("ResourceInstances[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckResourceSetResponse_MetaValidationError{
							field:  fmt.Sprintf("ResourceInstances[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckResourceSetResponse_MetaValidationError{
						field:  fmt.Sprintf("ResourceInstances[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CheckResourceSetResponse_MetaMultiError(errors)
	}

	return nil
}

// CheckResourceSetResponse_MetaMultiError is an error wrapping multiple
// validation errors returned by CheckResourceSetResponse_Meta.ValidateAll()
// if the designated constraints aren't met.
type CheckResourceSetResponse_MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceSetResponse_MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceSetResponse_MetaMultiError) AllErrors() []error { return m }

// CheckResourceSetResponse_MetaValidationError is the validation error
// returned by CheckResourceSetResponse_Meta.Validate if the designated
// constraints aren't met.
type CheckResourceSetResponse_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceSetResponse_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceSetResponse_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceSetResponse_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceSetResponse_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceSetResponse_MetaValidationError) ErrorName() string {
	return "CheckResourceSetResponse_MetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceSetResponse_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceSetResponse_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceSetResponse_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceSetResponse_MetaValidationError{}

// Validate checks the field values on CheckResourceSetResponse_Meta_EffectMeta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckResourceSetResponse_Meta_EffectMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourceSetResponse_Meta_EffectMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckResourceSetResponse_Meta_EffectMetaMultiError, or nil if none found.
func (m *CheckResourceSetResponse_Meta_EffectMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceSetResponse_Meta_EffectMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchedPolicy

	// no validation rules for MatchedScope

	if len(errors) > 0 {
		return CheckResourceSetResponse_Meta_EffectMetaMultiError(errors)
	}

	return nil
}

// CheckResourceSetResponse_Meta_EffectMetaMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourceSetResponse_Meta_EffectMeta.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceSetResponse_Meta_EffectMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceSetResponse_Meta_EffectMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceSetResponse_Meta_EffectMetaMultiError) AllErrors() []error { return m }

// CheckResourceSetResponse_Meta_EffectMetaValidationError is the validation
// error returned by CheckResourceSetResponse_Meta_EffectMeta.Validate if the
// designated constraints aren't met.
type CheckResourceSetResponse_Meta_EffectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) ErrorName() string {
	return "CheckResourceSetResponse_Meta_EffectMetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceSetResponse_Meta_EffectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceSetResponse_Meta_EffectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceSetResponse_Meta_EffectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceSetResponse_Meta_EffectMetaValidationError{}

// Validate checks the field values on CheckResourceSetResponse_Meta_ActionMeta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckResourceSetResponse_Meta_ActionMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourceSetResponse_Meta_ActionMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckResourceSetResponse_Meta_ActionMetaMultiError, or nil if none found.
func (m *CheckResourceSetResponse_Meta_ActionMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceSetResponse_Meta_ActionMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckResourceSetResponse_Meta_ActionMetaValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckResourceSetResponse_Meta_ActionMetaValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckResourceSetResponse_Meta_ActionMetaValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CheckResourceSetResponse_Meta_ActionMetaMultiError(errors)
	}

	return nil
}

// CheckResourceSetResponse_Meta_ActionMetaMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourceSetResponse_Meta_ActionMeta.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceSetResponse_Meta_ActionMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceSetResponse_Meta_ActionMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceSetResponse_Meta_ActionMetaMultiError) AllErrors() []error { return m }

// CheckResourceSetResponse_Meta_ActionMetaValidationError is the validation
// error returned by CheckResourceSetResponse_Meta_ActionMeta.Validate if the
// designated constraints aren't met.
type CheckResourceSetResponse_Meta_ActionMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) ErrorName() string {
	return "CheckResourceSetResponse_Meta_ActionMetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceSetResponse_Meta_ActionMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceSetResponse_Meta_ActionMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceSetResponse_Meta_ActionMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceSetResponse_Meta_ActionMetaValidationError{}

// Validate checks the field values on
// CheckResourceBatchResponse_ActionEffectMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResourceBatchResponse_ActionEffectMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourceBatchResponse_ActionEffectMap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckResourceBatchResponse_ActionEffectMapMultiError, or nil if none found.
func (m *CheckResourceBatchResponse_ActionEffectMap) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceBatchResponse_ActionEffectMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Actions

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResourceBatchResponse_ActionEffectMapValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResourceBatchResponse_ActionEffectMapValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourceBatchResponse_ActionEffectMapValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResourceBatchResponse_ActionEffectMapMultiError(errors)
	}

	return nil
}

// CheckResourceBatchResponse_ActionEffectMapMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourceBatchResponse_ActionEffectMap.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceBatchResponse_ActionEffectMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceBatchResponse_ActionEffectMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceBatchResponse_ActionEffectMapMultiError) AllErrors() []error { return m }

// CheckResourceBatchResponse_ActionEffectMapValidationError is the validation
// error returned by CheckResourceBatchResponse_ActionEffectMap.Validate if
// the designated constraints aren't met.
type CheckResourceBatchResponse_ActionEffectMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) ErrorName() string {
	return "CheckResourceBatchResponse_ActionEffectMapValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceBatchResponse_ActionEffectMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceBatchResponse_ActionEffectMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceBatchResponse_ActionEffectMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceBatchResponse_ActionEffectMapValidationError{}

// Validate checks the field values on CheckResourcesResponse_ResultEntry with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckResourcesResponse_ResultEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourcesResponse_ResultEntry
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CheckResourcesResponse_ResultEntryMultiError, or nil if none found.
func (m *CheckResourcesResponse_ResultEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcesResponse_ResultEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourcesResponse_ResultEntryValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Actions

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResourcesResponse_ResultEntryValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckResourcesResponse_ResultEntryValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResourcesResponse_ResultEntryValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckResourcesResponse_ResultEntryMultiError(errors)
	}

	return nil
}

// CheckResourcesResponse_ResultEntryMultiError is an error wrapping multiple
// validation errors returned by
// CheckResourcesResponse_ResultEntry.ValidateAll() if the designated
// constraints aren't met.
type CheckResourcesResponse_ResultEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcesResponse_ResultEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcesResponse_ResultEntryMultiError) AllErrors() []error { return m }

// CheckResourcesResponse_ResultEntryValidationError is the validation error
// returned by CheckResourcesResponse_ResultEntry.Validate if the designated
// constraints aren't met.
type CheckResourcesResponse_ResultEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcesResponse_ResultEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcesResponse_ResultEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcesResponse_ResultEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcesResponse_ResultEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcesResponse_ResultEntryValidationError) ErrorName() string {
	return "CheckResourcesResponse_ResultEntryValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcesResponse_ResultEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcesResponse_ResultEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcesResponse_ResultEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcesResponse_ResultEntryValidationError{}

// Validate checks the field values on
// CheckResourcesResponse_ResultEntry_Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResourcesResponse_ResultEntry_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourcesResponse_ResultEntry_Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckResourcesResponse_ResultEntry_ResourceMultiError, or nil if none found.
func (m *CheckResourcesResponse_ResultEntry_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcesResponse_ResultEntry_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Kind

	// no validation rules for PolicyVersion

	// no validation rules for Scope

	if len(errors) > 0 {
		return CheckResourcesResponse_ResultEntry_ResourceMultiError(errors)
	}

	return nil
}

// CheckResourcesResponse_ResultEntry_ResourceMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourcesResponse_ResultEntry_Resource.ValidateAll() if the designated
// constraints aren't met.
type CheckResourcesResponse_ResultEntry_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcesResponse_ResultEntry_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcesResponse_ResultEntry_ResourceMultiError) AllErrors() []error { return m }

// CheckResourcesResponse_ResultEntry_ResourceValidationError is the validation
// error returned by CheckResourcesResponse_ResultEntry_Resource.Validate if
// the designated constraints aren't met.
type CheckResourcesResponse_ResultEntry_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) ErrorName() string {
	return "CheckResourcesResponse_ResultEntry_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcesResponse_ResultEntry_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcesResponse_ResultEntry_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcesResponse_ResultEntry_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcesResponse_ResultEntry_ResourceValidationError{}

// Validate checks the field values on CheckResourcesResponse_ResultEntry_Meta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CheckResourcesResponse_ResultEntry_Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourcesResponse_ResultEntry_Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CheckResourcesResponse_ResultEntry_MetaMultiError, or nil if none found.
func (m *CheckResourcesResponse_ResultEntry_Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcesResponse_ResultEntry_Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetActions()))
		i := 0
		for key := range m.GetActions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetActions()[key]
			_ = val

			// no validation rules for Actions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckResourcesResponse_ResultEntry_MetaValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckResourcesResponse_ResultEntry_MetaValidationError{
							field:  fmt.Sprintf("Actions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckResourcesResponse_ResultEntry_MetaValidationError{
						field:  fmt.Sprintf("Actions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CheckResourcesResponse_ResultEntry_MetaMultiError(errors)
	}

	return nil
}

// CheckResourcesResponse_ResultEntry_MetaMultiError is an error wrapping
// multiple validation errors returned by
// CheckResourcesResponse_ResultEntry_Meta.ValidateAll() if the designated
// constraints aren't met.
type CheckResourcesResponse_ResultEntry_MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcesResponse_ResultEntry_MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcesResponse_ResultEntry_MetaMultiError) AllErrors() []error { return m }

// CheckResourcesResponse_ResultEntry_MetaValidationError is the validation
// error returned by CheckResourcesResponse_ResultEntry_Meta.Validate if the
// designated constraints aren't met.
type CheckResourcesResponse_ResultEntry_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) ErrorName() string {
	return "CheckResourcesResponse_ResultEntry_MetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcesResponse_ResultEntry_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcesResponse_ResultEntry_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcesResponse_ResultEntry_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcesResponse_ResultEntry_MetaValidationError{}

// Validate checks the field values on
// CheckResourcesResponse_ResultEntry_Meta_EffectMeta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckResourcesResponse_ResultEntry_Meta_EffectMeta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError, or nil if
// none found.
func (m *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourcesResponse_ResultEntry_Meta_EffectMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchedPolicy

	// no validation rules for MatchedScope

	if len(errors) > 0 {
		return CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError(errors)
	}

	return nil
}

// CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError is an error
// wrapping multiple validation errors returned by
// CheckResourcesResponse_ResultEntry_Meta_EffectMeta.ValidateAll() if the
// designated constraints aren't met.
type CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourcesResponse_ResultEntry_Meta_EffectMetaMultiError) AllErrors() []error { return m }

// CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError is the
// validation error returned by
// CheckResourcesResponse_ResultEntry_Meta_EffectMeta.Validate if the
// designated constraints aren't met.
type CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) ErrorName() string {
	return "CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourcesResponse_ResultEntry_Meta_EffectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourcesResponse_ResultEntry_Meta_EffectMetaValidationError{}

// Validate checks the field values on PlaygroundFailure_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaygroundFailure_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundFailure_Error with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaygroundFailure_ErrorMultiError, or nil if none found.
func (m *PlaygroundFailure_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundFailure_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	// no validation rules for Error

	if len(errors) > 0 {
		return PlaygroundFailure_ErrorMultiError(errors)
	}

	return nil
}

// PlaygroundFailure_ErrorMultiError is an error wrapping multiple validation
// errors returned by PlaygroundFailure_Error.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundFailure_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundFailure_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundFailure_ErrorMultiError) AllErrors() []error { return m }

// PlaygroundFailure_ErrorValidationError is the validation error returned by
// PlaygroundFailure_Error.Validate if the designated constraints aren't met.
type PlaygroundFailure_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundFailure_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundFailure_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundFailure_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundFailure_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundFailure_ErrorValidationError) ErrorName() string {
	return "PlaygroundFailure_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundFailure_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundFailure_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundFailure_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundFailure_ErrorValidationError{}

// Validate checks the field values on PlaygroundTestResponse_TestResults with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PlaygroundTestResponse_TestResults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundTestResponse_TestResults
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PlaygroundTestResponse_TestResultsMultiError, or nil if none found.
func (m *PlaygroundTestResponse_TestResults) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundTestResponse_TestResults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResults()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlaygroundTestResponse_TestResultsValidationError{
					field:  "Results",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlaygroundTestResponse_TestResultsValidationError{
					field:  "Results",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResults()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlaygroundTestResponse_TestResultsValidationError{
				field:  "Results",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlaygroundTestResponse_TestResultsMultiError(errors)
	}

	return nil
}

// PlaygroundTestResponse_TestResultsMultiError is an error wrapping multiple
// validation errors returned by
// PlaygroundTestResponse_TestResults.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundTestResponse_TestResultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundTestResponse_TestResultsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundTestResponse_TestResultsMultiError) AllErrors() []error { return m }

// PlaygroundTestResponse_TestResultsValidationError is the validation error
// returned by PlaygroundTestResponse_TestResults.Validate if the designated
// constraints aren't met.
type PlaygroundTestResponse_TestResultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundTestResponse_TestResultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundTestResponse_TestResultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundTestResponse_TestResultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundTestResponse_TestResultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundTestResponse_TestResultsValidationError) ErrorName() string {
	return "PlaygroundTestResponse_TestResultsValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundTestResponse_TestResultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundTestResponse_TestResults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundTestResponse_TestResultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundTestResponse_TestResultsValidationError{}

// Validate checks the field values on PlaygroundEvaluateResponse_EvalResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PlaygroundEvaluateResponse_EvalResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaygroundEvaluateResponse_EvalResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PlaygroundEvaluateResponse_EvalResultMultiError, or nil if none found.
func (m *PlaygroundEvaluateResponse_EvalResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundEvaluateResponse_EvalResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Effect

	// no validation rules for Policy

	for idx, item := range m.GetValidationErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponse_EvalResultValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponse_EvalResultValidationError{
						field:  fmt.Sprintf("ValidationErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundEvaluateResponse_EvalResultValidationError{
					field:  fmt.Sprintf("ValidationErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundEvaluateResponse_EvalResultMultiError(errors)
	}

	return nil
}

// PlaygroundEvaluateResponse_EvalResultMultiError is an error wrapping
// multiple validation errors returned by
// PlaygroundEvaluateResponse_EvalResult.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundEvaluateResponse_EvalResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundEvaluateResponse_EvalResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundEvaluateResponse_EvalResultMultiError) AllErrors() []error { return m }

// PlaygroundEvaluateResponse_EvalResultValidationError is the validation error
// returned by PlaygroundEvaluateResponse_EvalResult.Validate if the
// designated constraints aren't met.
type PlaygroundEvaluateResponse_EvalResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundEvaluateResponse_EvalResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundEvaluateResponse_EvalResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundEvaluateResponse_EvalResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundEvaluateResponse_EvalResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundEvaluateResponse_EvalResultValidationError) ErrorName() string {
	return "PlaygroundEvaluateResponse_EvalResultValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundEvaluateResponse_EvalResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundEvaluateResponse_EvalResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundEvaluateResponse_EvalResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundEvaluateResponse_EvalResultValidationError{}

// Validate checks the field values on
// PlaygroundEvaluateResponse_EvalResultList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlaygroundEvaluateResponse_EvalResultList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PlaygroundEvaluateResponse_EvalResultList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PlaygroundEvaluateResponse_EvalResultListMultiError, or nil if none found.
func (m *PlaygroundEvaluateResponse_EvalResultList) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaygroundEvaluateResponse_EvalResultList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponse_EvalResultListValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlaygroundEvaluateResponse_EvalResultListValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlaygroundEvaluateResponse_EvalResultListValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlaygroundEvaluateResponse_EvalResultListMultiError(errors)
	}

	return nil
}

// PlaygroundEvaluateResponse_EvalResultListMultiError is an error wrapping
// multiple validation errors returned by
// PlaygroundEvaluateResponse_EvalResultList.ValidateAll() if the designated
// constraints aren't met.
type PlaygroundEvaluateResponse_EvalResultListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaygroundEvaluateResponse_EvalResultListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaygroundEvaluateResponse_EvalResultListMultiError) AllErrors() []error { return m }

// PlaygroundEvaluateResponse_EvalResultListValidationError is the validation
// error returned by PlaygroundEvaluateResponse_EvalResultList.Validate if the
// designated constraints aren't met.
type PlaygroundEvaluateResponse_EvalResultListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) ErrorName() string {
	return "PlaygroundEvaluateResponse_EvalResultListValidationError"
}

// Error satisfies the builtin error interface
func (e PlaygroundEvaluateResponse_EvalResultListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaygroundEvaluateResponse_EvalResultList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaygroundEvaluateResponse_EvalResultListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaygroundEvaluateResponse_EvalResultListValidationError{}
