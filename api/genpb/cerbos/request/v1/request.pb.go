// Copyright 2021 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: cerbos/request/v1/request.proto

package requestv1

import (
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/engine/v1"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAuditLogEntriesRequest_Kind int32

const (
	ListAuditLogEntriesRequest_KIND_UNSPECIFIED ListAuditLogEntriesRequest_Kind = 0
	ListAuditLogEntriesRequest_KIND_ACCESS      ListAuditLogEntriesRequest_Kind = 1
	ListAuditLogEntriesRequest_KIND_DECISION    ListAuditLogEntriesRequest_Kind = 2
)

// Enum value maps for ListAuditLogEntriesRequest_Kind.
var (
	ListAuditLogEntriesRequest_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_ACCESS",
		2: "KIND_DECISION",
	}
	ListAuditLogEntriesRequest_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_ACCESS":      1,
		"KIND_DECISION":    2,
	}
)

func (x ListAuditLogEntriesRequest_Kind) Enum() *ListAuditLogEntriesRequest_Kind {
	p := new(ListAuditLogEntriesRequest_Kind)
	*p = x
	return p
}

func (x ListAuditLogEntriesRequest_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAuditLogEntriesRequest_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_request_v1_request_proto_enumTypes[0].Descriptor()
}

func (ListAuditLogEntriesRequest_Kind) Type() protoreflect.EnumType {
	return &file_cerbos_request_v1_request_proto_enumTypes[0]
}

func (x ListAuditLogEntriesRequest_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAuditLogEntriesRequest_Kind.Descriptor instead.
func (ListAuditLogEntriesRequest_Kind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{8, 0}
}

type CheckResourceSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Actions     []string      `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	Principal   *v1.Principal `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Resource    *ResourceSet  `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	IncludeMeta bool          `protobuf:"varint,5,opt,name=include_meta,json=includeMeta,proto3" json:"include_meta,omitempty"`
}

func (x *CheckResourceSetRequest) Reset() {
	*x = CheckResourceSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceSetRequest) ProtoMessage() {}

func (x *CheckResourceSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceSetRequest.ProtoReflect.Descriptor instead.
func (*CheckResourceSetRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{0}
}

func (x *CheckResourceSetRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckResourceSetRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourceSetRequest) GetPrincipal() *v1.Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *CheckResourceSetRequest) GetResource() *ResourceSet {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CheckResourceSetRequest) GetIncludeMeta() bool {
	if x != nil {
		return x.IncludeMeta
	}
	return false
}

type ResourceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string                    `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	PolicyVersion string                    `protobuf:"bytes,2,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	Instances     map[string]*AttributesMap `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceSet) Reset() {
	*x = ResourceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSet) ProtoMessage() {}

func (x *ResourceSet) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSet.ProtoReflect.Descriptor instead.
func (*ResourceSet) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceSet) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceSet) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *ResourceSet) GetInstances() map[string]*AttributesMap {
	if x != nil {
		return x.Instances
	}
	return nil
}

type AttributesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr map[string]*structpb.Value `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AttributesMap) Reset() {
	*x = AttributesMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributesMap) ProtoMessage() {}

func (x *AttributesMap) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributesMap.ProtoReflect.Descriptor instead.
func (*AttributesMap) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{2}
}

func (x *AttributesMap) GetAttr() map[string]*structpb.Value {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CheckResourceBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Principal *v1.Principal                           `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	Resources []*CheckResourceBatchRequest_BatchEntry `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *CheckResourceBatchRequest) Reset() {
	*x = CheckResourceBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceBatchRequest) ProtoMessage() {}

func (x *CheckResourceBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceBatchRequest.ProtoReflect.Descriptor instead.
func (*CheckResourceBatchRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{3}
}

func (x *CheckResourceBatchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CheckResourceBatchRequest) GetPrincipal() *v1.Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *CheckResourceBatchRequest) GetResources() []*CheckResourceBatchRequest_BatchEntry {
	if x != nil {
		return x.Resources
	}
	return nil
}

type PolicyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *PolicyFile) Reset() {
	*x = PolicyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyFile) ProtoMessage() {}

func (x *PolicyFile) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyFile.ProtoReflect.Descriptor instead.
func (*PolicyFile) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PolicyFile) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type PlaygroundValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string        `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	PolicyFiles  []*PolicyFile `protobuf:"bytes,2,rep,name=policy_files,json=policyFiles,proto3" json:"policy_files,omitempty"`
}

func (x *PlaygroundValidateRequest) Reset() {
	*x = PlaygroundValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundValidateRequest) ProtoMessage() {}

func (x *PlaygroundValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundValidateRequest.ProtoReflect.Descriptor instead.
func (*PlaygroundValidateRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{5}
}

func (x *PlaygroundValidateRequest) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (x *PlaygroundValidateRequest) GetPolicyFiles() []*PolicyFile {
	if x != nil {
		return x.PolicyFiles
	}
	return nil
}

type PlaygroundEvaluateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaygroundId string        `protobuf:"bytes,1,opt,name=playground_id,json=playgroundId,proto3" json:"playground_id,omitempty"`
	PolicyFiles  []*PolicyFile `protobuf:"bytes,2,rep,name=policy_files,json=policyFiles,proto3" json:"policy_files,omitempty"`
	Principal    *v1.Principal `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Resource     *v1.Resource  `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	Actions      []string      `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PlaygroundEvaluateRequest) Reset() {
	*x = PlaygroundEvaluateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaygroundEvaluateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaygroundEvaluateRequest) ProtoMessage() {}

func (x *PlaygroundEvaluateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaygroundEvaluateRequest.ProtoReflect.Descriptor instead.
func (*PlaygroundEvaluateRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{6}
}

func (x *PlaygroundEvaluateRequest) GetPlaygroundId() string {
	if x != nil {
		return x.PlaygroundId
	}
	return ""
}

func (x *PlaygroundEvaluateRequest) GetPolicyFiles() []*PolicyFile {
	if x != nil {
		return x.PolicyFiles
	}
	return nil
}

func (x *PlaygroundEvaluateRequest) GetPrincipal() *v1.Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *PlaygroundEvaluateRequest) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PlaygroundEvaluateRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type AddOrUpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*v11.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *AddOrUpdatePolicyRequest) Reset() {
	*x = AddOrUpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdatePolicyRequest) ProtoMessage() {}

func (x *AddOrUpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*AddOrUpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{7}
}

func (x *AddOrUpdatePolicyRequest) GetPolicies() []*v11.Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ListAuditLogEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind ListAuditLogEntriesRequest_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=cerbos.request.v1.ListAuditLogEntriesRequest_Kind" json:"kind,omitempty"`
	// Types that are assignable to Filter:
	//	*ListAuditLogEntriesRequest_Tail
	//	*ListAuditLogEntriesRequest_Between
	//	*ListAuditLogEntriesRequest_Since
	//	*ListAuditLogEntriesRequest_Lookup
	Filter isListAuditLogEntriesRequest_Filter `protobuf_oneof:"filter"`
}

func (x *ListAuditLogEntriesRequest) Reset() {
	*x = ListAuditLogEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogEntriesRequest) ProtoMessage() {}

func (x *ListAuditLogEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogEntriesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{8}
}

func (x *ListAuditLogEntriesRequest) GetKind() ListAuditLogEntriesRequest_Kind {
	if x != nil {
		return x.Kind
	}
	return ListAuditLogEntriesRequest_KIND_UNSPECIFIED
}

func (m *ListAuditLogEntriesRequest) GetFilter() isListAuditLogEntriesRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListAuditLogEntriesRequest) GetTail() uint32 {
	if x, ok := x.GetFilter().(*ListAuditLogEntriesRequest_Tail); ok {
		return x.Tail
	}
	return 0
}

func (x *ListAuditLogEntriesRequest) GetBetween() *ListAuditLogEntriesRequest_TimeRange {
	if x, ok := x.GetFilter().(*ListAuditLogEntriesRequest_Between); ok {
		return x.Between
	}
	return nil
}

func (x *ListAuditLogEntriesRequest) GetSince() *durationpb.Duration {
	if x, ok := x.GetFilter().(*ListAuditLogEntriesRequest_Since); ok {
		return x.Since
	}
	return nil
}

func (x *ListAuditLogEntriesRequest) GetLookup() string {
	if x, ok := x.GetFilter().(*ListAuditLogEntriesRequest_Lookup); ok {
		return x.Lookup
	}
	return ""
}

type isListAuditLogEntriesRequest_Filter interface {
	isListAuditLogEntriesRequest_Filter()
}

type ListAuditLogEntriesRequest_Tail struct {
	Tail uint32 `protobuf:"varint,2,opt,name=tail,proto3,oneof"`
}

type ListAuditLogEntriesRequest_Between struct {
	Between *ListAuditLogEntriesRequest_TimeRange `protobuf:"bytes,3,opt,name=between,proto3,oneof"`
}

type ListAuditLogEntriesRequest_Since struct {
	Since *durationpb.Duration `protobuf:"bytes,4,opt,name=since,proto3,oneof"`
}

type ListAuditLogEntriesRequest_Lookup struct {
	Lookup string `protobuf:"bytes,5,opt,name=lookup,proto3,oneof"`
}

func (*ListAuditLogEntriesRequest_Tail) isListAuditLogEntriesRequest_Filter() {}

func (*ListAuditLogEntriesRequest_Between) isListAuditLogEntriesRequest_Filter() {}

func (*ListAuditLogEntriesRequest_Since) isListAuditLogEntriesRequest_Filter() {}

func (*ListAuditLogEntriesRequest_Lookup) isListAuditLogEntriesRequest_Filter() {}

type ServerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInfoRequest) Reset() {
	*x = ServerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoRequest) ProtoMessage() {}

func (x *ServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoRequest.ProtoReflect.Descriptor instead.
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{9}
}

type CheckResourceBatchRequest_BatchEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions  []string     `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Resource *v1.Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *CheckResourceBatchRequest_BatchEntry) Reset() {
	*x = CheckResourceBatchRequest_BatchEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResourceBatchRequest_BatchEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResourceBatchRequest_BatchEntry) ProtoMessage() {}

func (x *CheckResourceBatchRequest_BatchEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResourceBatchRequest_BatchEntry.ProtoReflect.Descriptor instead.
func (*CheckResourceBatchRequest_BatchEntry) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CheckResourceBatchRequest_BatchEntry) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CheckResourceBatchRequest_BatchEntry) GetResource() *v1.Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type ListAuditLogEntriesRequest_TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ListAuditLogEntriesRequest_TimeRange) Reset() {
	*x = ListAuditLogEntriesRequest_TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_request_v1_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogEntriesRequest_TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogEntriesRequest_TimeRange) ProtoMessage() {}

func (x *ListAuditLogEntriesRequest_TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_request_v1_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogEntriesRequest_TimeRange.ProtoReflect.Descriptor instead.
func (*ListAuditLogEntriesRequest_TimeRange) Descriptor() ([]byte, []int) {
	return file_cerbos_request_v1_request_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListAuditLogEntriesRequest_TimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListAuditLogEntriesRequest_TimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

var File_cerbos_request_v1_request_proto protoreflect.FileDescriptor

var file_cerbos_request_v1_request_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x04, 0x0a, 0x17,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41,
	0x74, 0x32, 0x4a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x49, 0x44, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4a, 0x26, 0x22,
	0x63, 0x32, 0x64, 0x62, 0x31, 0x37, 0x62, 0x38, 0x2d, 0x34, 0x66, 0x39, 0x66, 0x2d, 0x34, 0x66,
	0x62, 0x31, 0x2d, 0x61, 0x63, 0x66, 0x64, 0x2d, 0x39, 0x31, 0x36, 0x32, 0x61, 0x30, 0x32, 0x62,
	0x65, 0x34, 0x32, 0x62, 0x22, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x92, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x78, 0x92, 0x41, 0x5f, 0x32, 0x38, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x4a, 0x1a, 0x5b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5d, 0xa0, 0x01, 0x0a,
	0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c,
	0x08, 0x01, 0x10, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40,
	0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4f, 0x70, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x3a, 0x12, 0x92,
	0x41, 0x0f, 0x0a, 0x0d, 0x32, 0x0b, 0x50, 0x44, 0x50, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xae, 0x07, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x12, 0xc8, 0x01, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xb3, 0x01, 0x92, 0x41, 0x62, 0x32, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x6b, 0x69, 0x6e, 0x64, 0x2e, 0x4a, 0x0e, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8a, 0x01, 0x3f, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40,
	0x5c, 0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x28, 0x5c, 0x3a, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x3a, 0x5d, 0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c,
	0x2e, 0x5c, 0x2d, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x47, 0x72,
	0x45, 0x10, 0x01, 0x32, 0x41, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d,
	0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d,
	0x2f, 0x5d, 0x2a, 0x28, 0x5c, 0x3a, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x5d,
	0x5d, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5c, 0x40, 0x5c, 0x2e, 0x5c, 0x2d,
	0x2f, 0x5d, 0x2a, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0xdd, 0x01, 0x0a,
	0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb5, 0x01, 0x92, 0x41, 0x99, 0x01, 0x32, 0x7c, 0x54, 0x68,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x09, 0x22, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0d, 0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64,
	0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0xe2, 0x41, 0x01, 0x01, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d,
	0x5e, 0x5b, 0x5b, 0x3a, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x5d, 0x5d, 0x2a, 0x24, 0x52, 0x0d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xf1, 0x02, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0xa3, 0x02, 0x92, 0x41, 0x8f, 0x02, 0x32, 0x6d, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x20, 0x45, 0x61, 0x63, 0x68,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x4a, 0x97, 0x01, 0x7b, 0x22, 0x58, 0x58, 0x31, 0x32, 0x35, 0x22,
	0x3a, 0x7b, 0x22, 0x61, 0x74, 0x74, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x22, 0x3a, 0x22, 0x62, 0x75, 0x67, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c,
	0x20, 0x22, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x7d, 0x7d, 0x2c, 0x20, 0x22, 0x58, 0x58, 0x32, 0x32, 0x35, 0x22, 0x3a, 0x7b, 0x22, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x64,
	0x61, 0x66, 0x66, 0x79, 0x5f, 0x64, 0x75, 0x63, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x22, 0x66, 0x6c, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x7d, 0x7d, 0xc0,
	0x01, 0x14, 0xc8, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x09, 0x9a, 0x01, 0x06, 0x08,
	0x01, 0x10, 0x14, 0x18, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x1a, 0x5e, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x20, 0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0xb1, 0x01, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x71, 0x92, 0x41, 0x66, 0x32, 0x64, 0x4b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x1a, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e,
	0x32, 0x2c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x22, 0xb8,
	0x06, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x77, 0x92, 0x41, 0x74, 0x32, 0x4a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x6c, 0x6f, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x4a, 0x26, 0x22, 0x63, 0x32, 0x64, 0x62, 0x31, 0x37, 0x62, 0x38, 0x2d, 0x34, 0x66,
	0x39, 0x66, 0x2d, 0x34, 0x66, 0x62, 0x31, 0x2d, 0x61, 0x63, 0x66, 0x64, 0x2d, 0x39, 0x31, 0x36,
	0x32, 0x61, 0x30, 0x32, 0x62, 0x65, 0x34, 0x32, 0x62, 0x22, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0xc2,
	0x02, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xea, 0x01, 0x92, 0x41,
	0xd8, 0x01, 0x32, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4a, 0xac, 0x01, 0x5b, 0x7b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x3a, 0x5b, 0x22, 0x76, 0x69, 0x65, 0x77, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x5d, 0x2c, 0x20, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3a,
	0x7b, 0x22, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3a, 0x22, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x3a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2c, 0x22, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x58, 0x58, 0x31, 0x32, 0x35, 0x22, 0x2c, 0x22, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x62,
	0x75, 0x67, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x6e, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x22, 0x66, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x7d, 0x7d,
	0x5d, 0xa0, 0x01, 0x14, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x14, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x57, 0x32, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4a, 0x1a, 0x5b, 0x22, 0x76,
	0x69, 0x65, 0x77, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x2c, 0x20, 0x22, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5d, 0xa0, 0x01, 0x0a, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x01, 0x10, 0x0a, 0x18, 0x01,
	0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0xe2,
	0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x12, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0x32, 0x0b, 0x50, 0x44,
	0x50, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x0a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0f, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x08, 0x7a, 0x06, 0x10, 0x01,
	0x18, 0x80, 0x80, 0x40, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x70, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x2e, 0x92, 0x41, 0x1d, 0x32, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0xa0, 0x01, 0x0a, 0xa8, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0x32, 0x1b, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x0c, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x2e, 0x92, 0x41, 0x1d, 0x32, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0xa0, 0x01, 0x0a, 0xa8, 0x01,
	0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x0c, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0c, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x54, 0x92, 0x41,
	0x3b, 0x32, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0xa0, 0x01, 0x0a, 0xa8, 0x01, 0x01, 0xb0, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02,
	0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x01, 0x10, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x22, 0x92, 0x41, 0x1f,
	0x0a, 0x1d, 0x32, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x19, 0x32, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0xa0, 0x01, 0x0a, 0xa8, 0x01, 0x01, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x0a, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x20,
	0x92, 0x41, 0x1d, 0x0a, 0x1b, 0x32, 0x19, 0x41, 0x64, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa5, 0x07, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x42, 0x3e, 0x92, 0x41, 0x31, 0x32, 0x11, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66,
	0x20, 0x6c, 0x6f, 0x67, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0xf2, 0x02, 0x0b, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0xf2, 0x02, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x18, 0x01,
	0x18, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x92, 0x41, 0x23, 0x32, 0x0f, 0x4c, 0x61, 0x73,
	0x74, 0x20, 0x4e, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x8f, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0xfa, 0x42,
	0x05, 0x2a, 0x03, 0x18, 0xe8, 0x07, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x53,
	0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x20, 0x4e, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x20, 0x61, 0x67, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x69, 0x92, 0x41, 0x37, 0x32, 0x0a, 0x42, 0x79, 0x20, 0x43, 0x61, 0x6c, 0x6c, 0x20, 0x49, 0x44,
	0x8a, 0x01, 0x28, 0x5e, 0x5b, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41,
	0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4d, 0x4e, 0x50, 0x51, 0x52, 0x53, 0x54,
	0x56, 0x57, 0x58, 0x59, 0x5a, 0x5d, 0x7b, 0x32, 0x36, 0x7d, 0x24, 0xfa, 0x42, 0x2c, 0x72, 0x2a,
	0x32, 0x28, 0x5e, 0x5b, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42,
	0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4d, 0x4e, 0x50, 0x51, 0x52, 0x53, 0x54, 0x56,
	0x57, 0x58, 0x59, 0x5a, 0x5d, 0x7b, 0x32, 0x36, 0x7d, 0x24, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x1a, 0xb0, 0x02, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x4e,
	0x92, 0x41, 0x3d, 0x32, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x36, 0x30, 0x31, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x4a, 0x1b, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x37, 0x2d, 0x30, 0x35,
	0x54, 0x30, 0x37, 0x3a, 0x32, 0x37, 0x3a, 0x30, 0x31, 0x2b, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x22,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x01, 0x38, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x7a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x4c,
	0x92, 0x41, 0x3b, 0x32, 0x1c, 0x45, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x36, 0x30, 0x31, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x4a, 0x1b, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x37, 0x2d, 0x30, 0x35, 0x54, 0x30,
	0x37, 0x3a, 0x32, 0x37, 0x3a, 0x30, 0x31, 0x2b, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x22, 0xe2, 0x41,
	0x01, 0x02, 0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x01, 0x38, 0x01, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32, 0x1d, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x22, 0x40, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x2f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x1a, 0x92,
	0x41, 0x17, 0x0a, 0x15, 0x32, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x73, 0x0a, 0x19, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x76, 0x31, 0xaa, 0x02, 0x15, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cerbos_request_v1_request_proto_rawDescOnce sync.Once
	file_cerbos_request_v1_request_proto_rawDescData = file_cerbos_request_v1_request_proto_rawDesc
)

func file_cerbos_request_v1_request_proto_rawDescGZIP() []byte {
	file_cerbos_request_v1_request_proto_rawDescOnce.Do(func() {
		file_cerbos_request_v1_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_request_v1_request_proto_rawDescData)
	})
	return file_cerbos_request_v1_request_proto_rawDescData
}

var file_cerbos_request_v1_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cerbos_request_v1_request_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cerbos_request_v1_request_proto_goTypes = []interface{}{
	(ListAuditLogEntriesRequest_Kind)(0),         // 0: cerbos.request.v1.ListAuditLogEntriesRequest.Kind
	(*CheckResourceSetRequest)(nil),              // 1: cerbos.request.v1.CheckResourceSetRequest
	(*ResourceSet)(nil),                          // 2: cerbos.request.v1.ResourceSet
	(*AttributesMap)(nil),                        // 3: cerbos.request.v1.AttributesMap
	(*CheckResourceBatchRequest)(nil),            // 4: cerbos.request.v1.CheckResourceBatchRequest
	(*PolicyFile)(nil),                           // 5: cerbos.request.v1.PolicyFile
	(*PlaygroundValidateRequest)(nil),            // 6: cerbos.request.v1.PlaygroundValidateRequest
	(*PlaygroundEvaluateRequest)(nil),            // 7: cerbos.request.v1.PlaygroundEvaluateRequest
	(*AddOrUpdatePolicyRequest)(nil),             // 8: cerbos.request.v1.AddOrUpdatePolicyRequest
	(*ListAuditLogEntriesRequest)(nil),           // 9: cerbos.request.v1.ListAuditLogEntriesRequest
	(*ServerInfoRequest)(nil),                    // 10: cerbos.request.v1.ServerInfoRequest
	nil,                                          // 11: cerbos.request.v1.ResourceSet.InstancesEntry
	nil,                                          // 12: cerbos.request.v1.AttributesMap.AttrEntry
	(*CheckResourceBatchRequest_BatchEntry)(nil), // 13: cerbos.request.v1.CheckResourceBatchRequest.BatchEntry
	(*ListAuditLogEntriesRequest_TimeRange)(nil), // 14: cerbos.request.v1.ListAuditLogEntriesRequest.TimeRange
	(*v1.Principal)(nil),                         // 15: cerbos.engine.v1.Principal
	(*v1.Resource)(nil),                          // 16: cerbos.engine.v1.Resource
	(*v11.Policy)(nil),                           // 17: cerbos.policy.v1.Policy
	(*durationpb.Duration)(nil),                  // 18: google.protobuf.Duration
	(*structpb.Value)(nil),                       // 19: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                // 20: google.protobuf.Timestamp
}
var file_cerbos_request_v1_request_proto_depIdxs = []int32{
	15, // 0: cerbos.request.v1.CheckResourceSetRequest.principal:type_name -> cerbos.engine.v1.Principal
	2,  // 1: cerbos.request.v1.CheckResourceSetRequest.resource:type_name -> cerbos.request.v1.ResourceSet
	11, // 2: cerbos.request.v1.ResourceSet.instances:type_name -> cerbos.request.v1.ResourceSet.InstancesEntry
	12, // 3: cerbos.request.v1.AttributesMap.attr:type_name -> cerbos.request.v1.AttributesMap.AttrEntry
	15, // 4: cerbos.request.v1.CheckResourceBatchRequest.principal:type_name -> cerbos.engine.v1.Principal
	13, // 5: cerbos.request.v1.CheckResourceBatchRequest.resources:type_name -> cerbos.request.v1.CheckResourceBatchRequest.BatchEntry
	5,  // 6: cerbos.request.v1.PlaygroundValidateRequest.policy_files:type_name -> cerbos.request.v1.PolicyFile
	5,  // 7: cerbos.request.v1.PlaygroundEvaluateRequest.policy_files:type_name -> cerbos.request.v1.PolicyFile
	15, // 8: cerbos.request.v1.PlaygroundEvaluateRequest.principal:type_name -> cerbos.engine.v1.Principal
	16, // 9: cerbos.request.v1.PlaygroundEvaluateRequest.resource:type_name -> cerbos.engine.v1.Resource
	17, // 10: cerbos.request.v1.AddOrUpdatePolicyRequest.policies:type_name -> cerbos.policy.v1.Policy
	0,  // 11: cerbos.request.v1.ListAuditLogEntriesRequest.kind:type_name -> cerbos.request.v1.ListAuditLogEntriesRequest.Kind
	14, // 12: cerbos.request.v1.ListAuditLogEntriesRequest.between:type_name -> cerbos.request.v1.ListAuditLogEntriesRequest.TimeRange
	18, // 13: cerbos.request.v1.ListAuditLogEntriesRequest.since:type_name -> google.protobuf.Duration
	3,  // 14: cerbos.request.v1.ResourceSet.InstancesEntry.value:type_name -> cerbos.request.v1.AttributesMap
	19, // 15: cerbos.request.v1.AttributesMap.AttrEntry.value:type_name -> google.protobuf.Value
	16, // 16: cerbos.request.v1.CheckResourceBatchRequest.BatchEntry.resource:type_name -> cerbos.engine.v1.Resource
	20, // 17: cerbos.request.v1.ListAuditLogEntriesRequest.TimeRange.start:type_name -> google.protobuf.Timestamp
	20, // 18: cerbos.request.v1.ListAuditLogEntriesRequest.TimeRange.end:type_name -> google.protobuf.Timestamp
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_cerbos_request_v1_request_proto_init() }
func file_cerbos_request_v1_request_proto_init() {
	if File_cerbos_request_v1_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_request_v1_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResourceSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributesMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResourceBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaygroundValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaygroundEvaluateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResourceBatchRequest_BatchEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_request_v1_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogEntriesRequest_TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_request_v1_request_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ListAuditLogEntriesRequest_Tail)(nil),
		(*ListAuditLogEntriesRequest_Between)(nil),
		(*ListAuditLogEntriesRequest_Since)(nil),
		(*ListAuditLogEntriesRequest_Lookup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_request_v1_request_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cerbos_request_v1_request_proto_goTypes,
		DependencyIndexes: file_cerbos_request_v1_request_proto_depIdxs,
		EnumInfos:         file_cerbos_request_v1_request_proto_enumTypes,
		MessageInfos:      file_cerbos_request_v1_request_proto_msgTypes,
	}.Build()
	File_cerbos_request_v1_request_proto = out.File
	file_cerbos_request_v1_request_proto_rawDesc = nil
	file_cerbos_request_v1_request_proto_goTypes = nil
	file_cerbos_request_v1_request_proto_depIdxs = nil
}
