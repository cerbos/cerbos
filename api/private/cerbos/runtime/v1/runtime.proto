// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cerbos.runtime.v1;

import "cerbos/effect/v1/effect.proto";
import "cerbos/policy/v1/policy.proto";
import "cerbos/source/v1/source.proto";
import "google/api/expr/v1alpha1/checked.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/cerbos/cerbos/api/genpb/cerbos/runtime/v1;runtimev1";

message RunnablePolicySet {
  string fqn = 1;
  oneof policy_set {
    RunnableResourcePolicySet resource_policy = 2;
    RunnablePrincipalPolicySet principal_policy = 3;
    RunnableDerivedRolesSet derived_roles = 4 [deprecated = true];
    RunnableVariablesSet variables = 5 [deprecated = true];
  }
  uint32 compiler_version = 6;
}

// RunnableResourcePolicySet is a container for all "compiled" resource policies
// belonging to a particular scope hierarchy. For example, consider the
// following policy files:
//
// Resource       Version     Scope
// --------------------------------
// leave_request  default     foo.bar.baz
// leave_request  default     foo.bar
// leave_request  default     foo
// leave_request  staging     foo
//
// After "compiling", the above would result in two RunnableResourcePolicySet
// objects. One containing the three leave_request:default polcies and one
// containing the single leave_request:staging policy.
message RunnableResourcePolicySet {
  message Metadata {
    string fqn = 1;
    string resource = 2;
    string version = 3;
    map<string, cerbos.policy.v1.SourceAttributes> source_attributes = 4;
    map<string, string> annotations = 5;
  }

  message Policy {
    message Rule {
      string name = 1;
      map<string, google.protobuf.Empty> actions = 2;
      map<string, google.protobuf.Empty> derived_roles = 3;
      map<string, google.protobuf.Empty> roles = 4;
      Condition condition = 5;
      cerbos.effect.v1.Effect effect = 6;
      Expr output = 7 [deprecated = true];
      Output emit_output = 8;
    }

    string scope = 1;
    map<string, RunnableDerivedRole> derived_roles = 2;
    map<string, Expr> variables = 3 [deprecated = true];
    repeated Rule rules = 4;
    cerbos.policy.v1.Schemas schemas = 5;
    repeated Variable ordered_variables = 6;
  }

  Metadata meta = 1;
  repeated Policy policies = 2;
  cerbos.policy.v1.Schemas schemas = 3;
}

message RunnableDerivedRole {
  string name = 1;
  map<string, google.protobuf.Empty> parent_roles = 2;
  map<string, Expr> variables = 3 [deprecated = true];
  Condition condition = 4;
  repeated Variable ordered_variables = 5;
}

message RunnableDerivedRolesSet {
  option deprecated = true;

  message Metadata {
    string fqn = 1;
    map<string, string> annotations = 2;
  }

  Metadata meta = 1;
  map<string, RunnableDerivedRole> derived_roles = 2;
}

message RunnableVariablesSet {
  option deprecated = true;

  message Metadata {
    string fqn = 1;
    map<string, string> annotations = 2;
  }

  Metadata meta = 1;
  map<string, Expr> variables = 2;
}

// RunnablePrincipalPolicySet is a container for all "compiled" principal
// policies belonging to a particular scope hierarchy. See the description of
// RunnableResourcePolicySet to get an idea about how this is constructed.
message RunnablePrincipalPolicySet {
  message Metadata {
    string fqn = 1;
    string principal = 2;
    string version = 3;
    map<string, cerbos.policy.v1.SourceAttributes> source_attributes = 4;
    map<string, string> annotations = 5;
  }

  message Policy {
    message ActionRule {
      string action = 1;
      string name = 2;
      Condition condition = 3;
      cerbos.effect.v1.Effect effect = 4;
      Expr output = 5 [deprecated = true];
      Output emit_output = 6;
    }

    message ResourceRules {
      repeated ActionRule action_rules = 1;
    }

    string scope = 1;
    map<string, Expr> variables = 2 [deprecated = true];
    map<string, ResourceRules> resource_rules = 3;
    repeated Variable ordered_variables = 4;
  }

  Metadata meta = 1;
  repeated Policy policies = 2;
}

message Expr {
  string original = 1;
  google.api.expr.v1alpha1.CheckedExpr checked = 2;
}

message Output {
  message When {
    Expr rule_activated = 1;
    Expr condition_not_met = 2;
  }

  When when = 1;
}

message Variable {
  string name = 1;
  Expr expr = 2;
}

message Condition {
  message ExprList {
    repeated Condition expr = 1;
  }

  oneof op {
    ExprList all = 1;
    ExprList any = 2;
    ExprList none = 3;
    Expr expr = 4;
  }
}

message CompileErrors {
  message Err {
    string file = 1;
    string error = 2;
    string description = 3;
    cerbos.source.v1.Position position = 4;
    string context = 5;
  }

  repeated Err errors = 1;
}

message IndexBuildErrors {
  message DuplicateDef {
    string file = 1;
    string other_file = 2;
    string policy = 3;
    cerbos.source.v1.Position position = 4;
  }

  message MissingImport {
    string importing_file = 1;
    string desc = 2;
    string importing_policy = 3;
    string import_kind = 4;
    string import_name = 5;
    cerbos.source.v1.Position position = 6;
    string context = 7;
  }

  message MissingScope {
    string missing_policy = 1;
    repeated string descendants = 2;
  }

  message LoadFailure {
    string file = 1;
    string error = 2 [deprecated = true];
    cerbos.source.v1.Error error_details = 3;
  }

  message Disabled {
    string file = 1;
    string policy = 2;
    cerbos.source.v1.Position position = 3;
  }

  repeated string disabled = 1 [deprecated = true];
  repeated DuplicateDef duplicate_defs = 2;
  repeated LoadFailure load_failures = 3;
  repeated MissingImport missing_imports = 4;
  repeated string missing_scopes = 5 [deprecated = true];
  repeated Disabled disabled_defs = 6;
  repeated MissingScope missing_scope_details = 7;
}

message Errors {
  oneof kind {
    IndexBuildErrors index_build_errors = 1;
    CompileErrors compile_errors = 2;
  }
}
