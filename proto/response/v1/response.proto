// Copyright 2021 Zenauth Ltd.

syntax = "proto3";

package response.v1;

option go_package = "github.com/cerbos/cerbos/internal/genpb/response/v1;responsev1";
option java_package = "dev.cerbos.api.v1.response";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "shared/v1/shared.proto";

message CheckResourceSetResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			description: "Policy evaluation response for a set of resources."
		}
    };

    message ActionEffectMap {
        map<string,shared.v1.Effect> actions = 1 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                description: "Mapping of each action to an effect."
            } 
        ];
    }

    message Meta {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
            json_schema: {
                description: "Metadata about request evaluation."
            }
        };

        message EffectMeta {
            option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
                json_schema: {
                    description: "Name of the action."
                }
            };
            string matched_policy = 1 [
                (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                    description: "Policy that matched to produce this effect."
                    example: "\"album:object:default\""
                } 
            ];
        }
            
        message ActionMeta {
            option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
                json_schema: {
                    description: "Unique resource instance ID supplied in the request."
                }
            };
            map<string, EffectMeta> actions = 1 [
                (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                    description: "Metadata about the effect calculated for each action on this resource instance."
                    example: "{\"view:*\":{\"matched_policy\": \"album:object:default\"},\"comment\":{\"matched_policy\": \"album:object:default\"}}"
                } 
            ];
            repeated string effective_derived_roles = 2 [
                (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                    description: "Derived roles that were effective during policy evaluation."
                    example: "[\"owner\"]"
                } 
            ];
        }

        map<string,ActionMeta> resource_instances = 1 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                description: "Metadata about resource instances."
                example: "{\"XX125\": {\"actions\": {\"view:*\":{\"matched_policy\": \"album:object:default\"},\"comment\":{\"matched_policy\": \"album:object:default\"}}, \"effective_derived_roles\": [\"owner\"]}, \"XX225\": {\"actions\": {\"view:*\":{\"matched_policy\": \"album:object:default\"},\"comment\":{\"matched_policy\": \"album:object:default\"}}}}"
            } 
        ];
    }

    string request_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
            description: "Request ID provided in the request."
            example: "\"c2db17b8-4f9f-4fb1-acfd-9162a02be42b\""
        } 
    ];
    map<string,ActionEffectMap> resource_instances = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
            description: "Results for each resource instance, keyed by the ID supplied in the request"
            example: "{\"XX125\":{\"actions\":{\"view:*\":\"EFFECT_ALLOW\", \"comment\": \"EFFECT_ALLOW\"}}, \"XX225\":{\"actions\":{\"view:*\":\"EFFECT_DENY\", \"comment\": \"EFFECT_DENY\"}}}"
        }
    ];
    Meta meta = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
            description: "Optional metadata about the request evaluation process"
        }
    ];
}


message CheckResourceBatchResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			description: "Policy evaluation response for a batch of resources."
		}
    };

    message ActionEffectMap {
        string resource_id = 1 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                description: "Resource ID"
                example: "\"XX125\""
            } 
        ];
        map<string,shared.v1.Effect> actions = 2 [
            (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
                description: "Mapping of each action to an effect."
                example: "{\"view\":\"EFFECT_ALLOW\"}"
            } 
        ];
    }

    string request_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
            description: "Request ID provided in the request."
            example: "\"c2db17b8-4f9f-4fb1-acfd-9162a02be42b\""
        } 
    ];
    repeated ActionEffectMap results = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { 
            description: "Result for each resource"
            example: "[{\"resourceId\":\"XX125\",\"actions\":{\"view\":\"EFFECT_ALLOW\"}}]"
        } 
    ];
}

message PlaygroundFailure {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			description: "Playground response"
		}
    };
    
    message Error {
        string file = 1;
        string error = 2;
    }

    repeated Error errors = 1;
}

message PlaygroundValidateResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			description: "Playground validate response"
		}
    };

    string playground_id = 1;

    oneof outcome {
        PlaygroundFailure failure = 2;
        google.protobuf.Empty success = 3;
    }
}

message PlaygroundEvaluateResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			description: "Playground evaluate response"
		}
    };
    
    message EvalResult {
        string action = 1;
        shared.v1.Effect effect = 2;
        string policy = 3;
        repeated string effective_derived_roles = 4;
    }

    message EvalResultList {
        repeated EvalResult results = 1;
    }

    string playground_id = 1;
    oneof outcome {
        PlaygroundFailure failure = 2;
        EvalResultList success = 3;
    }
}
