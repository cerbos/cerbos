// Copyright 2021 Zenauth Ltd.

syntax = "proto3";

package policy.v1;

option go_package = "github.com/cerbos/cerbos/internal/genpb/policy/v1;policyv1";
option java_package = "dev.cerbos.api.v1.policy";

import "engine/v1/engine.proto";
import "request/v1/request.proto";
import "shared/v1/shared.proto";
import "validate/validate.proto";

message Policy {
    string api_version = 1 [(validate.rules).string.const = "api.cerbos.dev/v1"];
    bool disabled = 2;
    string description = 3;
    oneof policy_type {
        option (validate.required) = true;
        ResourcePolicy resource_policy = 4;
        PrincipalPolicy principal_policy = 5;
        DerivedRoles derived_roles = 6;
    }
}

message ResourcePolicy {
    string resource = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$", min_len: 1}];
    string version = 2 [(validate.rules).string.pattern = "^[[:word:]]+$"];
    repeated string import_derived_roles = 3 [(validate.rules).repeated = { unique: true, items { string { pattern: "^[[:word:]\\-\\.]+$" } } }];
    repeated ResourceRule rules = 4 [(validate.rules).repeated.min_items = 1];
}

message ResourceRule {
    repeated string actions = 1 [(validate.rules).repeated = { unique: true, items { string { min_len: 1 } } }];
    repeated string derived_roles = 2 [(validate.rules).repeated = { unique: true, items { string { pattern: "^[[:word:]\\-\\.]+$" } } }];
    repeated string roles = 3 [(validate.rules).repeated = { unique: true, items { string { pattern: "^[[:word:]\\-\\.]+$" } } }];
    Condition condition = 4;
    shared.v1.Effect effect = 5 [(validate.rules).enum = {in: [1,2]}];
}

message PrincipalPolicy {
    string principal = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-]*(\\:[[:alpha:]][[:word:]\\@\\.\\-]*)*$", min_len: 1}];
    string version = 2 [(validate.rules).string.pattern = "^[[:word:]]+$"];
    repeated PrincipalRule rules = 3 [(validate.rules).repeated.min_items = 1];
}

message PrincipalRule {
    message Action {
        string action = 1 [(validate.rules).string.min_len = 1];
        Condition condition = 2;
        shared.v1.Effect effect = 3 [(validate.rules).enum = {in: [1,2]}];
    }

    string resource = 1 [(validate.rules).string = {pattern: "^[[:alpha:]][[:word:]\\@\\.\\-/]*(\\:[[:alpha:]][[:word:]\\@\\.\\-/]*)*$", min_len:1}];
    repeated Action actions = 2 [(validate.rules).repeated.min_items = 1];
}

message DerivedRoles {
    string name = 1 [(validate.rules).string = {pattern:"^[[:word:]\\-\\.]+$", min_len: 1}];
    repeated RoleDef definitions = 2 [(validate.rules).repeated.min_items = 1];
}

message RoleDef {
    string name = 1 [(validate.rules).string.pattern = "^[[:word:]\\-\\.]+$"];
    repeated string parent_roles = 2 [(validate.rules).repeated = { unique: true, min_items:1, items { string { pattern: "^[[:word:]\\-\\.]+$" } } }];
    Condition condition = 3;
}

message Condition {
    oneof condition {
        option (validate.required) = true;
        Match match = 1;
        string script = 2;
    }
}

message Match {
    message ExprList {
        repeated Match of = 1 [(validate.rules).repeated = { min_items:1 }];
    }
        
    oneof op {
        option (validate.required) = true;
        ExprList all = 1;
        ExprList any = 2;
        ExprList none = 3;
        string expr = 4;
    }
}

message TestSuite {
    string name = 1 [(validate.rules).string.min_len = 1];
    string description = 2;
    bool skip = 3;
    string skip_reason = 4;
    repeated Test tests = 5 [(validate.rules).repeated.min_items = 1];
}

message Test {
    message ActionEffectMap {
        map<string,shared.v1.Effect> actions = 1;
    }
    
    string name = 1 [(validate.rules).string.min_len = 1];
    string description = 2;
    bool skip = 3;
    string skip_reason = 4;
    engine.v1.CheckInput input = 5 [(validate.rules).message.required = true];
    map<string,shared.v1.Effect> expected = 6;
}
