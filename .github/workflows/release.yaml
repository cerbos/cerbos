---
name: Release
on:
  workflow_dispatch:
  push:
    tags:
      - v*
jobs:
  releaseBinaries:
    name: Release Binaries
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Install Go and restore cached dependencies
        uses: ./.github/actions/setup-go
        with:
          cross_compiling: true

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.AWS_CONTAINER_REGISTRY_ID }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.10.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: .node-version

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --config=.goreleaser.yml --clean
        env:
          AWS_CONTAINER_REPO: ${{ vars.AWS_CONTAINER_REPO }}
          AWS_PRODUCT_CODE: ${{ vars.AWS_PRODUCT_CODE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
          TELEMETRY_WRITE_KEY: ${{ secrets.TELEMETRY_WRITE_KEY }}
          TELEMETRY_URL: ${{ secrets.TELEMETRY_URL }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: dist/

      - name: Publish npm packages
        working-directory: npm
        run: corepack npm publish --workspaces --access=public --provenance

  releaseProtos:
    name: Release Protobufs
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Push to BSR
        uses: bufbuild/buf-action@v1.3.0
        with:
          push: true
          token: ${{ secrets.BUF_TOKEN }}

  releaseJSONSchemas:
    name: Release JSON schemas
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v5

      - name: GCloud Auth
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY}}

      - name: Install Cloud SDK
        uses: google-github-actions/setup-gcloud@v3.0.1

      - name: Publish JSON schemas
        run: |-
          VERSION="${GITHUB_REF#refs/tags/}"
          GCS_BUCKET="${{ secrets.API_GCS_BUCKET }}"
          hack/scripts/publish-json-schemas.sh "${VERSION}" "${GCS_BUCKET}"
          gsutil -m rsync -d -r "gs://${GCS_BUCKET}/${VERSION}" "gs://${GCS_BUCKET}/latest"

  releaseDocs:
    name: Release Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0
          lfs: true

      - name: Generate docs
        uses: ./.github/actions/antora-docs

      - name: Publish to Netlify
        uses: ./.github/actions/publish-docs
        with:
          auth_token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          site_id: ${{ secrets.NETLIFY_SITE_ID }}

  publishHelm:
    name: Publish Helm chart
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    env:
      CHARTS_DIR: deploy/out/helm-charts
      OCI_REGISTRY: ghcr.io/cerbos/helm-charts
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v3.5

      - name: GCloud Auth
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY}}

      - name: Install Cloud SDK
        uses: google-github-actions/setup-gcloud@v3.0.1

      - name: Package Helm chart
        run: |-
          mkdir -p ${{ env.CHARTS_DIR }}/cerbos
          helm package -d ${{ env.CHARTS_DIR }}/cerbos deploy/charts/cerbos

      - name: Publish to download site
        run: |-
          gsutil cp "gs://${{ secrets.DOWNLOAD_GCS_BUCKET }}/helm-charts/index.yaml" "${{ env.CHARTS_DIR }}/index.yaml"
          helm repo index --url=https://download.cerbos.dev/helm-charts --merge=${{ env.CHARTS_DIR }}/index.yaml ${{ env.CHARTS_DIR }}
          gsutil rsync -r ${{ env.CHARTS_DIR }}/ "gs://${{ secrets.DOWNLOAD_GCS_BUCKET }}/helm-charts/"

      - name: Publish to OCI registry
        run: |-
          helm registry login ${{ env.OCI_REGISTRY }} -u ${{ secrets.HELM_CHARTS_REPO_USER }} -p ${{ secrets.HELM_CHARTS_REPO_TOKEN }}
          CHART=$(ls ${{ env.CHARTS_DIR }}/cerbos/*.tgz); helm push $CHART oci://${{ env.OCI_REGISTRY }}
          helm registry logout ${{ env.OCI_REGISTRY }}
        env:
          HELM_EXPERIMENTAL_OCI: "1"

  publishLambdaFunction:
    name: Publish AWS Lambda Function to SAR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: releaseBinaries
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        include:
          - arch: amd64
          - arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Download GoReleaser artifacts
        uses: actions/download-artifact@v5
        with:
          name: artifacts
          path: dist/

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Prepare, package and publish Lambda function to AWS SARs
        run: |-
          VERSION="${GITHUB_REF#refs/tags/}"
          export AWS_REGION="${{ vars.AWS_REGION }}"
          just -f ./deploy/awslambda/function/.justfile publish-to-sar "$VERSION" "${{ secrets.AWS_SAR_PUBLISHING_BUCKET }}" "${{ matrix.arch }}"

      - name: Prepare, package and publish Lambda extension to AWS SARs
        run: |-
          VERSION="${GITHUB_REF#refs/tags/}"
          export AWS_REGION="${{ vars.AWS_REGION }}"
          just -f ./deploy/awslambda/extension/.justfile publish-to-sar "$VERSION" "${{ secrets.AWS_SAR_PUBLISHING_BUCKET }}" "${{ matrix.arch }}"
