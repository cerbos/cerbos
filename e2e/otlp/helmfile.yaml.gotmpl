repositories:
  - name: jaegertracing
    url: https://jaegertracing.github.io/helm-charts
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts

helmDefaults:
  cleanupOnFail: true
  wait: true
  recreatePods: true
  force: true
  createNamespace: true

releases:
  - name: prometheus
    namespace: '{{ requiredEnv "E2E_NS" }}'
    createNamespace: true
    labels:
      e2e-run: '{{ requiredEnv "E2E_RUN_ID" }}'
      e2e-ctx: '{{ requiredEnv "E2E_CONTEXT_ID" }}'
    chart: prometheus-community/prometheus
    values:
      - alertmanager:
          enabled: false
      - configmapReload:
          prometheus:
            enabled: false
      - kube-state-metrics:
          enabled: false
      - prometheus-node-exporter:
          enabled: false
      - prometheus-pushgateway:
          enabled: false
      - server:
          extraFlags: ["enable-feature=otlp-write-receiver"]
          persistentVolume.enabled: false


  - name: jaeger
    namespace: '{{ requiredEnv "E2E_NS" }}'
    createNamespace: true
    labels:
      e2e-run: '{{ requiredEnv "E2E_RUN_ID" }}'
      e2e-ctx: '{{ requiredEnv "E2E_CONTEXT_ID" }}'
    chart: jaegertracing/jaeger
    values:
      - provisionDataStore:
          cassandra: false
      - storage:
          type: memory
      - agent:
          enabled: false
      - allInOne:
          enabled: true
      - collector:
          enabled: false
      - query:
          enabled: false

  - name: cerbos
    namespace: '{{ requiredEnv "E2E_NS" }}'
    createNamespace: true
    needs:
      - jaeger
      - prometheus
    labels:
      e2e-run: '{{ requiredEnv "E2E_RUN_ID" }}'
      e2e-ctx: '{{ requiredEnv "E2E_CONTEXT_ID" }}'
    chart: '{{ requiredEnv "E2E_SRC_ROOT" }}/deploy/charts/cerbos'
    hooks:
      - events: ["presync"]
        showlogs: true
        command: kubectl
        args:
          - create
          - secret
          - tls
          - 'cerbos-certs-{{ requiredEnv "E2E_CONTEXT_ID" }}'
          - '--cert={{ requiredEnv "E2E_SRC_ROOT" }}/internal/test/testdata/server/tls.crt'
          - '--key={{ requiredEnv "E2E_SRC_ROOT" }}/internal/test/testdata/server/tls.key'
          - '--namespace={{ requiredEnv "E2E_NS" }}'
      - events: ["postuninstall"]
        showlogs: true
        command: kubectl
        args:
          - delete
          - secret
          - 'cerbos-certs-{{ requiredEnv "E2E_CONTEXT_ID" }}'
          - '--namespace={{ requiredEnv "E2E_NS" }}'
    values:
      - nameOverride: '{{ requiredEnv "E2E_CONTEXT_ID" }}'
      - image:
          repository: '{{ env "E2E_CERBOS_IMG_REPO" | default "ghcr.io/cerbos/cerbos" }}'
          tag: '{{ env "E2E_CERBOS_IMG_TAG" | default "dev" }}'
      - volumes:
        - name: cerbos-auditlog
          emptyDir: {}
        - name: cerbos-policies
          emptyDir: {}
      - volumeMounts:
        - name: cerbos-auditlog
          mountPath: /audit
        - name: cerbos-policies
          mountPath: /data
      - env:
        - name: OTEL_SERVICE_NAME
          value: cerbos
        - name: OTEL_TRACE_SAMPLER
          value: always_on
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: 'http://jaeger-collector.{{ requiredEnv "E2E_NS" }}.svc.cluster.local:4317'
        - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
          value: grpc
        - name: OTEL_METRICS_EXPORTER
          value: otlp
        - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
          value: 'http://prometheus-server.{{ requiredEnv "E2E_NS" }}.svc.cluster.local:80/api/v1/otlp/v1/metrics'
        - name: OTEL_EXPORTER_OTLP_METRICS_PROTOCOL
          value: http/protobuf
        - name: OTEL_EXPORTER_OTLP_INSECURE
          value: 'true'
      - cerbos:
          tlsSecretName: 'cerbos-certs-{{ requiredEnv "E2E_CONTEXT_ID" }}'
          logLevel: DEBUG
          config:
            server:
              playgroundEnabled: true
              requestLimits:
                maxActionsPerResource: 5
                maxResourcesPerRequest: 5
              adminAPI:
                enabled: true
                adminCredentials:
                  username: cerbos
                  passwordHash: JDJ5JDEwJC5BYjQyY2RJNG5QR2NWMmJPdnNtQU93c09RYVA0eFFGdHBrbmFEeXh1NnlIVTE1cHJNY05PCgo=
            auxData:
              jwt:
                disableVerification: true
            schema:
              enforcement: reject
            audit:
              enabled: true
              accessLogsEnabled: true
              decisionLogsEnabled: true
              backend: local
              local:
                storagePath: /audit/cerbos
            storage:
              driver: "sqlite3"
              sqlite3:
                dsn: "file:/data/cerbos.sqlite?mode=rwc&_fk=true"
            telemetry:
              disabled: true
